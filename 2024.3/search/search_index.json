{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "index.html", "title": "QTM Scripting Interface", "text": "<p>The QTM Scripting Interface provides scripting support for QTM (Qualisys Track Manager). Scripting is supported through both Python and Lua. Additionally, the QTM Scripting Interface is also exposed through a REST API.</p> <p>The API's functionality (that is, what QTM functionality can be accessed) is exposed through a number of modules. This documentation provides a language agnostic description of the modules. For more details, see the list of modules. Below follows some short examples:</p> PythonLuaREST <pre><code>from qtm.data.series import _3d\nfrom qtm.data.object import trajectory\n# Get the data series identifier of a trajectory with the label \"F_HeadFront\".\nid = trajectory.find_trajectory(\"F_HeadFront\")\n# Get the first sample of this trajectory.\n_3d.get_sample(id, 0)\n# {'position': [-1193.8392806851402, 1428.9096641692772, 1677.330950395389], 'residual': 1.933161315987386}\n</code></pre> <pre><code>-- Get the data series identifier of a trajectory with the label \"F_HeadFront\".\nid = qtm.data.object.trajectory.find_trajectory(\"F_HeadFront\")\n-- Get the first sample of this trajectory.\nqtm.data.series._3d.get_sample(id, 0)\n-- {position = {-1193.8392806851, 1428.9096641693, 1677.3309503954}, residual = 1.9331613159874}\n</code></pre> <pre><code>curl --json \"[\\\"F_HeadFront\\\"]\" http://localhost:7979/api/scripting/qtm/data/object/trajectory/find_trajectory\n::  2985\ncurl --json \"[2985, 0]\" http://localhost:7979/api/scripting/qtm/data/series/_3d/get_sample\n:: {\"position\":[-1193.8392806851402,1428.9096641692772,1677.330950395389],\"residual\":1.9331613159873859}\n</code></pre>"}, {"location": "changelog.html", "title": "Changelog", "text": "Version Changes 2024.3 Added qtm.settings.export.mat.get_skeleton_reference_frame method. Added qtm.settings.export.mat.set_skeleton_reference_frame method. Added qtm.settings.export.tsv.get_skeleton_reference_frame method. Added qtm.settings.export.tsv.set_skeleton_reference_frame method. 2024.2 Added qtm.data.object.trajectory.get_is_discarded method. Added qtm.data.object.trajectory.set_is_discarded method. 2024.1 qtm.data.series.*.get_sample_range method now returns null if there are no samples. Added qtm.data.series._6d.set_sample method. Added qtm.data.series._6d.set_samples method. Added qtm.data.series._6d.delete_sample method. Added qtm.data.series._6d.delete_samples method. qtm.data.series._6d module now correctly handles missing samples. Added qtm.settings.processing.aim module. Added qtm.settings.processing._6d.get_body_is_enabled method. Added qtm.settings.processing._6d.set_body_is_enabled method. Removed qtm.settings.processing._3d.get_discard_out_of_bounds_intersections method. Removed qtm.settings.processing._3d.set_discard_out_of_bounds_intersections method. Added qtm.settings.processing module. Added qtm.settings.camera.get_ip_address method. qtm.gui._3d.draw_mesh now correctly scales meshes that have a size not equal to 1 unit. Added qtm.data.object.trajectory.get_color method. Added qtm.data.object.trajectory.set_color method. Added qtm.data.object.bone module. 2023.3 - 2023.2 Initial release."}, {"location": "modules.html", "title": "Modules", "text": "<ul> <li>qtm - Interface to the qtm application.</li> <li>qtm.data.object.bone - Access and modify bones.</li> <li>qtm.data.object.event - Access and modify events.</li> <li>qtm.data.object.skeleton - Access skeletons.</li> <li>qtm.data.object.trajectory - Access and modify trajectories.</li> <li>qtm.data.series._2d - Access 2d data series.</li> <li>qtm.data.series._3d - Access and modify 3d data series.</li> <li>qtm.data.series._6d - Access and modify 6dof data series.</li> <li>qtm.data.series.analog - Access analog data series.</li> <li>qtm.data.series.force - Access force data series.</li> <li>qtm.data.series.gaze - Access gaze data series.</li> <li>qtm.data.series.skeleton - Access and modify skeleton data series.</li> <li>qtm.data.series.time.irig - Access and modify irig (inter-range instrumentation group) data series.</li> <li>qtm.data.series.time.ptp - Access and modify ptp (precision time protocol) data series.</li> <li>qtm.data.series.time.smpte - Access and modify smpte (society of motion picture and television engineers) data series.</li> <li>qtm.gui - Control and customize the graphical user interface.</li> <li>qtm.gui._3d - Interface to the measurement 3d view with methods for custom drawing.</li> <li>qtm.gui.message - Interface to the messages window.</li> <li>qtm.gui.selection - Access and modify the current selection.</li> <li>qtm.gui.terminal - Interface to the terminal window.</li> <li>qtm.gui.timeline - Interface to the measurement timeline.</li> <li>qtm.settings.camera - Access and modify camera settings.</li> <li>qtm.settings.directory - Access and modify directory settings.</li> <li>qtm.settings.euler - Access and modify euler angle settings.</li> <li>qtm.settings.export.c3d - Access and modify c3d export settings.</li> <li>qtm.settings.export.fbx - Access and modify fbx export settings.</li> <li>qtm.settings.export.mat - Access and modify mat export settings.</li> <li>qtm.settings.export.tsv - Access and modify tsv export settings.</li> <li>qtm.settings.processing - Access and modify processing settings.</li> <li>qtm.settings.processing._2d - Access and modify 2d processing settings.</li> <li>qtm.settings.processing._3d - Access and modify 3d processing settings.</li> <li>qtm.settings.processing._6d - Access and modify 6dof processing settings.</li> <li>qtm.settings.processing.aim - Access and modify aim processing settings.</li> <li>qtm.settings.processing.skeleton - Access and modify skeleton processing settings.</li> <li>qtm.utilities.color - Utilities for converting various color models to a qtm compatible format.</li> <li>qtm.utilities.documentation - Various documentation utilities.</li> <li>qtm.utilities.math - Various math utilities.</li> </ul>"}, {"location": "qtm.data.object.bone.html", "title": "qtm.data.object.bone", "text": "<p>Access and modify bones.</p>"}, {"location": "qtm.data.object.bone.html#add_bone", "title": "add_bone", "text": "<p>Add a bone. <pre><code>qtm.data.object.bone.add_bone(trajectory_id_1, trajectory_id_2, color?)\n</code></pre></p> <p>Parameters</p> <p><code>trajectory_id_1</code> <code>integer</code> The identifier of the first trajectory.</p> <p><code>trajectory_id_2</code> <code>integer</code> The identifier of the second trajectory.</p> <p><code>color</code> <code>integer?</code> The color of the bone (in 0xbbggrr format, see 'qtm.utilities.color' module).</p> <p>Returns</p> <p><code>integer</code> The identifier of the added bone.</p>"}, {"location": "qtm.data.object.bone.html#delete_bone", "title": "delete_bone", "text": "<p>Delete a bone. <pre><code>qtm.data.object.bone.delete_bone(bone_id)\n</code></pre></p> <p>Parameters</p> <p><code>bone_id</code> <code>integer</code> The identifier of the bone.</p>"}, {"location": "qtm.data.object.bone.html#find_bone", "title": "find_bone", "text": "<p>Find a bone by trajectory ids. <pre><code>qtm.data.object.bone.find_bone(trajectory_id_1, trajectory_id_2)\n</code></pre></p> <p>Parameters</p> <p><code>trajectory_id_1</code> <code>integer</code> The identifier of the first trajectory.</p> <p><code>trajectory_id_2</code> <code>integer</code> The identifier of the second trajectory.</p> <p>Returns</p> <p><code>integer?</code> The identifier of the found bone (or null, if no bone was found).</p>"}, {"location": "qtm.data.object.bone.html#clear_bones", "title": "clear_bones", "text": "<p>Delete all bones. <pre><code>qtm.data.object.bone.clear_bones()\n</code></pre></p>"}, {"location": "qtm.data.object.bone.html#get_bone_id", "title": "get_bone_id", "text": "<p>Get a bone identifier by index. <pre><code>qtm.data.object.bone.get_bone_id(index)\n</code></pre></p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the bone.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.bone.html#get_bone_ids", "title": "get_bone_ids", "text": "<p>Get all bone identifiers. <pre><code>qtm.data.object.bone.get_bone_ids()\n</code></pre></p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.object.bone.html#get_bone_count", "title": "get_bone_count", "text": "<p>Get the number of bones. <pre><code>qtm.data.object.bone.get_bone_count()\n</code></pre></p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.bone.html#get_bone_trajectory_ids", "title": "get_bone_trajectory_ids", "text": "<p>Get the trajectory identifiers of a bone. <pre><code>qtm.data.object.bone.get_bone_trajectory_ids(bone_id)\n</code></pre></p> <p>Parameters</p> <p><code>bone_id</code> <code>integer</code> The identifier of the bone.</p> <p>Returns</p> <p><code>integer, integer</code> The trajectory identifiers of the bone.</p>"}, {"location": "qtm.data.object.bone.html#get_bone_color", "title": "get_bone_color", "text": "<p>Get the color of a bone. <pre><code>qtm.data.object.bone.get_bone_color(bone_id)\n</code></pre></p> <p>Parameters</p> <p><code>bone_id</code> <code>integer</code> The identifier of the bone.</p> <p>Returns</p> <p><code>integer</code> The color of the bone (in 0xbbggrr format).</p>"}, {"location": "qtm.data.object.bone.html#set_bone_color", "title": "set_bone_color", "text": "<p>Set the color of a bone. <pre><code>qtm.data.object.bone.set_bone_color(bone_id, color)\n</code></pre></p> <p>Parameters</p> <p><code>bone_id</code> <code>integer</code> The identifier of the bone.</p> <p><code>color</code> <code>integer</code> The color of the bone (in 0xbbggrr format, see 'qtm.utilities.color' module).</p>"}, {"location": "qtm.data.object.bone.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.data.object.bone.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.object.event.html", "title": "qtm.data.object.event", "text": "<p>Access and modify events.</p> <p>Events consist of a label, a time (in seconds) and an optional color (in 0xbbggrr format, see 'qtm.utilities.color' module). If the latter is null, red (0x0000ff) will be used.</p>"}, {"location": "qtm.data.object.event.html#add_event", "title": "add_event", "text": "<p>Add an event. <pre><code>qtm.data.object.event.add_event(event)\n</code></pre></p> <p>Parameters</p> <p><code>event</code> <code>{\"label\": string, \"time\": float, \"color\": integer?}</code> The event to add.</p>"}, {"location": "qtm.data.object.event.html#get_event_count", "title": "get_event_count", "text": "<p>Get the total number of events. <pre><code>qtm.data.object.event.get_event_count()\n</code></pre></p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.event.html#get_events", "title": "get_events", "text": "<p>Get all events. <pre><code>qtm.data.object.event.get_events()\n</code></pre></p> <p>Returns</p> <p><code>[{\"label\": string, \"time\": float, \"color\": integer?}]</code> </p>"}, {"location": "qtm.data.object.event.html#clear_events", "title": "clear_events", "text": "<p>Delete all events. <pre><code>qtm.data.object.event.clear_events()\n</code></pre></p>"}, {"location": "qtm.data.object.event.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.data.object.event.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.object.skeleton.html", "title": "qtm.data.object.skeleton", "text": "<p>Access skeletons.</p>"}, {"location": "qtm.data.object.skeleton.html#get_skeleton_id", "title": "get_skeleton_id", "text": "<p>Get a skeleton identifier by index. <pre><code>qtm.data.object.skeleton.get_skeleton_id(index)\n</code></pre></p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the skeleton.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_skeleton_ids", "title": "get_skeleton_ids", "text": "<p>Get all skeleton identifiers. <pre><code>qtm.data.object.skeleton.get_skeleton_ids()\n</code></pre></p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_skeleton_count", "title": "get_skeleton_count", "text": "<p>Get the number of skeletons. <pre><code>qtm.data.object.skeleton.get_skeleton_count()\n</code></pre></p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_skeleton_name", "title": "get_skeleton_name", "text": "<p>Get the name of a skeleton. <pre><code>qtm.data.object.skeleton.get_skeleton_name(skeleton_id)\n</code></pre></p> <p>Parameters</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_skeleton_scale", "title": "get_skeleton_scale", "text": "<p>Get the scale of a skeleton. <pre><code>qtm.data.object.skeleton.get_skeleton_scale(skeleton_id)\n</code></pre></p> <p>The scale represents the size of the skeleton relative to e.g. an avatar. It is used when exporting and streaming such that the scale of the output is always 1.0.</p> <p>Parameters</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_skeleton_root_id", "title": "get_skeleton_root_id", "text": "<p>Get the root segment identifier in a skeleton. <pre><code>qtm.data.object.skeleton.get_skeleton_root_id(skeleton_id)\n</code></pre></p> <p>Parameters</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_id", "title": "get_segment_id", "text": "<p>Get a segment identifier in a skeleton by index. <pre><code>qtm.data.object.skeleton.get_segment_id(skeleton_id, index)\n</code></pre></p> <p>Parameters</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p><code>index</code> <code>integer</code> The segment index.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_ids", "title": "get_segment_ids", "text": "<p>Get all segment identifiers in a skeleton. <pre><code>qtm.data.object.skeleton.get_segment_ids(skeleton_id)\n</code></pre></p> <p>Parameters</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_count", "title": "get_segment_count", "text": "<p>Get the number of segments in a skeleton. <pre><code>qtm.data.object.skeleton.get_segment_count(skeleton_id)\n</code></pre></p> <p>Parameters</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_name", "title": "get_segment_name", "text": "<p>Get the name of a segment in a skeleton. <pre><code>qtm.data.object.skeleton.get_segment_name(segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_solver", "title": "get_segment_solver", "text": "<p>Get the solver of a segment in a skeleton. <pre><code>qtm.data.object.skeleton.get_segment_solver(segment_id)\n</code></pre></p> <p>A skeleton can have multiple solvers (e.g. the hands may be solved separately from the rest of the body). In this case, the solving will be done in a hierarchical manner, starting with the root (which must have a solver). Descendant body parts are then solved locally in the coordinate systems of their parent segments.</p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>\"none\"|\"global_optimization\"?</code> The segment solver (or null, if the segment is solved together with its ancestors).</p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_transform", "title": "get_segment_transform", "text": "<p>Get the transform of a segment in a skeleton. <pre><code>qtm.data.object.skeleton.get_segment_transform(segment_id)\n</code></pre></p> <p>The transform represents the calibrated pose of the skeleton, and is used as the initial solution when solving.</p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>mat4x4f</code> The segment transform (in local coordinates with translation in millimeters).</p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_default_transform", "title": "get_segment_default_transform", "text": "<p>Get the default transform of a segment in a skeleton. <pre><code>qtm.data.object.skeleton.get_segment_default_transform(segment_id)\n</code></pre></p> <p>The default transform brings skeletons with different zero poses (the pose where all segment rotations are zero) to the same default pose (e.g. a t-pose). This is mainly used for retargeting.</p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>mat4x4f</code> The segment default transform (in local coordinates with translation in millimeters).</p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_degrees_of_freedom", "title": "get_segment_degrees_of_freedom", "text": "<p>Get the degrees of freedom of a segment in a skeleton. <pre><code>qtm.data.object.skeleton.get_segment_degrees_of_freedom(segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>{\"rotation_x\"|\"rotation_y\"|\"rotation_z\"|\"translation_x\"|\"translation_y\"|\"translation_z\": {\"constraint\": {\"lower_bound\": float, \"upper_bound\": float}?, \"couplings\": [{\"segment\": string, \"degree_of_freedom\": \"rotation_x\"|\"rotation_y\"|\"rotation_z\"|\"translation_x\"|\"translation_y\"|\"translation_z\", \"coefficient\": float}], \"goal\": {\"value\": float, \"weight\": float}?}}</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_endpoint", "title": "get_segment_endpoint", "text": "<p>Get the endpoint of a segment in a skeleton. <pre><code>qtm.data.object.skeleton.get_segment_endpoint(segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>vec3f?</code> The segment endpoint (in local coordinates and millimeters). Or null, if the segment has children.</p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_markers", "title": "get_segment_markers", "text": "<p>Get the markers of a segment in a skeleton. <pre><code>qtm.data.object.skeleton.get_segment_markers(segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>[{\"name\": string, \"position\": vec3f, \"weight\": float}]</code> The segment markers (with positions in local coordinates and millimeters).</p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_rigid_bodies", "title": "get_segment_rigid_bodies", "text": "<p>Get the rigid bodies of a segment in a skeleton. <pre><code>qtm.data.object.skeleton.get_segment_rigid_bodies(segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>[{\"name\": string, \"transform\": mat4x4f, \"weight\": float}]</code> The segment rigid bodies (with transforms in local coordinates and translations in millimeters).</p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_skeleton_id", "title": "get_segment_skeleton_id", "text": "<p>Get the skeleton identifier of a segment in a skeleton. <pre><code>qtm.data.object.skeleton.get_segment_skeleton_id(segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_parent_id", "title": "get_segment_parent_id", "text": "<p>Get the parent segment identifier of a segment in a skeleton. <pre><code>qtm.data.object.skeleton.get_segment_parent_id(segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>integer?</code> The parent segment identifier (or null, if the segment is the root).</p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_child_id", "title": "get_segment_child_id", "text": "<p>Get a child segment identifier of a segment in a skeleton by index. <pre><code>qtm.data.object.skeleton.get_segment_child_id(segment_id, index)\n</code></pre></p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>index</code> <code>integer</code> The child index.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_child_ids", "title": "get_segment_child_ids", "text": "<p>Get all child segment identifiers of a segment in a skeleton. <pre><code>qtm.data.object.skeleton.get_segment_child_ids(segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_child_count", "title": "get_segment_child_count", "text": "<p>Get the number of child segments of a segment in a skeleton. <pre><code>qtm.data.object.skeleton.get_segment_child_count(segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.skeleton.html#find_skeleton", "title": "find_skeleton", "text": "<p>Find a skeleton by name. <pre><code>qtm.data.object.skeleton.find_skeleton(name)\n</code></pre></p> <p>Parameters</p> <p><code>name</code> <code>string</code> The name of the skeleton.</p> <p>Returns</p> <p><code>integer?</code> The identifier of the found skeleton (or null, if no skeleton was found).</p>"}, {"location": "qtm.data.object.skeleton.html#find_segment", "title": "find_segment", "text": "<p>Find a segment in a skeleton by name. <pre><code>qtm.data.object.skeleton.find_segment(skeleton_id, name)\n</code></pre></p> <p>Parameters</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p><code>name</code> <code>string</code> The name of the segment.</p> <p>Returns</p> <p><code>integer?</code> The identifier of the found segment (or null, if no segment was found).</p>"}, {"location": "qtm.data.object.skeleton.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.data.object.skeleton.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.object.trajectory.html", "title": "qtm.data.object.trajectory", "text": "<p>Access and modify trajectories.</p>"}, {"location": "qtm.data.object.trajectory.html#add_trajectory", "title": "add_trajectory", "text": "<p>Add a trajectory. <pre><code>qtm.data.object.trajectory.add_trajectory(label?)\n</code></pre></p> <p>Parameters</p> <p><code>label</code> <code>string?</code> The label of the trajectory (if null, the trajectory will be unidentified).</p> <p>Returns</p> <p><code>integer</code> The identifier of the added trajectory.</p>"}, {"location": "qtm.data.object.trajectory.html#delete_trajectory", "title": "delete_trajectory", "text": "<p>Delete a trajectory. <pre><code>qtm.data.object.trajectory.delete_trajectory(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p>"}, {"location": "qtm.data.object.trajectory.html#smooth_trajectory", "title": "smooth_trajectory", "text": "<p>Smooth a trajectory. <pre><code>qtm.data.object.trajectory.smooth_trajectory(id, algorithm?, range?, settings?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p><code>algorithm</code> <code>\"moving_average\"|\"butterworth\"?</code> The smooth algorithm to use (if null, moving average will be used).</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The sample index range to smooth (if null, entire trajectory will be smoothed).</p> <p><code>settings</code> <code>{\"window_size\": integer?, \"filter_order\": integer?, \"cutoff_frequency\": float?}?</code> The smooth settings to use (if null, or if any individual setting is null, the following default values will be used: {window_size: 5, filter_order: 4, cutoff_frequency: 10.0}).</p>"}, {"location": "qtm.data.object.trajectory.html#fill_trajectory", "title": "fill_trajectory", "text": "<p>Fill a trajectory. <pre><code>qtm.data.object.trajectory.fill_trajectory(id, algorithm?, range?, settings?)\n</code></pre></p> <p>All samples within the given range will be overwritten. To fill gaps only, use the ranges returned by 'qtm.data.series._3d.get_gap_ranges'.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p><code>algorithm</code> <code>\"static\"|\"linear\"|\"polynomial\"|\"relational\"|\"virtual\"|\"kinematic\"?</code> The fill algorithm to use (if null, polynomial will be used).</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The sample index range to fill (if null, the entire measurement range will be filled).</p> <p><code>settings</code> <code>{\"origin\": integer?, \"line\": integer?, \"plane\": integer?, \"offset\": vec3f?, \"is_rigid_body\": bool?, \"is_relative_offset\": bool?}?</code> The fill settings to use (if null, or if any individual setting is null, the following default values will be used: {offset: [0.0, 0.0, 0.0], is_rigid_body: false, is_relative_offset: false}).</p>"}, {"location": "qtm.data.object.trajectory.html#find_trajectory", "title": "find_trajectory", "text": "<p>Find a trajectory by label. <pre><code>qtm.data.object.trajectory.find_trajectory(label)\n</code></pre></p> <p>Parameters</p> <p><code>label</code> <code>string</code> The label of the trajectory.</p> <p>Returns</p> <p><code>integer?</code> The identifier of the found trajectory (or null, if no trajectory was found).</p>"}, {"location": "qtm.data.object.trajectory.html#clear_trajectories", "title": "clear_trajectories", "text": "<p>Delete all trajectories. <pre><code>qtm.data.object.trajectory.clear_trajectories()\n</code></pre></p>"}, {"location": "qtm.data.object.trajectory.html#get_trajectory_id", "title": "get_trajectory_id", "text": "<p>Get a trajectory identifier by index. <pre><code>qtm.data.object.trajectory.get_trajectory_id(index)\n</code></pre></p> <p>This is equivalent to calling qtm.data.series._3d.get_series_id.</p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the trajectory.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.trajectory.html#get_trajectory_ids", "title": "get_trajectory_ids", "text": "<p>Get all trajectory identifiers. <pre><code>qtm.data.object.trajectory.get_trajectory_ids()\n</code></pre></p> <p>This is equivalent to calling qtm.data.series._3d.get_series_ids.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.object.trajectory.html#get_trajectory_count", "title": "get_trajectory_count", "text": "<p>Get the number of trajectories. <pre><code>qtm.data.object.trajectory.get_trajectory_count()\n</code></pre></p> <p>This is equivalent to calling qtm.data.series._3d.get_series_count.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.trajectory.html#get_part", "title": "get_part", "text": "<p>Get a part of a trajectory by index. <pre><code>qtm.data.object.trajectory.get_part(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p><code>index</code> <code>integer</code> The index of the part.</p> <p>Returns</p> <p><code>{\"range\": {\"start\": integer, \"end\": integer}, \"type\": string}</code> </p>"}, {"location": "qtm.data.object.trajectory.html#get_parts", "title": "get_parts", "text": "<p>Get all parts of a trajectory. <pre><code>qtm.data.object.trajectory.get_parts(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p>Returns</p> <p><code>[{\"range\": {\"start\": integer, \"end\": integer}, \"type\": string}]</code> </p>"}, {"location": "qtm.data.object.trajectory.html#get_part_count", "title": "get_part_count", "text": "<p>Get the number of parts of a trajectory. <pre><code>qtm.data.object.trajectory.get_part_count(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.trajectory.html#delete_parts", "title": "delete_parts", "text": "<p>Delete parts of a trajectory. <pre><code>qtm.data.object.trajectory.delete_parts(id, part_indices?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p><code>part_indices</code> <code>[integer]?</code> The indices of the parts to delete (if null, all parts will be deleted).</p>"}, {"location": "qtm.data.object.trajectory.html#move_parts", "title": "move_parts", "text": "<p>Move parts from one trajectory to another. <pre><code>qtm.data.object.trajectory.move_parts(id_from, id_to, part_indices?)\n</code></pre></p> <p>Parameters</p> <p><code>id_from</code> <code>integer</code> The identifier of the trajectory to move from.</p> <p><code>id_to</code> <code>integer</code> The identifier of the trajectory to move to.</p> <p><code>part_indices</code> <code>[integer]?</code> The indices of the parts to move (if null, all parts will be moved).</p>"}, {"location": "qtm.data.object.trajectory.html#swap_parts", "title": "swap_parts", "text": "<p>Swap parts between two trajectories. <pre><code>qtm.data.object.trajectory.swap_parts(id_1, id_2, part_indices_1?, part_indices_2?)\n</code></pre></p> <p>Parameters</p> <p><code>id_1</code> <code>integer</code> The identifier of the first trajectory.</p> <p><code>id_2</code> <code>integer</code> The identifier of the second trajectory.</p> <p><code>part_indices_1</code> <code>[integer]?</code> The indices of the parts to swap from the first trajectory (if null, all parts will be swapped).</p> <p><code>part_indices_2</code> <code>[integer]?</code> The indices of the parts to swap from the second trajectory (if null, all parts will be swapped).</p>"}, {"location": "qtm.data.object.trajectory.html#split_part", "title": "split_part", "text": "<p>Split a part of a trajectory. <pre><code>qtm.data.object.trajectory.split_part(id, sample_index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p><code>sample_index</code> <code>integer</code> The index of the last sample before the split.</p>"}, {"location": "qtm.data.object.trajectory.html#get_label", "title": "get_label", "text": "<p>Get the label of a trajectory. <pre><code>qtm.data.object.trajectory.get_label(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p>Returns</p> <p><code>string?</code> The label of the trajectory (or null, if the trajectory is unidentified).</p>"}, {"location": "qtm.data.object.trajectory.html#set_label", "title": "set_label", "text": "<p>Set the label of a trajectory. <pre><code>qtm.data.object.trajectory.set_label(id, label?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p><code>label</code> <code>string?</code> The label of the trajectory (if null, the trajectory will become unidentified).</p>"}, {"location": "qtm.data.object.trajectory.html#get_color", "title": "get_color", "text": "<p>Get the color of a trajectory. <pre><code>qtm.data.object.trajectory.get_color(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p>Returns</p> <p><code>integer</code> The color of the trajectory (in 0xbbggrr format).</p>"}, {"location": "qtm.data.object.trajectory.html#set_color", "title": "set_color", "text": "<p>Set the color of a trajectory. <pre><code>qtm.data.object.trajectory.set_color(id, color)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p><code>color</code> <code>integer</code> The color of the trajectory (in 0xbbggrr format, see 'qtm.utilities.color' module).</p>"}, {"location": "qtm.data.object.trajectory.html#get_is_discarded", "title": "get_is_discarded", "text": "<p>Get whether a trajectory is discarded. <pre><code>qtm.data.object.trajectory.get_is_discarded(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.data.object.trajectory.html#set_is_discarded", "title": "set_is_discarded", "text": "<p>Set whether a trajectory is discarded. <pre><code>qtm.data.object.trajectory.set_is_discarded(id, is_discarded)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p><code>is_discarded</code> <code>bool</code> True if the trajectory is discarded, otherwise false.</p>"}, {"location": "qtm.data.object.trajectory.html#get_active_marker_id", "title": "get_active_marker_id", "text": "<p>Get the (sequence coded) active marker identifier of a trajectory. <pre><code>qtm.data.object.trajectory.get_active_marker_id(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p>Returns</p> <p><code>integer?</code> The active marker identifier (or null, if the marker is passive or actively unidentified).</p>"}, {"location": "qtm.data.object.trajectory.html#get_rigid_body_id", "title": "get_rigid_body_id", "text": "<p>Get the rigid body identifier of a trajectory. <pre><code>qtm.data.object.trajectory.get_rigid_body_id(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p>Returns</p> <p><code>integer?</code> The identifier of the rigid body (or null, if the trajectory isn't part of a rigid body).</p>"}, {"location": "qtm.data.object.trajectory.html#get_skeleton_segment_id", "title": "get_skeleton_segment_id", "text": "<p>Get the skeleton segment identifier of a trajectory. <pre><code>qtm.data.object.trajectory.get_skeleton_segment_id(id)\n</code></pre></p> <p>If the trajectory is attached to multiple segments, only the identifier of the first found will be returned.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p>Returns</p> <p><code>integer?</code> The identifier of the skeleton segment (or null, if the trajectory isn't part of a skeleton).</p>"}, {"location": "qtm.data.object.trajectory.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.data.object.trajectory.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series._2d.html", "title": "qtm.data.series._2d", "text": "<p>Access 2d data series.</p>"}, {"location": "qtm.data.series._2d.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index. <pre><code>qtm.data.series._2d.get_series_id(index)\n</code></pre></p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._2d.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers. <pre><code>qtm.data.series._2d.get_series_ids()\n</code></pre></p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series._2d.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series. <pre><code>qtm.data.series._2d.get_series_count()\n</code></pre></p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._2d.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series. <pre><code>qtm.data.series._2d.get_sample_count(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._2d.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last). <pre><code>qtm.data.series._2d.get_sample_range(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}?</code> The total sample index range (or null, if no samples existed).</p>"}, {"location": "qtm.data.series._2d.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series. <pre><code>qtm.data.series._2d.get_sample_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series._2d.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series. <pre><code>qtm.data.series._2d.get_gap_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series._2d.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series. <pre><code>qtm.data.series._2d.get_sample(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>[{\"position\": vec2i, \"size\": vec2i}]?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series._2d.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series. <pre><code>qtm.data.series._2d.get_samples(id, range?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[[{\"position\": vec2i, \"size\": vec2i}]?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series._2d.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series. <pre><code>qtm.data.series._2d.get_frequency(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series._2d.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series. <pre><code>qtm.data.series._2d.get_offset(id)\n</code></pre></p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series._2d.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time. <pre><code>qtm.data.series._2d.get_sample_index_at_time(id, time)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series._2d.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series. <pre><code>qtm.data.series._2d.get_time_at_sample_index(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series._2d.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.data.series._2d.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series._3d.html", "title": "qtm.data.series._3d", "text": "<p>Access and modify 3d data series.</p>"}, {"location": "qtm.data.series._3d.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index. <pre><code>qtm.data.series._3d.get_series_id(index)\n</code></pre></p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._3d.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers. <pre><code>qtm.data.series._3d.get_series_ids()\n</code></pre></p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series._3d.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series. <pre><code>qtm.data.series._3d.get_series_count()\n</code></pre></p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._3d.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series. <pre><code>qtm.data.series._3d.get_sample_count(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._3d.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last). <pre><code>qtm.data.series._3d.get_sample_range(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}?</code> The total sample index range (or null, if no samples existed).</p>"}, {"location": "qtm.data.series._3d.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series. <pre><code>qtm.data.series._3d.get_sample_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series._3d.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series. <pre><code>qtm.data.series._3d.get_gap_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series._3d.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series. <pre><code>qtm.data.series._3d.get_sample(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>{\"position\": vec3f, \"residual\": float}?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series._3d.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series. <pre><code>qtm.data.series._3d.get_samples(id, range?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[{\"position\": vec3f, \"residual\": float}?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series._3d.html#set_sample", "title": "set_sample", "text": "<p>Set a single sample in a data series. <pre><code>qtm.data.series._3d.set_sample(id, index, sample?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p><code>sample</code> <code>{\"position\": vec3f, \"residual\": float}?</code> The sample (if null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series._3d.html#set_samples", "title": "set_samples", "text": "<p>Set a range of samples in a data series. <pre><code>qtm.data.series._3d.set_samples(id, range, samples)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The index range of the samples.</p> <p><code>samples</code> <code>[{\"position\": vec3f, \"residual\": float}?]</code> The samples (if a sample is null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series._3d.html#delete_sample", "title": "delete_sample", "text": "<p>Delete a single sample in a data series. <pre><code>qtm.data.series._3d.delete_sample(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series._3d.html#delete_samples", "title": "delete_samples", "text": "<p>Delete a range of samples in a data series. <pre><code>qtm.data.series._3d.delete_samples(id, range?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be deleted).</p>"}, {"location": "qtm.data.series._3d.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series. <pre><code>qtm.data.series._3d.get_frequency(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series._3d.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series. <pre><code>qtm.data.series._3d.get_offset(id)\n</code></pre></p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series._3d.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time. <pre><code>qtm.data.series._3d.get_sample_index_at_time(id, time)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series._3d.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series. <pre><code>qtm.data.series._3d.get_time_at_sample_index(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series._3d.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.data.series._3d.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series._6d.html", "title": "qtm.data.series._6d", "text": "<p>Access and modify 6dof data series.</p>"}, {"location": "qtm.data.series._6d.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index. <pre><code>qtm.data.series._6d.get_series_id(index)\n</code></pre></p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._6d.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers. <pre><code>qtm.data.series._6d.get_series_ids()\n</code></pre></p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series._6d.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series. <pre><code>qtm.data.series._6d.get_series_count()\n</code></pre></p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._6d.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series. <pre><code>qtm.data.series._6d.get_sample_count(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._6d.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last). <pre><code>qtm.data.series._6d.get_sample_range(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}?</code> The total sample index range (or null, if no samples existed).</p>"}, {"location": "qtm.data.series._6d.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series. <pre><code>qtm.data.series._6d.get_sample_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series._6d.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series. <pre><code>qtm.data.series._6d.get_gap_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series._6d.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series. <pre><code>qtm.data.series._6d.get_sample(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>{\"transform\": mat4x4f, \"residual\": float}?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series._6d.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series. <pre><code>qtm.data.series._6d.get_samples(id, range?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[{\"transform\": mat4x4f, \"residual\": float}?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series._6d.html#set_sample", "title": "set_sample", "text": "<p>Set a single sample in a data series. <pre><code>qtm.data.series._6d.set_sample(id, index, sample?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p><code>sample</code> <code>{\"transform\": mat4x4f, \"residual\": float}?</code> The sample (if null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series._6d.html#set_samples", "title": "set_samples", "text": "<p>Set a range of samples in a data series. <pre><code>qtm.data.series._6d.set_samples(id, range, samples)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The index range of the samples.</p> <p><code>samples</code> <code>[{\"transform\": mat4x4f, \"residual\": float}?]</code> The samples (if a sample is null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series._6d.html#delete_sample", "title": "delete_sample", "text": "<p>Delete a single sample in a data series. <pre><code>qtm.data.series._6d.delete_sample(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series._6d.html#delete_samples", "title": "delete_samples", "text": "<p>Delete a range of samples in a data series. <pre><code>qtm.data.series._6d.delete_samples(id, range?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be deleted).</p>"}, {"location": "qtm.data.series._6d.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series. <pre><code>qtm.data.series._6d.get_frequency(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series._6d.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series. <pre><code>qtm.data.series._6d.get_offset(id)\n</code></pre></p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series._6d.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time. <pre><code>qtm.data.series._6d.get_sample_index_at_time(id, time)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series._6d.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series. <pre><code>qtm.data.series._6d.get_time_at_sample_index(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series._6d.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.data.series._6d.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series.analog.html", "title": "qtm.data.series.analog", "text": "<p>Access analog data series.</p>"}, {"location": "qtm.data.series.analog.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index. <pre><code>qtm.data.series.analog.get_series_id(index)\n</code></pre></p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.analog.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers. <pre><code>qtm.data.series.analog.get_series_ids()\n</code></pre></p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series.analog.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series. <pre><code>qtm.data.series.analog.get_series_count()\n</code></pre></p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.analog.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series. <pre><code>qtm.data.series.analog.get_sample_count(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.analog.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last). <pre><code>qtm.data.series.analog.get_sample_range(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}?</code> The total sample index range (or null, if no samples existed).</p>"}, {"location": "qtm.data.series.analog.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series. <pre><code>qtm.data.series.analog.get_sample_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.analog.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series. <pre><code>qtm.data.series.analog.get_gap_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.analog.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series. <pre><code>qtm.data.series.analog.get_sample(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series.analog.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series. <pre><code>qtm.data.series.analog.get_samples(id, range?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[float?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series.analog.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series. <pre><code>qtm.data.series.analog.get_frequency(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series.analog.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series. <pre><code>qtm.data.series.analog.get_offset(id)\n</code></pre></p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series.analog.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time. <pre><code>qtm.data.series.analog.get_sample_index_at_time(id, time)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.analog.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series. <pre><code>qtm.data.series.analog.get_time_at_sample_index(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series.analog.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.data.series.analog.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series.force.html", "title": "qtm.data.series.force", "text": "<p>Access force data series.</p>"}, {"location": "qtm.data.series.force.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index. <pre><code>qtm.data.series.force.get_series_id(index)\n</code></pre></p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.force.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers. <pre><code>qtm.data.series.force.get_series_ids()\n</code></pre></p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series.force.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series. <pre><code>qtm.data.series.force.get_series_count()\n</code></pre></p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.force.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series. <pre><code>qtm.data.series.force.get_sample_count(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.force.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last). <pre><code>qtm.data.series.force.get_sample_range(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}?</code> The total sample index range (or null, if no samples existed).</p>"}, {"location": "qtm.data.series.force.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series. <pre><code>qtm.data.series.force.get_sample_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.force.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series. <pre><code>qtm.data.series.force.get_gap_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.force.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series. <pre><code>qtm.data.series.force.get_sample(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>{\"force\": vec3f, \"moment\": vec3f, \"center_of_pressure\": vec3f}?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series.force.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series. <pre><code>qtm.data.series.force.get_samples(id, range?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[{\"force\": vec3f, \"moment\": vec3f, \"center_of_pressure\": vec3f}?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series.force.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series. <pre><code>qtm.data.series.force.get_frequency(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series.force.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series. <pre><code>qtm.data.series.force.get_offset(id)\n</code></pre></p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series.force.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time. <pre><code>qtm.data.series.force.get_sample_index_at_time(id, time)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.force.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series. <pre><code>qtm.data.series.force.get_time_at_sample_index(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series.force.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.data.series.force.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series.gaze.html", "title": "qtm.data.series.gaze", "text": "<p>Access gaze data series.</p>"}, {"location": "qtm.data.series.gaze.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index. <pre><code>qtm.data.series.gaze.get_series_id(index)\n</code></pre></p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.gaze.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers. <pre><code>qtm.data.series.gaze.get_series_ids()\n</code></pre></p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series.gaze.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series. <pre><code>qtm.data.series.gaze.get_series_count()\n</code></pre></p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.gaze.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series. <pre><code>qtm.data.series.gaze.get_sample_count(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.gaze.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last). <pre><code>qtm.data.series.gaze.get_sample_range(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}?</code> The total sample index range (or null, if no samples existed).</p>"}, {"location": "qtm.data.series.gaze.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series. <pre><code>qtm.data.series.gaze.get_sample_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.gaze.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series. <pre><code>qtm.data.series.gaze.get_gap_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.gaze.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series. <pre><code>qtm.data.series.gaze.get_sample(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>{\"position\": vec3f, \"direction\": vec3f}?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series.gaze.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series. <pre><code>qtm.data.series.gaze.get_samples(id, range?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[{\"position\": vec3f, \"direction\": vec3f}?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series.gaze.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series. <pre><code>qtm.data.series.gaze.get_frequency(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series.gaze.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series. <pre><code>qtm.data.series.gaze.get_offset(id)\n</code></pre></p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series.gaze.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time. <pre><code>qtm.data.series.gaze.get_sample_index_at_time(id, time)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.gaze.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series. <pre><code>qtm.data.series.gaze.get_time_at_sample_index(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series.gaze.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.data.series.gaze.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series.skeleton.html", "title": "qtm.data.series.skeleton", "text": "<p>Access and modify skeleton data series.</p>"}, {"location": "qtm.data.series.skeleton.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index. <pre><code>qtm.data.series.skeleton.get_series_id(index)\n</code></pre></p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.skeleton.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers. <pre><code>qtm.data.series.skeleton.get_series_ids()\n</code></pre></p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series.skeleton.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series. <pre><code>qtm.data.series.skeleton.get_series_count()\n</code></pre></p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.skeleton.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series. <pre><code>qtm.data.series.skeleton.get_sample_count(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.skeleton.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last). <pre><code>qtm.data.series.skeleton.get_sample_range(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}?</code> The total sample index range (or null, if no samples existed).</p>"}, {"location": "qtm.data.series.skeleton.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series. <pre><code>qtm.data.series.skeleton.get_sample_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.skeleton.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series. <pre><code>qtm.data.series.skeleton.get_gap_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.skeleton.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series. <pre><code>qtm.data.series.skeleton.get_sample(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>mat4x4f?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series.skeleton.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series. <pre><code>qtm.data.series.skeleton.get_samples(id, range?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[mat4x4f?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series.skeleton.html#set_sample", "title": "set_sample", "text": "<p>Set a single sample in a data series. <pre><code>qtm.data.series.skeleton.set_sample(id, index, sample?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p><code>sample</code> <code>mat4x4f?</code> The sample (if null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series.skeleton.html#set_samples", "title": "set_samples", "text": "<p>Set a range of samples in a data series. <pre><code>qtm.data.series.skeleton.set_samples(id, range, samples)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The index range of the samples.</p> <p><code>samples</code> <code>[mat4x4f?]</code> The samples (if a sample is null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series.skeleton.html#delete_sample", "title": "delete_sample", "text": "<p>Delete a single sample in a data series. <pre><code>qtm.data.series.skeleton.delete_sample(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.skeleton.html#delete_samples", "title": "delete_samples", "text": "<p>Delete a range of samples in a data series. <pre><code>qtm.data.series.skeleton.delete_samples(id, range?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be deleted).</p>"}, {"location": "qtm.data.series.skeleton.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series. <pre><code>qtm.data.series.skeleton.get_frequency(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series.skeleton.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series. <pre><code>qtm.data.series.skeleton.get_offset(id)\n</code></pre></p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series.skeleton.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time. <pre><code>qtm.data.series.skeleton.get_sample_index_at_time(id, time)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.skeleton.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series. <pre><code>qtm.data.series.skeleton.get_time_at_sample_index(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series.skeleton.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.data.series.skeleton.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series.time.irig.html", "title": "qtm.data.series.time.irig", "text": "<p>Access and modify irig (inter-range instrumentation group) data series.</p>"}, {"location": "qtm.data.series.time.irig.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index. <pre><code>qtm.data.series.time.irig.get_series_id(index)\n</code></pre></p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.irig.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers. <pre><code>qtm.data.series.time.irig.get_series_ids()\n</code></pre></p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series.time.irig.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series. <pre><code>qtm.data.series.time.irig.get_series_count()\n</code></pre></p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.irig.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series. <pre><code>qtm.data.series.time.irig.get_sample_count(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.irig.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last). <pre><code>qtm.data.series.time.irig.get_sample_range(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}?</code> The total sample index range (or null, if no samples existed).</p>"}, {"location": "qtm.data.series.time.irig.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series. <pre><code>qtm.data.series.time.irig.get_sample_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.time.irig.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series. <pre><code>qtm.data.series.time.irig.get_gap_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.time.irig.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series. <pre><code>qtm.data.series.time.irig.get_sample(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>{\"year\": integer, \"day\": integer, \"hour\": integer, \"minute\": integer, \"second\": integer, \"tenth\": integer}?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series.time.irig.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series. <pre><code>qtm.data.series.time.irig.get_samples(id, range?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[{\"year\": integer, \"day\": integer, \"hour\": integer, \"minute\": integer, \"second\": integer, \"tenth\": integer}?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series.time.irig.html#set_sample", "title": "set_sample", "text": "<p>Set a single sample in a data series. <pre><code>qtm.data.series.time.irig.set_sample(id, index, sample?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p><code>sample</code> <code>{\"year\": integer, \"day\": integer, \"hour\": integer, \"minute\": integer, \"second\": integer, \"tenth\": integer}?</code> The sample (if null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series.time.irig.html#set_samples", "title": "set_samples", "text": "<p>Set a range of samples in a data series. <pre><code>qtm.data.series.time.irig.set_samples(id, range, samples)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The index range of the samples.</p> <p><code>samples</code> <code>[{\"year\": integer, \"day\": integer, \"hour\": integer, \"minute\": integer, \"second\": integer, \"tenth\": integer}?]</code> The samples (if a sample is null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series.time.irig.html#delete_sample", "title": "delete_sample", "text": "<p>Delete a single sample in a data series. <pre><code>qtm.data.series.time.irig.delete_sample(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.time.irig.html#delete_samples", "title": "delete_samples", "text": "<p>Delete a range of samples in a data series. <pre><code>qtm.data.series.time.irig.delete_samples(id, range?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be deleted).</p>"}, {"location": "qtm.data.series.time.irig.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series. <pre><code>qtm.data.series.time.irig.get_frequency(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series.time.irig.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series. <pre><code>qtm.data.series.time.irig.get_offset(id)\n</code></pre></p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series.time.irig.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time. <pre><code>qtm.data.series.time.irig.get_sample_index_at_time(id, time)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.time.irig.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series. <pre><code>qtm.data.series.time.irig.get_time_at_sample_index(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series.time.irig.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.data.series.time.irig.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series.time.ptp.html", "title": "qtm.data.series.time.ptp", "text": "<p>Access and modify ptp (precision time protocol) data series.</p>"}, {"location": "qtm.data.series.time.ptp.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index. <pre><code>qtm.data.series.time.ptp.get_series_id(index)\n</code></pre></p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.ptp.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers. <pre><code>qtm.data.series.time.ptp.get_series_ids()\n</code></pre></p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series.time.ptp.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series. <pre><code>qtm.data.series.time.ptp.get_series_count()\n</code></pre></p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.ptp.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series. <pre><code>qtm.data.series.time.ptp.get_sample_count(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.ptp.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last). <pre><code>qtm.data.series.time.ptp.get_sample_range(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}?</code> The total sample index range (or null, if no samples existed).</p>"}, {"location": "qtm.data.series.time.ptp.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series. <pre><code>qtm.data.series.time.ptp.get_sample_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.time.ptp.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series. <pre><code>qtm.data.series.time.ptp.get_gap_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.time.ptp.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series. <pre><code>qtm.data.series.time.ptp.get_sample(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>{\"second\": integer, \"nanosecond\": integer}?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series.time.ptp.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series. <pre><code>qtm.data.series.time.ptp.get_samples(id, range?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[{\"second\": integer, \"nanosecond\": integer}?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series.time.ptp.html#set_sample", "title": "set_sample", "text": "<p>Set a single sample in a data series. <pre><code>qtm.data.series.time.ptp.set_sample(id, index, sample?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p><code>sample</code> <code>{\"second\": integer, \"nanosecond\": integer}?</code> The sample (if null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series.time.ptp.html#set_samples", "title": "set_samples", "text": "<p>Set a range of samples in a data series. <pre><code>qtm.data.series.time.ptp.set_samples(id, range, samples)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The index range of the samples.</p> <p><code>samples</code> <code>[{\"second\": integer, \"nanosecond\": integer}?]</code> The samples (if a sample is null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series.time.ptp.html#delete_sample", "title": "delete_sample", "text": "<p>Delete a single sample in a data series. <pre><code>qtm.data.series.time.ptp.delete_sample(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.time.ptp.html#delete_samples", "title": "delete_samples", "text": "<p>Delete a range of samples in a data series. <pre><code>qtm.data.series.time.ptp.delete_samples(id, range?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be deleted).</p>"}, {"location": "qtm.data.series.time.ptp.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series. <pre><code>qtm.data.series.time.ptp.get_frequency(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series.time.ptp.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series. <pre><code>qtm.data.series.time.ptp.get_offset(id)\n</code></pre></p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series.time.ptp.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time. <pre><code>qtm.data.series.time.ptp.get_sample_index_at_time(id, time)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.time.ptp.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series. <pre><code>qtm.data.series.time.ptp.get_time_at_sample_index(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series.time.ptp.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.data.series.time.ptp.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series.time.smpte.html", "title": "qtm.data.series.time.smpte", "text": "<p>Access and modify smpte (society of motion picture and television engineers) data series.</p>"}, {"location": "qtm.data.series.time.smpte.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index. <pre><code>qtm.data.series.time.smpte.get_series_id(index)\n</code></pre></p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.smpte.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers. <pre><code>qtm.data.series.time.smpte.get_series_ids()\n</code></pre></p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series.time.smpte.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series. <pre><code>qtm.data.series.time.smpte.get_series_count()\n</code></pre></p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.smpte.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series. <pre><code>qtm.data.series.time.smpte.get_sample_count(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.smpte.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last). <pre><code>qtm.data.series.time.smpte.get_sample_range(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}?</code> The total sample index range (or null, if no samples existed).</p>"}, {"location": "qtm.data.series.time.smpte.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series. <pre><code>qtm.data.series.time.smpte.get_sample_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.time.smpte.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series. <pre><code>qtm.data.series.time.smpte.get_gap_ranges(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.time.smpte.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series. <pre><code>qtm.data.series.time.smpte.get_sample(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>{\"hour\": integer, \"minute\": integer, \"second\": integer, \"frame\": integer}?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series.time.smpte.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series. <pre><code>qtm.data.series.time.smpte.get_samples(id, range?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[{\"hour\": integer, \"minute\": integer, \"second\": integer, \"frame\": integer}?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series.time.smpte.html#set_sample", "title": "set_sample", "text": "<p>Set a single sample in a data series. <pre><code>qtm.data.series.time.smpte.set_sample(id, index, sample?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p><code>sample</code> <code>{\"hour\": integer, \"minute\": integer, \"second\": integer, \"frame\": integer}?</code> The sample (if null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series.time.smpte.html#set_samples", "title": "set_samples", "text": "<p>Set a range of samples in a data series. <pre><code>qtm.data.series.time.smpte.set_samples(id, range, samples)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The index range of the samples.</p> <p><code>samples</code> <code>[{\"hour\": integer, \"minute\": integer, \"second\": integer, \"frame\": integer}?]</code> The samples (if a sample is null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series.time.smpte.html#delete_sample", "title": "delete_sample", "text": "<p>Delete a single sample in a data series. <pre><code>qtm.data.series.time.smpte.delete_sample(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.time.smpte.html#delete_samples", "title": "delete_samples", "text": "<p>Delete a range of samples in a data series. <pre><code>qtm.data.series.time.smpte.delete_samples(id, range?)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be deleted).</p>"}, {"location": "qtm.data.series.time.smpte.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series. <pre><code>qtm.data.series.time.smpte.get_frequency(id)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series.time.smpte.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series. <pre><code>qtm.data.series.time.smpte.get_offset(id)\n</code></pre></p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series.time.smpte.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time. <pre><code>qtm.data.series.time.smpte.get_sample_index_at_time(id, time)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.time.smpte.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series. <pre><code>qtm.data.series.time.smpte.get_time_at_sample_index(id, index)\n</code></pre></p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series.time.smpte.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.data.series.time.smpte.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.gui._3d.html", "title": "qtm.gui._3d", "text": "<p>Interface to the measurement 3d view with methods for custom drawing.</p>"}, {"location": "qtm.gui._3d.html#draw_sphere", "title": "draw_sphere", "text": "<p>Draw a sphere. <pre><code>qtm.gui._3d.draw_sphere(position, size, color?)\n</code></pre></p> <p>This method may only be used in a draw callback function (see 'set_draw_function').</p> <p>Parameters</p> <p><code>position</code> <code>vec3f</code> The position of the center of the sphere (in millimeters).</p> <p><code>size</code> <code>float</code> The diameter of the sphere (in millimeters).</p> <p><code>color</code> <code>integer?</code> The color of the sphere (in 0xbbggrr format, see 'qtm.utilities.color' module). If null, white (0xffffff) will be used.</p>"}, {"location": "qtm.gui._3d.html#draw_arrow", "title": "draw_arrow", "text": "<p>Draw an arrow. <pre><code>qtm.gui._3d.draw_arrow(position, endpoint, color?)\n</code></pre></p> <p>This method may only be used in a draw callback function (see 'set_draw_function').</p> <p>Parameters</p> <p><code>position</code> <code>vec3f</code> The position of the tail of the arrow (in millimeters).</p> <p><code>endpoint</code> <code>vec3f</code> The position of the head of the arrow (in millimeters).</p> <p><code>color</code> <code>integer?</code> The color of the arrow (in 0xbbggrr format, see 'qtm.utilities.color' module). If null, white (0xffffff) will be used.</p>"}, {"location": "qtm.gui._3d.html#draw_axes", "title": "draw_axes", "text": "<p>Draw coordinate system axes. <pre><code>qtm.gui._3d.draw_axes(transform, size)\n</code></pre></p> <p>This method may only be used in a draw callback function (see 'set_draw_function').</p> <p>Parameters</p> <p><code>transform</code> <code>mat4x4f</code> The transform of the axes (with translation in millimeters).</p> <p><code>size</code> <code>float</code> The size of the axes (in millimeters).</p>"}, {"location": "qtm.gui._3d.html#draw_mesh", "title": "draw_mesh", "text": "<p>Draw a mesh. <pre><code>qtm.gui._3d.draw_mesh(transform, scale, filename)\n</code></pre></p> <p>This method may only be used in a draw callback function (see 'set_draw_function').</p> <p>Parameters</p> <p><code>transform</code> <code>mat4x4f</code> The transform of the mesh (with translation in millimeters).</p> <p><code>scale</code> <code>float</code> The scale of the mesh (the units of the mesh is assumed to be in meters).</p> <p><code>filename</code> <code>string</code> The filename of the mesh. Only .obj files are supported. The file must be located next to the measurement or in one of the project's meshes folders.</p>"}, {"location": "qtm.gui._3d.html#draw_text_2d", "title": "draw_text_2d", "text": "<p>Draw 2d text. <pre><code>qtm.gui._3d.draw_text_2d(position, size, text, origin?, alignment?, color?)\n</code></pre></p> <p>This method may only be used in a draw callback function (see 'set_draw_function').</p> <p>Parameters</p> <p><code>position</code> <code>vec2f</code> The position of the text (in pixels relative to the given origin, with positive axes pointing down-right).</p> <p><code>size</code> <code>integer</code> The font size.</p> <p><code>text</code> <code>string</code> The text.</p> <p><code>origin</code> <code>{\"horizontal\": \"left\"|\"center\"|\"right\", \"vertical\": \"top\"|\"center\"|\"bottom\"}?</code> The origin of the text position (if null, top-left corner will be used).</p> <p><code>alignment</code> <code>{\"horizontal\": \"left\"|\"center\"|\"right\", \"vertical\": \"top\"|\"center\"|\"bottom\"}?</code> The alignment of the text (if null, top-left alignment will be used).</p> <p><code>color</code> <code>integer?</code> The color of the text (in 0xbbggrr format, see 'qtm.utilities.color' module). If null, white (0xffffff) will be used.</p>"}, {"location": "qtm.gui._3d.html#set_draw_function", "title": "set_draw_function", "text": "<p>Set a draw callback function. <pre><code>qtm.gui._3d.set_draw_function(function?)\n</code></pre></p> <p>Parameters</p> <p><code>function</code> <code>function?</code> The function to invoke when the 3d view is redrawn (if null, custom drawing will be disabled). The function must have a single float parameter receiving the measurement time to be drawn (in seconds).</p>"}, {"location": "qtm.gui._3d.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.gui._3d.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.gui.html", "title": "qtm.gui", "text": "<p>Control and customize the graphical user interface.</p>"}, {"location": "qtm.gui.html#add_command", "title": "add_command", "text": "<p>Add a command. <pre><code>qtm.gui.add_command(command)\n</code></pre></p> <p>The command will be added as a user command. Use 'set_command_execute_function' and 'set_command_update_function' to set the behavior of the command (by default, it will be enabled and do nothing).</p> <p>Parameters</p> <p><code>command</code> <code>string</code> The command.</p>"}, {"location": "qtm.gui.html#get_commands", "title": "get_commands", "text": "<p>Get the available commands. <pre><code>qtm.gui.get_commands(type?)\n</code></pre></p> <p>Parameters</p> <p><code>type</code> <code>\"builtin\"|\"user\"?</code> The command type to get (if null, all command types will be returned).</p> <p>Returns</p> <p><code>[string]</code> </p>"}, {"location": "qtm.gui.html#send_command", "title": "send_command", "text": "<p>Send a command. <pre><code>qtm.gui.send_command(command)\n</code></pre></p> <p>This is equivalent to clicking a button. Note that if the update function of the command returns false (equivalent to a button being grey/disabled) the command will not be executed.</p> <p>Parameters</p> <p><code>command</code> <code>string</code> The command to send (for a list of available commands, see 'get_commands').</p>"}, {"location": "qtm.gui.html#set_accelerator", "title": "set_accelerator", "text": "<p>Set an accelerator (hotkey/shortcut) for a command. <pre><code>qtm.gui.set_accelerator(accelerator, command)\n</code></pre></p> <p>If the accelerator already exists for a different command, it will be overwritten.</p> <p>Parameters</p> <p><code>accelerator</code> <code>{\"ctrl\": bool, \"alt\": bool, \"shift\": bool, \"key\": \"0\"|\"1\"|\"2\"|\"3\"|\"4\"|\"5\"|\"6\"|\"7\"|\"8\"|\"9\"|\"a\"|\"b\"|\"c\"|\"d\"|\"e\"|\"f\"|\"g\"|\"h\"|\"i\"|\"j\"|\"k\"|\"l\"|\"m\"|\"n\"|\"o\"|\"p\"|\"q\"|\"r\"|\"s\"|\"t\"|\"u\"|\"v\"|\"w\"|\"x\"|\"y\"|\"z\"|\"f1\"|\"f2\"|\"f3\"|\"f4\"|\"f5\"|\"f6\"|\"f7\"|\"f8\"|\"f9\"|\"f10\"|\"f11\"|\"f12\"|\"f13\"|\"f14\"|\"f15\"|\"f16\"|\"f17\"|\"f18\"|\"f19\"|\"f20\"|\"f21\"|\"f22\"|\"f23\"|\"f24\"|\"numpad_0\"|\"numpad_1\"|\"numpad_2\"|\"numpad_3\"|\"numpad_4\"|\"numpad_5\"|\"numpad_6\"|\"numpad_7\"|\"numpad_8\"|\"numpad_9\"|\"escape\"|\"backspace\"|\"tab\"|\"clear\"|\"enter\"|\"pause\"|\"insert\"|\"delete\"|\"home\"|\"end\"|\"page_up\"|\"page_down\"|\"left\"|\"right\"|\"up\"|\"down\"|\"select\"|\"print\"|\"execute\"|\"help\"|\"add\"|\"subtract\"|\"multiply\"|\"divide\"|\"decimal\"|\"separator\"|\"plus\"|\"minus\"|\"comma\"|\"period\"|\"num_lock\"|\"caps_lock\"|\"scroll_lock\"|\"oem_1\"|\"oem_2\"|\"oem_3\"|\"oem_4\"|\"oem_5\"|\"oem_6\"|\"oem_7\"|\"oem_8\"|\"oem_102\"}</code> The accelerator.</p> <p><code>command</code> <code>string</code> The command to send when the accelerator is invoked (for a list of available commands, see 'get_commands').</p>"}, {"location": "qtm.gui.html#get_menu_item", "title": "get_menu_item", "text": "<p>Get an item from a menu or submenu. <pre><code>qtm.gui.get_menu_item(menu?, index)\n</code></pre></p> <p>Parameters</p> <p><code>menu</code> <code>integer?</code> The handle to the menu (if null, the main menu will be used).</p> <p><code>index</code> <code>integer</code> The index of the item in the menu.</p> <p>Returns</p> <p><code>{\"text\": string, \"command\": string, \"submenu\": integer}</code> </p>"}, {"location": "qtm.gui.html#get_menu_items", "title": "get_menu_items", "text": "<p>Get all items from a menu or submenu. <pre><code>qtm.gui.get_menu_items(menu?)\n</code></pre></p> <p>Parameters</p> <p><code>menu</code> <code>integer?</code> The handle to the menu (if null, the main menu will be used).</p> <p>Returns</p> <p><code>[{\"text\": string, \"command\": string, \"submenu\": integer}]</code> </p>"}, {"location": "qtm.gui.html#get_menu_item_count", "title": "get_menu_item_count", "text": "<p>Get the number of items in a menu or submenu. <pre><code>qtm.gui.get_menu_item_count(menu?)\n</code></pre></p> <p>Parameters</p> <p><code>menu</code> <code>integer?</code> The handle to the menu (if null, the main menu will be used).</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.gui.html#insert_menu_button", "title": "insert_menu_button", "text": "<p>Insert a button into a menu or submenu. <pre><code>qtm.gui.insert_menu_button(menu?, text, command, index?)\n</code></pre></p> <p>Parameters</p> <p><code>menu</code> <code>integer?</code> The handle to the menu (if null, the main menu will be used).</p> <p><code>text</code> <code>string</code> The button text.</p> <p><code>command</code> <code>string</code> The command to execute when button is pressed (for a list of available commands, see 'get_commands').</p> <p><code>index</code> <code>integer?</code> The index where the button will be inserted (if null, the button will be inserted at the end).</p>"}, {"location": "qtm.gui.html#insert_menu_separator", "title": "insert_menu_separator", "text": "<p>Insert a separator into a menu or submenu. <pre><code>qtm.gui.insert_menu_separator(menu?, index?)\n</code></pre></p> <p>Parameters</p> <p><code>menu</code> <code>integer?</code> The handle to the menu (if null, the main menu will be used).</p> <p><code>index</code> <code>integer?</code> The index where the separator will be inserted (if null, the separator will be inserted at the end).</p>"}, {"location": "qtm.gui.html#insert_menu_submenu", "title": "insert_menu_submenu", "text": "<p>Insert a submenu into a menu or submenu. <pre><code>qtm.gui.insert_menu_submenu(menu?, text, index?)\n</code></pre></p> <p>Parameters</p> <p><code>menu</code> <code>integer?</code> The handle to the menu (if null, the main menu will be used).</p> <p><code>text</code> <code>string</code> The submenu text.</p> <p><code>index</code> <code>integer?</code> The index where the submenu will be inserted (if null, the submenu will inserted at the end).</p> <p>Returns</p> <p><code>integer</code> The handle to the inserted submenu.</p>"}, {"location": "qtm.gui.html#delete_menu_item", "title": "delete_menu_item", "text": "<p>Delete an item in a menu or submenu. <pre><code>qtm.gui.delete_menu_item(menu?, index)\n</code></pre></p> <p>Parameters</p> <p><code>menu</code> <code>integer?</code> The handle to the menu (if null, the main menu will be used).</p> <p><code>index</code> <code>integer</code> The index of the item to delete.</p>"}, {"location": "qtm.gui.html#set_command_execute_function", "title": "set_command_execute_function", "text": "<p>Set an execute callback function for a command. <pre><code>qtm.gui.set_command_execute_function(command, function?)\n</code></pre></p> <p>The command must've been added by a previous call to 'add_command'. This method cannot be used to overwrite built-in commands or user commands added by other instances of this module.</p> <p>Parameters</p> <p><code>command</code> <code>string</code> The command.</p> <p><code>function</code> <code>function?</code> The function to invoke when the command is executed (if null, execution of the command will be disabled).</p>"}, {"location": "qtm.gui.html#set_command_update_function", "title": "set_command_update_function", "text": "<p>Set an update callback function for a command. <pre><code>qtm.gui.set_command_update_function(command, function?)\n</code></pre></p> <p>This can be used to conditionally disable commands and grey out buttons. The command must've been added by a previous call to 'add_command'. This method cannot be used to overwrite built-in commands or user commands added by other instances of this module.</p> <p>Parameters</p> <p><code>command</code> <code>string</code> The command.</p> <p><code>function</code> <code>function?</code> The function to invoke when the command is updated (if null, the command will be enabled by default). Must return a boolean indicating if the command should be enabled.</p>"}, {"location": "qtm.gui.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.gui.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.gui.message.html", "title": "qtm.gui.message", "text": "<p>Interface to the messages window.</p>"}, {"location": "qtm.gui.message.html#add_message", "title": "add_message", "text": "<p>Add a message. <pre><code>qtm.gui.message.add_message(message, details, type)\n</code></pre></p> <p>Parameters</p> <p><code>message</code> <code>string</code> The message (shown in the message log).</p> <p><code>details</code> <code>string</code> Detailed information (shown when double-clicking the message).</p> <p><code>type</code> <code>\"info\"|\"warning\"|\"error\"</code> The type of message.</p>"}, {"location": "qtm.gui.message.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.gui.message.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.gui.selection.html", "title": "qtm.gui.selection", "text": "<p>Access and modify the current selection.</p> <p>Selections consists of a type, an identifier and an optional part index (only relevant for trajectory types). Different types cannot be selected simultaneously. A null part index means the entire trajectory is selected (and implicitly, all of its parts).</p>"}, {"location": "qtm.gui.selection.html#clear_selections", "title": "clear_selections", "text": "<p>Remove all selections. <pre><code>qtm.gui.selection.clear_selections(type?)\n</code></pre></p> <p>Parameters</p> <p><code>type</code> <code>\"trajectory\"|\"bone\"?</code> The selection type to remove (if null, all selection types will be removed).</p>"}, {"location": "qtm.gui.selection.html#is_selected", "title": "is_selected", "text": "<p>Get whether an object is currently selected. <pre><code>qtm.gui.selection.is_selected(selection)\n</code></pre></p> <p>Parameters</p> <p><code>selection</code> <code>{\"type\": \"trajectory\"|\"bone\", \"id\": integer, \"part_index\": integer?}</code> The object.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.gui.selection.html#get_selection_count", "title": "get_selection_count", "text": "<p>Get the current number of selections. <pre><code>qtm.gui.selection.get_selection_count(type?)\n</code></pre></p> <p>Parameters</p> <p><code>type</code> <code>\"trajectory\"|\"bone\"?</code> The selection type to count (if null, all selection types will be counted).</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.gui.selection.html#get_selections", "title": "get_selections", "text": "<p>Get the current selections. <pre><code>qtm.gui.selection.get_selections(type?)\n</code></pre></p> <p>Parameters</p> <p><code>type</code> <code>\"trajectory\"|\"bone\"?</code> The selection type to get (if null, all selection types will be returned).</p> <p>Returns</p> <p><code>[{\"type\": \"trajectory\"|\"bone\", \"id\": integer, \"part_index\": integer?}]</code> </p>"}, {"location": "qtm.gui.selection.html#set_selections", "title": "set_selections", "text": "<p>Set the current selections. <pre><code>qtm.gui.selection.set_selections(selections)\n</code></pre></p> <p>This will overwrite any existing selections.</p> <p>Parameters</p> <p><code>selections</code> <code>[{\"type\": \"trajectory\"|\"bone\", \"id\": integer, \"part_index\": integer?}]</code> The selections.</p>"}, {"location": "qtm.gui.selection.html#select", "title": "select", "text": "<p>Select objects. <pre><code>qtm.gui.selection.select(selections)\n</code></pre></p> <p>Parameters</p> <p><code>selections</code> <code>[{\"type\": \"trajectory\"|\"bone\", \"id\": integer, \"part_index\": integer?}]</code> The objects to select.</p>"}, {"location": "qtm.gui.selection.html#deselect", "title": "deselect", "text": "<p>Deselect objects. <pre><code>qtm.gui.selection.deselect(selections)\n</code></pre></p> <p>Parameters</p> <p><code>selections</code> <code>[{\"type\": \"trajectory\"|\"bone\", \"id\": integer, \"part_index\": integer?}]</code> The objects to deselect.</p>"}, {"location": "qtm.gui.selection.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.gui.selection.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.gui.terminal.html", "title": "qtm.gui.terminal", "text": "<p>Interface to the terminal window.</p>"}, {"location": "qtm.gui.terminal.html#clear", "title": "clear", "text": "<p>Clear the terminal. <pre><code>qtm.gui.terminal.clear()\n</code></pre></p> <p>This method is used internally by the global 'clear' function.</p>"}, {"location": "qtm.gui.terminal.html#write", "title": "write", "text": "<p>Write text in the terminal. <pre><code>qtm.gui.terminal.write(text)\n</code></pre></p> <p>This method is used internally by the global 'print' function.</p> <p>Parameters</p> <p><code>text</code> <code>string</code> The text to write.</p>"}, {"location": "qtm.gui.terminal.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.gui.terminal.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.gui.timeline.html", "title": "qtm.gui.timeline", "text": "<p>Interface to the measurement timeline.</p>"}, {"location": "qtm.gui.timeline.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency. <pre><code>qtm.gui.timeline.get_frequency()\n</code></pre></p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.gui.timeline.html#get_frame_count", "title": "get_frame_count", "text": "<p>Get the total number of frames. <pre><code>qtm.gui.timeline.get_frame_count()\n</code></pre></p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.gui.timeline.html#get_current_time", "title": "get_current_time", "text": "<p>Get the current time. <pre><code>qtm.gui.timeline.get_current_time()\n</code></pre></p> <p>Returns</p> <p><code>float</code> The current time (in seconds).</p>"}, {"location": "qtm.gui.timeline.html#get_current_frame", "title": "get_current_frame", "text": "<p>Get the current frame number. <pre><code>qtm.gui.timeline.get_current_frame()\n</code></pre></p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.gui.timeline.html#set_current_frame", "title": "set_current_frame", "text": "<p>Set the current frame number. <pre><code>qtm.gui.timeline.set_current_frame(frame)\n</code></pre></p> <p>Parameters</p> <p><code>frame</code> <code>integer</code> The new current frame number (must be within the current selected range).</p>"}, {"location": "qtm.gui.timeline.html#get_measured_range", "title": "get_measured_range", "text": "<p>Get the measured range. <pre><code>qtm.gui.timeline.get_measured_range()\n</code></pre></p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.gui.timeline.html#set_measured_range", "title": "set_measured_range", "text": "<p>Set the measured range. <pre><code>qtm.gui.timeline.set_measured_range(range)\n</code></pre></p> <p>This is equivalent to doing a trim operation.</p> <p>Parameters</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The new measured range.</p>"}, {"location": "qtm.gui.timeline.html#get_selected_range", "title": "get_selected_range", "text": "<p>Get the selected range. <pre><code>qtm.gui.timeline.get_selected_range()\n</code></pre></p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.gui.timeline.html#set_selected_range", "title": "set_selected_range", "text": "<p>Set the selected range. <pre><code>qtm.gui.timeline.set_selected_range(range)\n</code></pre></p> <p>Parameters</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The new selected range (must be within the measured range).</p>"}, {"location": "qtm.gui.timeline.html#get_trace_range", "title": "get_trace_range", "text": "<p>Get the trace range. <pre><code>qtm.gui.timeline.get_trace_range()\n</code></pre></p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.gui.timeline.html#set_trace_range", "title": "set_trace_range", "text": "<p>Set the trace range. <pre><code>qtm.gui.timeline.set_trace_range(range)\n</code></pre></p> <p>Parameters</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The new trace range (must be within the current selected range).</p>"}, {"location": "qtm.gui.timeline.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.gui.timeline.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.html", "title": "qtm", "text": "<p>Interface to the qtm application.</p>"}, {"location": "qtm.html#get_version", "title": "get_version", "text": "<p>Get the version number of qtm. <pre><code>qtm.get_version()\n</code></pre></p> <p>Returns</p> <p><code>{\"major\": integer, \"minor\": integer, \"build\": integer}</code> </p>"}, {"location": "qtm.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.camera.html", "title": "qtm.settings.camera", "text": "<p>Access and modify camera settings.</p>"}, {"location": "qtm.settings.camera.html#get_system_type", "title": "get_system_type", "text": "<p>Get the camera system type. <pre><code>qtm.settings.camera.get_system_type(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>\"oqus\"|\"miqus\"|\"arqus\"|\"mixed\"</code> </p>"}, {"location": "qtm.settings.camera.html#get_camera_count", "title": "get_camera_count", "text": "<p>Get the number of cameras. <pre><code>qtm.settings.camera.get_camera_count(source, type?)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>type</code> <code>\"oqus\"|\"miqus\"|\"arqus\"?</code> The camera type to count (if null, all camera types will be counted).</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.camera.html#get_use_circularity_filtering", "title": "get_use_circularity_filtering", "text": "<p>Get whether to filter markers by circularity. <pre><code>qtm.settings.camera.get_use_circularity_filtering(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#set_use_circularity_filtering", "title": "set_use_circularity_filtering", "text": "<p>Set whether to filter markers by circularity. <pre><code>qtm.settings.camera.set_use_circularity_filtering(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if markers should be filtered by circularity, otherwise false.</p>"}, {"location": "qtm.settings.camera.html#get_camera_type", "title": "get_camera_type", "text": "<p>Get the type of a camera. <pre><code>qtm.settings.camera.get_camera_type(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>\"oqus\"|\"miqus\"|\"arqus\"</code> </p>"}, {"location": "qtm.settings.camera.html#get_camera_model", "title": "get_camera_model", "text": "<p>Get the model of a camera. <pre><code>qtm.settings.camera.get_camera_model(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.camera.html#get_serial_number", "title": "get_serial_number", "text": "<p>Get the serial number of a camera. <pre><code>qtm.settings.camera.get_serial_number(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.camera.html#get_ip_address", "title": "get_ip_address", "text": "<p>Get the ip (internet protocol) address of a camera. <pre><code>qtm.settings.camera.get_ip_address(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.camera.html#get_memory_size", "title": "get_memory_size", "text": "<p>Get the memory size of a camera. <pre><code>qtm.settings.camera.get_memory_size(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>integer</code> The memory size of the camera (in bytes).</p>"}, {"location": "qtm.settings.camera.html#get_view_rotation", "title": "get_view_rotation", "text": "<p>Get the view rotation of a camera. <pre><code>qtm.settings.camera.get_view_rotation(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>\"0\"|\"90\"|\"180\"|\"270\"</code> </p>"}, {"location": "qtm.settings.camera.html#is_active", "title": "is_active", "text": "<p>Get whether a camera is active (used for tracking). <pre><code>qtm.settings.camera.is_active(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_master", "title": "is_master", "text": "<p>Get whether a camera is master. <pre><code>qtm.settings.camera.is_master(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_linearized", "title": "is_linearized", "text": "<p>Get whether a camera is linearized. <pre><code>qtm.settings.camera.is_linearized(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_calibrated", "title": "is_calibrated", "text": "<p>Get whether a camera is calibrated. <pre><code>qtm.settings.camera.is_calibrated(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_waterproof", "title": "is_waterproof", "text": "<p>Get whether a camera is waterproof (for underwater usage). <pre><code>qtm.settings.camera.is_waterproof(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_protected", "title": "is_protected", "text": "<p>Get whether a camera is dust and water protected (for outdoor usage). <pre><code>qtm.settings.camera.is_protected(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_shielded", "title": "is_shielded", "text": "<p>Get whether a camera is emi shielded (for mri usage). <pre><code>qtm.settings.camera.is_shielded(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_wireless", "title": "is_wireless", "text": "<p>Get whether a camera is wireless. <pre><code>qtm.settings.camera.is_wireless(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_highspeed", "title": "is_highspeed", "text": "<p>Get whether a camera supports high-speed video. <pre><code>qtm.settings.camera.is_highspeed(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_color", "title": "is_color", "text": "<p>Get whether a camera has a color sensor. <pre><code>qtm.settings.camera.is_color(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_twin", "title": "is_twin", "text": "<p>Get whether a camera is from a twin camera system. <pre><code>qtm.settings.camera.is_twin(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.settings.camera.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.directory.html", "title": "qtm.settings.directory", "text": "<p>Access and modify directory settings.</p>"}, {"location": "qtm.settings.directory.html#get_project_directory", "title": "get_project_directory", "text": "<p>Get the project directory path. <pre><code>qtm.settings.directory.get_project_directory()\n</code></pre></p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.directory.html#get_calibration_directory", "title": "get_calibration_directory", "text": "<p>Get the calibration directory path. <pre><code>qtm.settings.directory.get_calibration_directory()\n</code></pre></p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.directory.html#set_calibration_directory", "title": "set_calibration_directory", "text": "<p>Set the calibration directory path. <pre><code>qtm.settings.directory.set_calibration_directory(directory)\n</code></pre></p> <p>Parameters</p> <p><code>directory</code> <code>string</code> The calibration directory path.</p>"}, {"location": "qtm.settings.directory.html#get_aim_directory", "title": "get_aim_directory", "text": "<p>Get the aim model directory path. <pre><code>qtm.settings.directory.get_aim_directory()\n</code></pre></p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.directory.html#set_aim_directory", "title": "set_aim_directory", "text": "<p>Set the aim model directory path. <pre><code>qtm.settings.directory.set_aim_directory(directory)\n</code></pre></p> <p>Parameters</p> <p><code>directory</code> <code>string</code> The aim model directory path.</p>"}, {"location": "qtm.settings.directory.html#get_default_project_directory", "title": "get_default_project_directory", "text": "<p>Get the default project directory path. <pre><code>qtm.settings.directory.get_default_project_directory()\n</code></pre></p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.directory.html#set_default_project_directory", "title": "set_default_project_directory", "text": "<p>Set the default project directory path. <pre><code>qtm.settings.directory.set_default_project_directory(directory)\n</code></pre></p> <p>Parameters</p> <p><code>directory</code> <code>string</code> The default project directory path.</p>"}, {"location": "qtm.settings.directory.html#get_temp_video_directory", "title": "get_temp_video_directory", "text": "<p>Get the temporary video directory path. <pre><code>qtm.settings.directory.get_temp_video_directory()\n</code></pre></p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.directory.html#set_temp_video_directory", "title": "set_temp_video_directory", "text": "<p>Set the temporary video directory path. <pre><code>qtm.settings.directory.set_temp_video_directory(directory)\n</code></pre></p> <p>Parameters</p> <p><code>directory</code> <code>string</code> The temporary video directory path.</p>"}, {"location": "qtm.settings.directory.html#get_auto_save_directory", "title": "get_auto_save_directory", "text": "<p>Get the auto save directory path. <pre><code>qtm.settings.directory.get_auto_save_directory()\n</code></pre></p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.directory.html#set_auto_save_directory", "title": "set_auto_save_directory", "text": "<p>Set the auto save directory path. <pre><code>qtm.settings.directory.set_auto_save_directory(directory)\n</code></pre></p> <p>Parameters</p> <p><code>directory</code> <code>string</code> The auto save directory path.</p>"}, {"location": "qtm.settings.directory.html#get_linearization_directory", "title": "get_linearization_directory", "text": "<p>Get the linearization directory path. <pre><code>qtm.settings.directory.get_linearization_directory()\n</code></pre></p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.directory.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.settings.directory.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.euler.html", "title": "qtm.settings.euler", "text": "<p>Access and modify euler angle settings.</p>"}, {"location": "qtm.settings.euler.html#get_convention", "title": "get_convention", "text": "<p>Get the euler angle convention. <pre><code>qtm.settings.euler.get_convention()\n</code></pre></p> <p>Returns</p> <p><code>\"qualisys\"|\"custom\"</code> </p>"}, {"location": "qtm.settings.euler.html#set_convention", "title": "set_convention", "text": "<p>Set the euler angle convention. <pre><code>qtm.settings.euler.set_convention(convention)\n</code></pre></p> <p>Parameters</p> <p><code>convention</code> <code>\"qualisys\"|\"custom\"</code> The euler angle convention.</p>"}, {"location": "qtm.settings.euler.html#get_sequence", "title": "get_sequence", "text": "<p>Get the euler angle sequence. <pre><code>qtm.settings.euler.get_sequence()\n</code></pre></p> <p>Returns</p> <p><code>\"xyx\"|\"xzx\"|\"yxy\"|\"yzy\"|\"zxz\"|\"zyz\"|\"xyz\"|\"xzy\"|\"yxz\"|\"yzx\"|\"zxy\"|\"zyx\"</code> </p>"}, {"location": "qtm.settings.euler.html#set_sequence", "title": "set_sequence", "text": "<p>Set the euler angle sequence. <pre><code>qtm.settings.euler.set_sequence(sequence)\n</code></pre></p> <p>This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>sequence</code> <code>\"xyx\"|\"xzx\"|\"yxy\"|\"yzy\"|\"zxz\"|\"zyz\"|\"xyz\"|\"xzy\"|\"yxz\"|\"yzx\"|\"zxy\"|\"zyx\"</code> The euler angle sequence.</p>"}, {"location": "qtm.settings.euler.html#get_use_extrinsic_axes", "title": "get_use_extrinsic_axes", "text": "<p>Get whether to use extrinsic (fixed) axes. <pre><code>qtm.settings.euler.get_use_extrinsic_axes()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.euler.html#set_use_extrinsic_axes", "title": "set_use_extrinsic_axes", "text": "<p>Set whether to use extrinsic (fixed) axes. <pre><code>qtm.settings.euler.set_use_extrinsic_axes(enable)\n</code></pre></p> <p>This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if extrinsic axes should be used, otherwise false.</p>"}, {"location": "qtm.settings.euler.html#get_first_axis_name", "title": "get_first_axis_name", "text": "<p>Get the name of the first rotation axis. <pre><code>qtm.settings.euler.get_first_axis_name()\n</code></pre></p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.euler.html#set_first_axis_name", "title": "set_first_axis_name", "text": "<p>Set the name of the first rotation axis. <pre><code>qtm.settings.euler.set_first_axis_name(name)\n</code></pre></p> <p>This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>name</code> <code>string</code> The name of the first rotation axis.</p>"}, {"location": "qtm.settings.euler.html#get_second_axis_name", "title": "get_second_axis_name", "text": "<p>Get the name of the second rotation axis. <pre><code>qtm.settings.euler.get_second_axis_name()\n</code></pre></p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.euler.html#set_second_axis_name", "title": "set_second_axis_name", "text": "<p>Set the name of the second rotation axis. <pre><code>qtm.settings.euler.set_second_axis_name(name)\n</code></pre></p> <p>This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>name</code> <code>string</code> The name of the second rotation axis.</p>"}, {"location": "qtm.settings.euler.html#get_third_axis_name", "title": "get_third_axis_name", "text": "<p>Get the name of the third rotation axis. <pre><code>qtm.settings.euler.get_third_axis_name()\n</code></pre></p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.euler.html#set_third_axis_name", "title": "set_third_axis_name", "text": "<p>Set the name of the third rotation axis. <pre><code>qtm.settings.euler.set_third_axis_name(name)\n</code></pre></p> <p>This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>name</code> <code>string</code> The name of the third rotation axis.</p>"}, {"location": "qtm.settings.euler.html#get_first_angle_left_handed", "title": "get_first_angle_left_handed", "text": "<p>Get whether to use left-handed first rotation angle. <pre><code>qtm.settings.euler.get_first_angle_left_handed()\n</code></pre></p> <p>Left-handed means counter-clockwise facing positive direction of rotation axis.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.euler.html#set_first_angle_left_handed", "title": "set_first_angle_left_handed", "text": "<p>Set whether to use left-handed first rotation angle. <pre><code>qtm.settings.euler.set_first_angle_left_handed(enable)\n</code></pre></p> <p>Left-handed means counter-clockwise facing positive direction of rotation axis. This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if left-handed first rotation angle should be used, otherwise false.</p>"}, {"location": "qtm.settings.euler.html#get_second_angle_left_handed", "title": "get_second_angle_left_handed", "text": "<p>Get whether to use left-handed second rotation angle. <pre><code>qtm.settings.euler.get_second_angle_left_handed()\n</code></pre></p> <p>Left-handed means counter-clockwise facing positive direction of rotation axis.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.euler.html#set_second_angle_left_handed", "title": "set_second_angle_left_handed", "text": "<p>Set whether to use left-handed second rotation angle. <pre><code>qtm.settings.euler.set_second_angle_left_handed(enable)\n</code></pre></p> <p>Left-handed means counter-clockwise facing positive direction of rotation axis. This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if left-handed second rotation angle should be used, otherwise false.</p>"}, {"location": "qtm.settings.euler.html#get_third_angle_left_handed", "title": "get_third_angle_left_handed", "text": "<p>Get whether to use left-handed third rotation angle. <pre><code>qtm.settings.euler.get_third_angle_left_handed()\n</code></pre></p> <p>Left-handed means counter-clockwise facing positive direction of rotation axis.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.euler.html#set_third_angle_left_handed", "title": "set_third_angle_left_handed", "text": "<p>Set whether to use left-handed third rotation angle. <pre><code>qtm.settings.euler.set_third_angle_left_handed(enable)\n</code></pre></p> <p>Left-handed means counter-clockwise facing positive direction of rotation axis. This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if left-handed third rotation angle should be used, otherwise false.</p>"}, {"location": "qtm.settings.euler.html#get_first_angle_range", "title": "get_first_angle_range", "text": "<p>Get the range of the first rotation angle. <pre><code>qtm.settings.euler.get_first_angle_range()\n</code></pre></p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.settings.euler.html#set_first_angle_range", "title": "set_first_angle_range", "text": "<p>Set the range of the first rotation angle. <pre><code>qtm.settings.euler.set_first_angle_range(range)\n</code></pre></p> <p>This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The range of the first rotation angle (must be either [-180, 180] or [0, 360]).</p>"}, {"location": "qtm.settings.euler.html#get_third_angle_range", "title": "get_third_angle_range", "text": "<p>Get the range of the third rotation angle. <pre><code>qtm.settings.euler.get_third_angle_range()\n</code></pre></p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.settings.euler.html#set_third_angle_range", "title": "set_third_angle_range", "text": "<p>Set the range of the third rotation angle. <pre><code>qtm.settings.euler.set_third_angle_range(range)\n</code></pre></p> <p>This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The range of the third rotation angle (must be either [-180, 180] or [0, 360]).</p>"}, {"location": "qtm.settings.euler.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.settings.euler.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.export.c3d.html", "title": "qtm.settings.export.c3d", "text": "<p>Access and modify c3d export settings.</p>"}, {"location": "qtm.settings.export.c3d.html#get_exclude_unidentified", "title": "get_exclude_unidentified", "text": "<p>Get whether to exclude unidentified trajectories. <pre><code>qtm.settings.export.c3d.get_exclude_unidentified()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.c3d.html#set_exclude_unidentified", "title": "set_exclude_unidentified", "text": "<p>Set whether to exclude unidentified trajectories. <pre><code>qtm.settings.export.c3d.set_exclude_unidentified(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if unidentified trajectories should be excluded, otherwise false.</p>"}, {"location": "qtm.settings.export.c3d.html#get_exclude_empty", "title": "get_exclude_empty", "text": "<p>Get whether to exclude empty trajectories. <pre><code>qtm.settings.export.c3d.get_exclude_empty()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.c3d.html#set_exclude_empty", "title": "set_exclude_empty", "text": "<p>Set whether to exclude empty trajectories. <pre><code>qtm.settings.export.c3d.set_exclude_empty(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if empty trajectories should be excluded, otherwise false.</p>"}, {"location": "qtm.settings.export.c3d.html#get_exclude_partially_labeled", "title": "get_exclude_partially_labeled", "text": "<p>Get whether to exclude partially labeled frames. <pre><code>qtm.settings.export.c3d.get_exclude_partially_labeled()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.c3d.html#set_exclude_partially_labeled", "title": "set_exclude_partially_labeled", "text": "<p>Set whether to exclude partially labeled frames. <pre><code>qtm.settings.export.c3d.set_exclude_partially_labeled(enable)\n</code></pre></p> <p>This will override the exported range.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if partially labeled frames should be excluded, otherwise false.</p>"}, {"location": "qtm.settings.export.c3d.html#get_use_full_label", "title": "get_use_full_label", "text": "<p>Get whether to use full labels. <pre><code>qtm.settings.export.c3d.get_use_full_label()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.c3d.html#set_use_full_label", "title": "set_use_full_label", "text": "<p>Set whether to use full labels. <pre><code>qtm.settings.export.c3d.set_use_full_label(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if full labels should be used, otherwise false.</p>"}, {"location": "qtm.settings.export.c3d.html#get_use_relative_event_time", "title": "get_use_relative_event_time", "text": "<p>Get whether to use relative event times. <pre><code>qtm.settings.export.c3d.get_use_relative_event_time()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.c3d.html#set_use_relative_event_time", "title": "set_use_relative_event_time", "text": "<p>Set whether to use relative event times. <pre><code>qtm.settings.export.c3d.set_use_relative_event_time(enable)\n</code></pre></p> <p>If enabled, event times will be relative to the start of the exported range.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if relative event times should be used, otherwise false.</p>"}, {"location": "qtm.settings.export.c3d.html#get_use_zero_force_baseline", "title": "get_use_zero_force_baseline", "text": "<p>Get whether to use zero force baseline. <pre><code>qtm.settings.export.c3d.get_use_zero_force_baseline()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.c3d.html#set_use_zero_force_baseline", "title": "set_use_zero_force_baseline", "text": "<p>Set whether to use zero force baseline. <pre><code>qtm.settings.export.c3d.set_use_zero_force_baseline(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if zero force baseline should be used, otherwise false.</p>"}, {"location": "qtm.settings.export.c3d.html#get_zero_force_baseline_range", "title": "get_zero_force_baseline_range", "text": "<p>Get the zero force baseline range. <pre><code>qtm.settings.export.c3d.get_zero_force_baseline_range()\n</code></pre></p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.settings.export.c3d.html#set_zero_force_baseline_range", "title": "set_zero_force_baseline_range", "text": "<p>Set the zero force baseline range. <pre><code>qtm.settings.export.c3d.set_zero_force_baseline_range(range)\n</code></pre></p> <p>This method requires zero force baseline to be enabled (see 'set_use_zero_force_baseline').</p> <p>Parameters</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The zero force baseline range.</p>"}, {"location": "qtm.settings.export.c3d.html#get_length_units", "title": "get_length_units", "text": "<p>Get the length units. <pre><code>qtm.settings.export.c3d.get_length_units()\n</code></pre></p> <p>Returns</p> <p><code>\"mm\"|\"cm\"|\"m\"</code> </p>"}, {"location": "qtm.settings.export.c3d.html#set_length_units", "title": "set_length_units", "text": "<p>Set the length units. <pre><code>qtm.settings.export.c3d.set_length_units(units)\n</code></pre></p> <p>Parameters</p> <p><code>units</code> <code>\"mm\"|\"cm\"|\"m\"</code> The length units.</p>"}, {"location": "qtm.settings.export.c3d.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.settings.export.c3d.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.export.fbx.html", "title": "qtm.settings.export.fbx", "text": "<p>Access and modify fbx export settings.</p>"}, {"location": "qtm.settings.export.fbx.html#get_file_format", "title": "get_file_format", "text": "<p>Get the file format. <pre><code>qtm.settings.export.fbx.get_file_format()\n</code></pre></p> <p>Returns</p> <p><code>\"ascii\"|\"binary\"</code> </p>"}, {"location": "qtm.settings.export.fbx.html#set_file_format", "title": "set_file_format", "text": "<p>Set the file format. <pre><code>qtm.settings.export.fbx.set_file_format(format)\n</code></pre></p> <p>Parameters</p> <p><code>format</code> <code>\"ascii\"|\"binary\"</code> The file format.</p>"}, {"location": "qtm.settings.export.fbx.html#get_export_optical", "title": "get_export_optical", "text": "<p>Get whether to export opticals. <pre><code>qtm.settings.export.fbx.get_export_optical()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.fbx.html#set_export_optical", "title": "set_export_optical", "text": "<p>Set whether to export opticals. <pre><code>qtm.settings.export.fbx.set_export_optical(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if opticals should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.fbx.html#get_export_actor", "title": "get_export_actor", "text": "<p>Get whether to export motionbuilder actors. <pre><code>qtm.settings.export.fbx.get_export_actor()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.fbx.html#set_export_actor", "title": "set_export_actor", "text": "<p>Set whether to export motionbuilder actors. <pre><code>qtm.settings.export.fbx.set_export_actor(enable)\n</code></pre></p> <p>Actors require opticals to be exported (see 'set_export_optical').</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if motionbuilder actors should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.fbx.html#get_export_skeleton", "title": "get_export_skeleton", "text": "<p>Get whether to export skeletons. <pre><code>qtm.settings.export.fbx.get_export_skeleton()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.fbx.html#set_export_skeleton", "title": "set_export_skeleton", "text": "<p>Set whether to export skeletons. <pre><code>qtm.settings.export.fbx.set_export_skeleton(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if skeletons should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.fbx.html#get_export_character", "title": "get_export_character", "text": "<p>Get whether to export characters. <pre><code>qtm.settings.export.fbx.get_export_character()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.fbx.html#set_export_character", "title": "set_export_character", "text": "<p>Set whether to export characters. <pre><code>qtm.settings.export.fbx.set_export_character(enable)\n</code></pre></p> <p>Characters require skeletons to be exported (see 'set_export_skeleton').</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if characters should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.fbx.html#get_export_camera", "title": "get_export_camera", "text": "<p>Get whether to export cameras. <pre><code>qtm.settings.export.fbx.get_export_camera()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.fbx.html#set_export_camera", "title": "set_export_camera", "text": "<p>Set whether to export cameras. <pre><code>qtm.settings.export.fbx.set_export_camera(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if cameras should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.fbx.html#get_export_timecode", "title": "get_export_timecode", "text": "<p>Get whether to export timecodes. <pre><code>qtm.settings.export.fbx.get_export_timecode()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.fbx.html#set_export_timecode", "title": "set_export_timecode", "text": "<p>Set whether to export timecodes. <pre><code>qtm.settings.export.fbx.set_export_timecode(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if timecodes should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.fbx.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.settings.export.fbx.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.export.mat.html", "title": "qtm.settings.export.mat", "text": "<p>Access and modify mat export settings.</p>"}, {"location": "qtm.settings.export.mat.html#get_export_3d", "title": "get_export_3d", "text": "<p>Get whether to export 3d data. <pre><code>qtm.settings.export.mat.get_export_3d()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_export_3d", "title": "set_export_3d", "text": "<p>Set whether to export 3d data. <pre><code>qtm.settings.export.mat.set_export_3d(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if 3d data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#get_export_6d", "title": "get_export_6d", "text": "<p>Get whether to export 6dof data. <pre><code>qtm.settings.export.mat.get_export_6d()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_export_6d", "title": "set_export_6d", "text": "<p>Set whether to export 6dof data. <pre><code>qtm.settings.export.mat.set_export_6d(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if 6dof data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#get_export_analog", "title": "get_export_analog", "text": "<p>Get whether to export analog data. <pre><code>qtm.settings.export.mat.get_export_analog()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_export_analog", "title": "set_export_analog", "text": "<p>Set whether to export analog data. <pre><code>qtm.settings.export.mat.set_export_analog(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if analog data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#get_export_force", "title": "get_export_force", "text": "<p>Get whether to export force data. <pre><code>qtm.settings.export.mat.get_export_force()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_export_force", "title": "set_export_force", "text": "<p>Set whether to export force data. <pre><code>qtm.settings.export.mat.set_export_force(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if force data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#get_export_eye", "title": "get_export_eye", "text": "<p>Get whether to export eye data. <pre><code>qtm.settings.export.mat.get_export_eye()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_export_eye", "title": "set_export_eye", "text": "<p>Set whether to export eye data. <pre><code>qtm.settings.export.mat.set_export_eye(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if eye data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#get_export_skeleton", "title": "get_export_skeleton", "text": "<p>Get whether to export skeleton data. <pre><code>qtm.settings.export.mat.get_export_skeleton()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_export_skeleton", "title": "set_export_skeleton", "text": "<p>Set whether to export skeleton data. <pre><code>qtm.settings.export.mat.set_export_skeleton(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if skeleton data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#get_export_timecode", "title": "get_export_timecode", "text": "<p>Get whether to export timecodes. <pre><code>qtm.settings.export.mat.get_export_timecode()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_export_timecode", "title": "set_export_timecode", "text": "<p>Set whether to export timecodes. <pre><code>qtm.settings.export.mat.set_export_timecode(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if timecodes should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#get_export_event", "title": "get_export_event", "text": "<p>Get whether to export events. <pre><code>qtm.settings.export.mat.get_export_event()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_export_event", "title": "set_export_event", "text": "<p>Set whether to export events. <pre><code>qtm.settings.export.mat.set_export_event(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if events should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#get_exclude_unidentified", "title": "get_exclude_unidentified", "text": "<p>Get whether to exclude unidentified trajectories. <pre><code>qtm.settings.export.mat.get_exclude_unidentified()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_exclude_unidentified", "title": "set_exclude_unidentified", "text": "<p>Set whether to exclude unidentified trajectories. <pre><code>qtm.settings.export.mat.set_exclude_unidentified(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if unidentified trajectories should be excluded, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#get_skeleton_reference_frame", "title": "get_skeleton_reference_frame", "text": "<p>Get the skeleton reference frame. <pre><code>qtm.settings.export.mat.get_skeleton_reference_frame()\n</code></pre></p> <p>Returns</p> <p><code>\"global\"|\"local\"</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_skeleton_reference_frame", "title": "set_skeleton_reference_frame", "text": "<p>Set the skeleton reference frame. <pre><code>qtm.settings.export.mat.set_skeleton_reference_frame(frame)\n</code></pre></p> <p>This method requires skeletons to be exported (see 'set_export_skeleton').</p> <p>Parameters</p> <p><code>frame</code> <code>\"global\"|\"local\"</code> The skeleton reference frame.</p>"}, {"location": "qtm.settings.export.mat.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.settings.export.mat.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.export.tsv.html", "title": "qtm.settings.export.tsv", "text": "<p>Access and modify tsv export settings.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_2d", "title": "get_export_2d", "text": "<p>Get whether to export 2d data. <pre><code>qtm.settings.export.tsv.get_export_2d()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_2d", "title": "set_export_2d", "text": "<p>Set whether to export 2d data. <pre><code>qtm.settings.export.tsv.set_export_2d(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if 2d data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_3d", "title": "get_export_3d", "text": "<p>Get whether to export 3d data. <pre><code>qtm.settings.export.tsv.get_export_3d()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_3d", "title": "set_export_3d", "text": "<p>Set whether to export 3d data. <pre><code>qtm.settings.export.tsv.set_export_3d(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if 3d data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_6d", "title": "get_export_6d", "text": "<p>Get whether to export 6dof data. <pre><code>qtm.settings.export.tsv.get_export_6d()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_6d", "title": "set_export_6d", "text": "<p>Set whether to export 6dof data. <pre><code>qtm.settings.export.tsv.set_export_6d(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if 6dof data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_analog", "title": "get_export_analog", "text": "<p>Get whether to export analog data. <pre><code>qtm.settings.export.tsv.get_export_analog()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_analog", "title": "set_export_analog", "text": "<p>Set whether to export analog data. <pre><code>qtm.settings.export.tsv.set_export_analog(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if analog data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_force", "title": "get_export_force", "text": "<p>Get whether to export force data. <pre><code>qtm.settings.export.tsv.get_export_force()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_force", "title": "set_export_force", "text": "<p>Set whether to export force data. <pre><code>qtm.settings.export.tsv.set_export_force(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if force data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_eye", "title": "get_export_eye", "text": "<p>Get whether to export eye data. <pre><code>qtm.settings.export.tsv.get_export_eye()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_eye", "title": "set_export_eye", "text": "<p>Set whether to export eye data. <pre><code>qtm.settings.export.tsv.set_export_eye(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if eye data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_skeleton", "title": "get_export_skeleton", "text": "<p>Get whether to export skeleton data. <pre><code>qtm.settings.export.tsv.get_export_skeleton()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_skeleton", "title": "set_export_skeleton", "text": "<p>Set whether to export skeleton data. <pre><code>qtm.settings.export.tsv.set_export_skeleton(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if skeleton data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_time", "title": "get_export_time", "text": "<p>Get whether to export sample times. <pre><code>qtm.settings.export.tsv.get_export_time()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_time", "title": "set_export_time", "text": "<p>Set whether to export sample times. <pre><code>qtm.settings.export.tsv.set_export_time(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if sample times should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_event", "title": "get_export_event", "text": "<p>Get whether to export events. <pre><code>qtm.settings.export.tsv.get_export_event()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_event", "title": "set_export_event", "text": "<p>Set whether to export events. <pre><code>qtm.settings.export.tsv.set_export_event(enable)\n</code></pre></p> <p>Events require file header to be exported (see 'set_export_file_header').</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if events should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_point_type", "title": "get_export_point_type", "text": "<p>Get whether to export 3d point types. <pre><code>qtm.settings.export.tsv.get_export_point_type()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_point_type", "title": "set_export_point_type", "text": "<p>Set whether to export 3d point types. <pre><code>qtm.settings.export.tsv.set_export_point_type(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if 3d point types should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_file_header", "title": "get_export_file_header", "text": "<p>Get whether to export a file header. <pre><code>qtm.settings.export.tsv.get_export_file_header()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_file_header", "title": "set_export_file_header", "text": "<p>Set whether to export a file header. <pre><code>qtm.settings.export.tsv.set_export_file_header(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if a file header should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_column_header", "title": "get_export_column_header", "text": "<p>Get whether to export column headers. <pre><code>qtm.settings.export.tsv.get_export_column_header()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_column_header", "title": "set_export_column_header", "text": "<p>Set whether to export column headers. <pre><code>qtm.settings.export.tsv.set_export_column_header(enable)\n</code></pre></p> <p>Column headers require file header to be exported (see 'set_export_file_header').</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if column headers should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_null_string", "title": "get_null_string", "text": "<p>Get the null string. <pre><code>qtm.settings.export.tsv.get_null_string()\n</code></pre></p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_null_string", "title": "set_null_string", "text": "<p>Set the null string. <pre><code>qtm.settings.export.tsv.set_null_string(string)\n</code></pre></p> <p>Parameters</p> <p><code>string</code> <code>string</code> The null string.</p>"}, {"location": "qtm.settings.export.tsv.html#get_exclude_unidentified", "title": "get_exclude_unidentified", "text": "<p>Get whether to exclude unidentified trajectories. <pre><code>qtm.settings.export.tsv.get_exclude_unidentified()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_exclude_unidentified", "title": "set_exclude_unidentified", "text": "<p>Set whether to exclude unidentified trajectories. <pre><code>qtm.settings.export.tsv.set_exclude_unidentified(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if unidentified trajectories should be excluded, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_exclude_empty", "title": "get_exclude_empty", "text": "<p>Get whether to exclude empty trajectories. <pre><code>qtm.settings.export.tsv.get_exclude_empty()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_exclude_empty", "title": "set_exclude_empty", "text": "<p>Set whether to exclude empty trajectories. <pre><code>qtm.settings.export.tsv.set_exclude_empty(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if empty trajectories should be excluded, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_exclude_partially_labeled", "title": "get_exclude_partially_labeled", "text": "<p>Get whether to exclude partially labeled frames. <pre><code>qtm.settings.export.tsv.get_exclude_partially_labeled()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_exclude_partially_labeled", "title": "set_exclude_partially_labeled", "text": "<p>Set whether to exclude partially labeled frames. <pre><code>qtm.settings.export.tsv.set_exclude_partially_labeled(enable)\n</code></pre></p> <p>This will override the exported range.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if partially labeled frames should be excluded, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_skeleton_reference_frame", "title": "get_skeleton_reference_frame", "text": "<p>Get the skeleton reference frame. <pre><code>qtm.settings.export.tsv.get_skeleton_reference_frame()\n</code></pre></p> <p>Returns</p> <p><code>\"global\"|\"local\"</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_skeleton_reference_frame", "title": "set_skeleton_reference_frame", "text": "<p>Set the skeleton reference frame. <pre><code>qtm.settings.export.tsv.set_skeleton_reference_frame(frame)\n</code></pre></p> <p>This method requires skeletons to be exported (see 'set_export_skeleton').</p> <p>Parameters</p> <p><code>frame</code> <code>\"global\"|\"local\"</code> The skeleton reference frame.</p>"}, {"location": "qtm.settings.export.tsv.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.settings.export.tsv.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing._2d.html", "title": "qtm.settings.processing._2d", "text": "<p>Access and modify 2d processing settings.</p>"}, {"location": "qtm.settings.processing._2d.html#get_correct_center_points", "title": "get_correct_center_points", "text": "<p>Get whether to correct center points. <pre><code>qtm.settings.processing._2d.get_correct_center_points(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._2d.html#set_correct_center_points", "title": "set_correct_center_points", "text": "<p>Set whether to correct center points. <pre><code>qtm.settings.processing._2d.set_correct_center_points(source, enable)\n</code></pre></p> <p>Center point correction requires circularity filtering to be enabled (see 'qtm.settings.camera.set_use_circularity_filtering').</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if center points should be corrected, otherwise false.</p>"}, {"location": "qtm.settings.processing._2d.html#get_use_min_marker_size", "title": "get_use_min_marker_size", "text": "<p>Get whether to filter markers by minimum size. <pre><code>qtm.settings.processing._2d.get_use_min_marker_size(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._2d.html#set_use_min_marker_size", "title": "set_use_min_marker_size", "text": "<p>Set whether to filter markers by minimum size. <pre><code>qtm.settings.processing._2d.set_use_min_marker_size(source, enable)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if markers should be filtered by minimum size, otherwise false.</p>"}, {"location": "qtm.settings.processing._2d.html#get_use_max_marker_size", "title": "get_use_max_marker_size", "text": "<p>Get whether to filter markers by maximum size. <pre><code>qtm.settings.processing._2d.get_use_max_marker_size(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._2d.html#set_use_max_marker_size", "title": "set_use_max_marker_size", "text": "<p>Set whether to filter markers by maximum size. <pre><code>qtm.settings.processing._2d.set_use_max_marker_size(source, enable)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if markers should be filtered by maximum size, otherwise false.</p>"}, {"location": "qtm.settings.processing._2d.html#get_min_marker_size", "title": "get_min_marker_size", "text": "<p>Get the minimum marker size. <pre><code>qtm.settings.processing._2d.get_min_marker_size(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>integer</code> The minimum marker size (in subpixels).</p>"}, {"location": "qtm.settings.processing._2d.html#set_min_marker_size", "title": "set_min_marker_size", "text": "<p>Set the minimum marker size. <pre><code>qtm.settings.processing._2d.set_min_marker_size(source, size)\n</code></pre></p> <p>This method requires filtering by minimum marker size to be enabled (see 'set_use_min_marker_size').</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>size</code> <code>integer</code> The minimum marker size (in subpixels).</p>"}, {"location": "qtm.settings.processing._2d.html#get_max_marker_size", "title": "get_max_marker_size", "text": "<p>Get the maximum marker size. <pre><code>qtm.settings.processing._2d.get_max_marker_size(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>integer</code> The maximum marker size (in subpixels).</p>"}, {"location": "qtm.settings.processing._2d.html#set_max_marker_size", "title": "set_max_marker_size", "text": "<p>Set the maximum marker size. <pre><code>qtm.settings.processing._2d.set_max_marker_size(source, size)\n</code></pre></p> <p>This method requires filtering by maximum marker size to be enabled (see 'set_use_max_marker_size').</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>size</code> <code>integer</code> The maximum marker size (in subpixels).</p>"}, {"location": "qtm.settings.processing._2d.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.settings.processing._2d.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing._3d.html", "title": "qtm.settings.processing._3d", "text": "<p>Access and modify 3d processing settings.</p>"}, {"location": "qtm.settings.processing._3d.html#get_prediction_error", "title": "get_prediction_error", "text": "<p>Get the prediction error. <pre><code>qtm.settings.processing._3d.get_prediction_error(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>float</code> The prediction error (in millimeters).</p>"}, {"location": "qtm.settings.processing._3d.html#set_prediction_error", "title": "set_prediction_error", "text": "<p>Set the prediction error. <pre><code>qtm.settings.processing._3d.set_prediction_error(source, error)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>error</code> <code>float</code> The prediction error (in millimeters).</p>"}, {"location": "qtm.settings.processing._3d.html#get_max_residual", "title": "get_max_residual", "text": "<p>Get the maximum residual. <pre><code>qtm.settings.processing._3d.get_max_residual(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>float</code> The maximum residual (in millimeters).</p>"}, {"location": "qtm.settings.processing._3d.html#set_max_residual", "title": "set_max_residual", "text": "<p>Set the maximum residual. <pre><code>qtm.settings.processing._3d.set_max_residual(source, residual)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>residual</code> <code>float</code> The maximum residual (in millimeters).</p>"}, {"location": "qtm.settings.processing._3d.html#get_min_trajectory_length", "title": "get_min_trajectory_length", "text": "<p>Get the minimum trajectory length. <pre><code>qtm.settings.processing._3d.get_min_trajectory_length(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>integer</code> The minimum trajectory length (in samples).</p>"}, {"location": "qtm.settings.processing._3d.html#set_min_trajectory_length", "title": "set_min_trajectory_length", "text": "<p>Set the minimum trajectory length. <pre><code>qtm.settings.processing._3d.set_min_trajectory_length(source, length)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>length</code> <code>integer</code> The minimum trajectory length (in samples). Must be within the [2, 100] range.</p>"}, {"location": "qtm.settings.processing._3d.html#get_min_ray_count", "title": "get_min_ray_count", "text": "<p>Get the minimum marker ray count. <pre><code>qtm.settings.processing._3d.get_min_ray_count(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing._3d.html#set_min_ray_count", "title": "set_min_ray_count", "text": "<p>Set the minimum marker ray count. <pre><code>qtm.settings.processing._3d.set_min_ray_count(source, count)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>count</code> <code>integer</code> The minimum ray count. Must be within the [2, 5] range.</p>"}, {"location": "qtm.settings.processing._3d.html#get_auto_limit_ray_length", "title": "get_auto_limit_ray_length", "text": "<p>Get whether to automatically calculate ray length limits. <pre><code>qtm.settings.processing._3d.get_auto_limit_ray_length(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._3d.html#set_auto_limit_ray_length", "title": "set_auto_limit_ray_length", "text": "<p>Set whether to automatically calculate ray length limits. <pre><code>qtm.settings.processing._3d.set_auto_limit_ray_length(source, enable)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if ray length limits should be automatically calculated, otherwise false.</p>"}, {"location": "qtm.settings.processing._3d.html#get_min_ray_length", "title": "get_min_ray_length", "text": "<p>Get the minimum ray length. <pre><code>qtm.settings.processing._3d.get_min_ray_length(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>float</code> The minimum ray length (in meters).</p>"}, {"location": "qtm.settings.processing._3d.html#set_min_ray_length", "title": "set_min_ray_length", "text": "<p>Set the minimum ray length. <pre><code>qtm.settings.processing._3d.set_min_ray_length(source, length)\n</code></pre></p> <p>This method requires manual ray length limits (see 'set_auto_limit_ray_length')</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>length</code> <code>float</code> The minimum ray length (in meters).</p>"}, {"location": "qtm.settings.processing._3d.html#get_max_ray_length", "title": "get_max_ray_length", "text": "<p>Get the maximum ray length. <pre><code>qtm.settings.processing._3d.get_max_ray_length(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>float</code> The maximum ray length (in meters).</p>"}, {"location": "qtm.settings.processing._3d.html#set_max_ray_length", "title": "set_max_ray_length", "text": "<p>Set the maximum ray length. <pre><code>qtm.settings.processing._3d.set_max_ray_length(source, length)\n</code></pre></p> <p>This method requires manual ray length limits (see 'set_auto_limit_ray_length').</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>length</code> <code>float</code> The maximum ray length (in meters).</p>"}, {"location": "qtm.settings.processing._3d.html#get_store_rays", "title": "get_store_rays", "text": "<p>Get whether to store rays. <pre><code>qtm.settings.processing._3d.get_store_rays(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._3d.html#set_store_rays", "title": "set_store_rays", "text": "<p>Set whether to store rays. <pre><code>qtm.settings.processing._3d.set_store_rays(source, enable)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if rays should be stored, otherwise false.</p>"}, {"location": "qtm.settings.processing._3d.html#get_auto_join", "title": "get_auto_join", "text": "<p>Get whether to automatically join trajectories. <pre><code>qtm.settings.processing._3d.get_auto_join(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._3d.html#set_auto_join", "title": "set_auto_join", "text": "<p>Set whether to automatically join trajectories. <pre><code>qtm.settings.processing._3d.set_auto_join(source, enable)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if trajectories should be automatically joined, otherwise false.</p>"}, {"location": "qtm.settings.processing._3d.html#get_max_auto_join_gap_length", "title": "get_max_auto_join_gap_length", "text": "<p>Get the maximum gap length for automatically joining trajectories. <pre><code>qtm.settings.processing._3d.get_max_auto_join_gap_length(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>integer</code> The maximum gap length (in samples).</p>"}, {"location": "qtm.settings.processing._3d.html#set_max_auto_join_gap_length", "title": "set_max_auto_join_gap_length", "text": "<p>Set the maximum gap length for automatically joining trajectories. <pre><code>qtm.settings.processing._3d.set_max_auto_join_gap_length(source, length)\n</code></pre></p> <p>This method requires automatic joining of trajectories to be enabled (see 'set_auto_join').</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>length</code> <code>integer</code> The maximum gap length (in samples).</p>"}, {"location": "qtm.settings.processing._3d.html#get_use_bounding_box", "title": "get_use_bounding_box", "text": "<p>Get whether to use a bounding box. <pre><code>qtm.settings.processing._3d.get_use_bounding_box(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._3d.html#set_use_bounding_box", "title": "set_use_bounding_box", "text": "<p>Set whether to use a bounding box. <pre><code>qtm.settings.processing._3d.set_use_bounding_box(source, enable)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if a bounding box should be used, otherwise false.</p>"}, {"location": "qtm.settings.processing._3d.html#get_bounding_box", "title": "get_bounding_box", "text": "<p>Get the bounding box. <pre><code>qtm.settings.processing._3d.get_bounding_box(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>{\"min_x\": float, \"max_x\": float, \"min_y\": float, \"max_y\": float, \"min_z\": float, \"max_z\": float}</code> The bounding box (in millimeters).</p>"}, {"location": "qtm.settings.processing._3d.html#set_bounding_box", "title": "set_bounding_box", "text": "<p>Set the bounding box. <pre><code>qtm.settings.processing._3d.set_bounding_box(source, box)\n</code></pre></p> <p>This method requires bounding box to be enabled (see 'set_use_bounding_box').</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>box</code> <code>{\"min_x\": float, \"max_x\": float, \"min_y\": float, \"max_y\": float, \"min_z\": float, \"max_z\": float}</code> The bounding box (in millimeters).</p>"}, {"location": "qtm.settings.processing._3d.html#get_auto_select_range", "title": "get_auto_select_range", "text": "<p>Get whether to automatically set the selected range after tracking. <pre><code>qtm.settings.processing._3d.get_auto_select_range(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._3d.html#set_auto_select_range", "title": "set_auto_select_range", "text": "<p>Set whether to automatically set the selected range after tracking. <pre><code>qtm.settings.processing._3d.set_auto_select_range(source, enable)\n</code></pre></p> <p>If enabled, the selected range will be set to the tracked range.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if selected range should be automatically set, otherwise false.</p>"}, {"location": "qtm.settings.processing._3d.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.settings.processing._3d.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing._6d.html", "title": "qtm.settings.processing._6d", "text": "<p>Access and modify 6dof processing settings.</p>"}, {"location": "qtm.settings.processing._6d.html#get_identify_partial_bodies", "title": "get_identify_partial_bodies", "text": "<p>Get whether to identify partially visible rigid bodies. <pre><code>qtm.settings.processing._6d.get_identify_partial_bodies(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._6d.html#set_identify_partial_bodies", "title": "set_identify_partial_bodies", "text": "<p>Set whether to identify partially visible rigid bodies. <pre><code>qtm.settings.processing._6d.set_identify_partial_bodies(source, enable)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if partially visible rigid bodies should be identified, otherwise false.</p>"}, {"location": "qtm.settings.processing._6d.html#get_calculate_missing_markers", "title": "get_calculate_missing_markers", "text": "<p>Get whether to calculate missing markers in rigid bodies. <pre><code>qtm.settings.processing._6d.get_calculate_missing_markers(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._6d.html#set_calculate_missing_markers", "title": "set_calculate_missing_markers", "text": "<p>Set whether to calculate missing markers in rigid bodies. <pre><code>qtm.settings.processing._6d.set_calculate_missing_markers(source, enable)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if missing markers should be calculated, otherwise false.</p>"}, {"location": "qtm.settings.processing._6d.html#add_body", "title": "add_body", "text": "<p>Add a rigid body. <pre><code>qtm.settings.processing._6d.add_body(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>integer</code> The index of the added rigid body.</p>"}, {"location": "qtm.settings.processing._6d.html#add_point", "title": "add_point", "text": "<p>Add a point to a rigid body. <pre><code>qtm.settings.processing._6d.add_point(source, body_index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p>Returns</p> <p><code>integer</code> The index of the added point.</p>"}, {"location": "qtm.settings.processing._6d.html#delete_body", "title": "delete_body", "text": "<p>Delete a rigid body. <pre><code>qtm.settings.processing._6d.delete_body(source, body_index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p>"}, {"location": "qtm.settings.processing._6d.html#delete_point", "title": "delete_point", "text": "<p>Delete a point in a rigid body. <pre><code>qtm.settings.processing._6d.delete_point(source, body_index, point_index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p>"}, {"location": "qtm.settings.processing._6d.html#get_body_count", "title": "get_body_count", "text": "<p>Get the number of rigid bodies. <pre><code>qtm.settings.processing._6d.get_body_count(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing._6d.html#get_point_count", "title": "get_point_count", "text": "<p>Get the number of points in a rigid body. <pre><code>qtm.settings.processing._6d.get_point_count(source, body_index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing._6d.html#get_body_name", "title": "get_body_name", "text": "<p>Get the name of a rigid body. <pre><code>qtm.settings.processing._6d.get_body_name(source, body_index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing._6d.html#set_body_name", "title": "set_body_name", "text": "<p>Set the name of a rigid body. <pre><code>qtm.settings.processing._6d.set_body_name(source, body_index, name)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>name</code> <code>string</code> The name of the rigid body.</p>"}, {"location": "qtm.settings.processing._6d.html#get_body_is_enabled", "title": "get_body_is_enabled", "text": "<p>Get whether a rigid body is enabled. <pre><code>qtm.settings.processing._6d.get_body_is_enabled(source, body_index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._6d.html#set_body_is_enabled", "title": "set_body_is_enabled", "text": "<p>Set whether a rigid body is enabled. <pre><code>qtm.settings.processing._6d.set_body_is_enabled(source, body_index, is_enabled)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>is_enabled</code> <code>bool</code> True if the rigid body should be enabled, otherwise false.</p>"}, {"location": "qtm.settings.processing._6d.html#get_body_color", "title": "get_body_color", "text": "<p>Get the color of a rigid body. <pre><code>qtm.settings.processing._6d.get_body_color(source, body_index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p>Returns</p> <p><code>integer</code> The color of the rigid body (in 0xbbggrr format).</p>"}, {"location": "qtm.settings.processing._6d.html#set_body_color", "title": "set_body_color", "text": "<p>Set the color of a rigid body. <pre><code>qtm.settings.processing._6d.set_body_color(source, body_index, color)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>color</code> <code>integer</code> The color of the rigid body (in 0xbbggrr format, see 'qtm.utilities.color' module).</p>"}, {"location": "qtm.settings.processing._6d.html#get_body_coordinate_system", "title": "get_body_coordinate_system", "text": "<p>Get the coordinate system of a rigid body. <pre><code>qtm.settings.processing._6d.get_body_coordinate_system(source, body_index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p>Returns</p> <p><code>{\"type\": \"global\"|\"relative\"|\"fixed\", \"relative_body_index\": integer?, \"fixed_transform\": mat4x4f?}</code> </p>"}, {"location": "qtm.settings.processing._6d.html#set_body_coordinate_system", "title": "set_body_coordinate_system", "text": "<p>Set the coordinate system of a rigid body. <pre><code>qtm.settings.processing._6d.set_body_coordinate_system(source, body_index, coordinate_system)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>coordinate_system</code> <code>{\"type\": \"global\"|\"relative\"|\"fixed\", \"relative_body_index\": integer?, \"fixed_transform\": mat4x4f?}</code> The coordinate system of the rigid body.</p>"}, {"location": "qtm.settings.processing._6d.html#get_body_min_marker_count", "title": "get_body_min_marker_count", "text": "<p>Get the minimum marker count of a rigid body. <pre><code>qtm.settings.processing._6d.get_body_min_marker_count(source, body_index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing._6d.html#set_body_min_marker_count", "title": "set_body_min_marker_count", "text": "<p>Set the minimum marker count of a rigid body. <pre><code>qtm.settings.processing._6d.set_body_min_marker_count(source, body_index, count)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>count</code> <code>integer</code> The minimum marker count of the rigid body (must be greater than or equal to 3).</p>"}, {"location": "qtm.settings.processing._6d.html#get_body_max_residual", "title": "get_body_max_residual", "text": "<p>Get the maximum residual of a rigid body. <pre><code>qtm.settings.processing._6d.get_body_max_residual(source, body_index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p>Returns</p> <p><code>float</code> The maximum residual of the rigid body (in millimeters).</p>"}, {"location": "qtm.settings.processing._6d.html#set_body_max_residual", "title": "set_body_max_residual", "text": "<p>Set the maximum residual of a rigid body. <pre><code>qtm.settings.processing._6d.set_body_max_residual(source, body_index, residual)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>residual</code> <code>float</code> The maximum residual of the rigid body (in millimeters). Must be within the [0.01, 100.0] range.</p>"}, {"location": "qtm.settings.processing._6d.html#get_body_bone_length_tolerance", "title": "get_body_bone_length_tolerance", "text": "<p>Get the bone length tolerance of a rigid body. <pre><code>qtm.settings.processing._6d.get_body_bone_length_tolerance(source, body_index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p>Returns</p> <p><code>float</code> The bone length tolerance (in millimeters).</p>"}, {"location": "qtm.settings.processing._6d.html#set_body_bone_length_tolerance", "title": "set_body_bone_length_tolerance", "text": "<p>Set the bone length tolerance of a rigid body. <pre><code>qtm.settings.processing._6d.set_body_bone_length_tolerance(source, body_index, tolerance)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>tolerance</code> <code>float</code> The bone length tolerance (in millimeters). Must be within the [0.01, 1000.0] range.</p>"}, {"location": "qtm.settings.processing._6d.html#get_point_name", "title": "get_point_name", "text": "<p>Get the name of a point in a rigid body. <pre><code>qtm.settings.processing._6d.get_point_name(source, body_index, point_index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing._6d.html#set_point_name", "title": "set_point_name", "text": "<p>Set the name of a point in a rigid body. <pre><code>qtm.settings.processing._6d.set_point_name(source, body_index, point_index, name)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p> <p><code>name</code> <code>string</code> The name of the point.</p>"}, {"location": "qtm.settings.processing._6d.html#get_point_position", "title": "get_point_position", "text": "<p>Get the position of a point in a rigid body. <pre><code>qtm.settings.processing._6d.get_point_position(source, body_index, point_index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p> <p>Returns</p> <p><code>vec3f</code> </p>"}, {"location": "qtm.settings.processing._6d.html#set_point_position", "title": "set_point_position", "text": "<p>Set the position of a point in a rigid body. <pre><code>qtm.settings.processing._6d.set_point_position(source, body_index, point_index, position)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p> <p><code>position</code> <code>vec3f</code> The position of the point.</p>"}, {"location": "qtm.settings.processing._6d.html#get_point_is_virtual", "title": "get_point_is_virtual", "text": "<p>Get whether a point in a rigid body is virtual. <pre><code>qtm.settings.processing._6d.get_point_is_virtual(source, body_index, point_index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._6d.html#set_point_is_virtual", "title": "set_point_is_virtual", "text": "<p>Set whether a point in a rigid body is virtual. <pre><code>qtm.settings.processing._6d.set_point_is_virtual(source, body_index, point_index, is_virtual)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p> <p><code>is_virtual</code> <code>bool</code> True if the point is virtual, otherwise false.</p>"}, {"location": "qtm.settings.processing._6d.html#get_point_active_marker_id", "title": "get_point_active_marker_id", "text": "<p>Get the (sequence coded) active marker identifier of a point in a rigid body. <pre><code>qtm.settings.processing._6d.get_point_active_marker_id(source, body_index, point_index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p> <p>Returns</p> <p><code>integer?</code> The active marker identifier of the point (or null, if the marker is passive).</p>"}, {"location": "qtm.settings.processing._6d.html#set_point_active_marker_id", "title": "set_point_active_marker_id", "text": "<p>Set the (sequence coded) active marker identifier of a point in a rigid body. <pre><code>qtm.settings.processing._6d.set_point_active_marker_id(source, body_index, point_index, id?)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p> <p><code>id</code> <code>integer?</code> The active marker identifier of the point (if null, the marker will be regarded as passive).</p>"}, {"location": "qtm.settings.processing._6d.html#load_bodies", "title": "load_bodies", "text": "<p>Load rigid bodies from an xml file. <pre><code>qtm.settings.processing._6d.load_bodies(source, filename)\n</code></pre></p> <p>This will overwrite any existing rigid bodies.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>filename</code> <code>string</code> The xml filename to load.</p>"}, {"location": "qtm.settings.processing._6d.html#save_bodies", "title": "save_bodies", "text": "<p>Save rigid bodies to an xml file. <pre><code>qtm.settings.processing._6d.save_bodies(source, filename)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>filename</code> <code>string</code> The xml filename to save.</p>"}, {"location": "qtm.settings.processing._6d.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.settings.processing._6d.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing.aim.html", "title": "qtm.settings.processing.aim", "text": "<p>Access and modify aim processing settings.</p>"}, {"location": "qtm.settings.processing.aim.html#add_model", "title": "add_model", "text": "<p>Add an aim model. <pre><code>qtm.settings.processing.aim.add_model(source, path)\n</code></pre></p> <p>The added aim model will be applied by default.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>path</code> <code>string</code> The path of the aim model.</p>"}, {"location": "qtm.settings.processing.aim.html#delete_model", "title": "delete_model", "text": "<p>Delete an aim model. <pre><code>qtm.settings.processing.aim.delete_model(source, path)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>path</code> <code>string</code> The path of the aim model.</p>"}, {"location": "qtm.settings.processing.aim.html#clear_models", "title": "clear_models", "text": "<p>Remove all aim models. <pre><code>qtm.settings.processing.aim.clear_models(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p>"}, {"location": "qtm.settings.processing.aim.html#get_model_path", "title": "get_model_path", "text": "<p>Get an aim model path by index. <pre><code>qtm.settings.processing.aim.get_model_path(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the aim model.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing.aim.html#get_model_paths", "title": "get_model_paths", "text": "<p>Get all aim model paths. <pre><code>qtm.settings.processing.aim.get_model_paths(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>[string]</code> </p>"}, {"location": "qtm.settings.processing.aim.html#get_model_count", "title": "get_model_count", "text": "<p>Get the number of aim models. <pre><code>qtm.settings.processing.aim.get_model_count(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.aim.html#get_model_is_applied", "title": "get_model_is_applied", "text": "<p>Get whether an aim model is applied. <pre><code>qtm.settings.processing.aim.get_model_is_applied(source, path)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>path</code> <code>string</code> The path of the aim model.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.aim.html#set_model_is_applied", "title": "set_model_is_applied", "text": "<p>Set whether an aim model is applied. <pre><code>qtm.settings.processing.aim.set_model_is_applied(source, path, is_applied)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>path</code> <code>string</code> The path of the aim model.</p> <p><code>is_applied</code> <code>bool</code> True if the aim model should be applied, otherwise false.</p>"}, {"location": "qtm.settings.processing.aim.html#get_model_application_count", "title": "get_model_application_count", "text": "<p>Get the number of applications of an aim model. <pre><code>qtm.settings.processing.aim.get_model_application_count(source, path)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>path</code> <code>string</code> The path of the aim model.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.aim.html#set_model_application_count", "title": "set_model_application_count", "text": "<p>Set the number of applications of an aim model. <pre><code>qtm.settings.processing.aim.set_model_application_count(source, path, count)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>path</code> <code>string</code> The path of the aim model.</p> <p><code>count</code> <code>integer</code> The number of applications of the aim model.</p>"}, {"location": "qtm.settings.processing.aim.html#get_relative_bone_length_tolerance", "title": "get_relative_bone_length_tolerance", "text": "<p>Get the relative bone length tolerance. <pre><code>qtm.settings.processing.aim.get_relative_bone_length_tolerance(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.settings.processing.aim.html#set_relative_bone_length_tolerance", "title": "set_relative_bone_length_tolerance", "text": "<p>Set the relative bone length tolerance. <pre><code>qtm.settings.processing.aim.set_relative_bone_length_tolerance(source, tolerance)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>tolerance</code> <code>float</code> The relative bone length tolerance (in percent). Must be within the [1.0, 75.0] range.</p>"}, {"location": "qtm.settings.processing.aim.html#get_keep_existing_labels", "title": "get_keep_existing_labels", "text": "<p>Get whether to keep existing labels in applied aim models. <pre><code>qtm.settings.processing.aim.get_keep_existing_labels(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.aim.html#set_keep_existing_labels", "title": "set_keep_existing_labels", "text": "<p>Set whether to keep existing labels in applied aim models. <pre><code>qtm.settings.processing.aim.set_keep_existing_labels(source, enable)\n</code></pre></p> <p>This setting is reset after each use.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if existing labels should be kept, otherwise false.</p>"}, {"location": "qtm.settings.processing.aim.html#get_randomize_bone_colors", "title": "get_randomize_bone_colors", "text": "<p>Get whether to randomize bone colors for each applied aim model. <pre><code>qtm.settings.processing.aim.get_randomize_bone_colors(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.aim.html#set_randomize_bone_colors", "title": "set_randomize_bone_colors", "text": "<p>Set whether to randomize bone colors for each applied aim model. <pre><code>qtm.settings.processing.aim.set_randomize_bone_colors(source, enable)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if bone colors should be randomized, otherwise false.</p>"}, {"location": "qtm.settings.processing.aim.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.settings.processing.aim.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing.html", "title": "qtm.settings.processing", "text": "<p>Access and modify processing settings.</p>"}, {"location": "qtm.settings.processing.html#get_process_every_frame", "title": "get_process_every_frame", "text": "<p>Get whether to process every frame during realtime. <pre><code>qtm.settings.processing.get_process_every_frame()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_process_every_frame", "title": "set_process_every_frame", "text": "<p>Set whether to process every frame during realtime. <pre><code>qtm.settings.processing.set_process_every_frame(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if every frame should be processed, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_store_realtime", "title": "get_store_realtime", "text": "<p>Get whether to store realtime data during capture. <pre><code>qtm.settings.processing.get_store_realtime()\n</code></pre></p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_store_realtime", "title": "set_store_realtime", "text": "<p>Set whether to store realtime data during capture. <pre><code>qtm.settings.processing.set_store_realtime(enable)\n</code></pre></p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if realtime data should be stored, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_auto_backup", "title": "get_auto_backup", "text": "<p>Get whether to automatically backup files before processing. <pre><code>qtm.settings.processing.get_auto_backup(type)\n</code></pre></p> <p>This method requires 'capture' or 'batch' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_auto_backup", "title": "set_auto_backup", "text": "<p>Set whether to automatically backup files before processing. <pre><code>qtm.settings.processing.set_auto_backup(type, enable)\n</code></pre></p> <p>This method requires 'capture' or 'batch' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if files should be automatically backed up before processing, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_process_2d", "title": "get_process_2d", "text": "<p>Get whether to process 2d data. <pre><code>qtm.settings.processing.get_process_2d(type)\n</code></pre></p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_process_2d", "title": "set_process_2d", "text": "<p>Set whether to process 2d data. <pre><code>qtm.settings.processing.set_process_2d(type, enable)\n</code></pre></p> <p>This method requires post-processing to be enabled during capture (see 'set_store_realtime').</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if 2d data should be processed, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_track_2d", "title": "get_track_2d", "text": "<p>Get whether to track 2d data. <pre><code>qtm.settings.processing.get_track_2d(type)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_track_2d", "title": "set_track_2d", "text": "<p>Set whether to track 2d data. <pre><code>qtm.settings.processing.set_track_2d(type, enable)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type. Additionally, post-processing must be enabled during capture (see 'set_store_realtime').</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if 2d data should be tracked, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_track_3d", "title": "get_track_3d", "text": "<p>Get whether to track 3d data. <pre><code>qtm.settings.processing.get_track_3d(type)\n</code></pre></p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_track_3d", "title": "set_track_3d", "text": "<p>Set whether to track 3d data. <pre><code>qtm.settings.processing.set_track_3d(type, enable)\n</code></pre></p> <p>This method requires post-processing to be enabled during capture (see 'set_store_realtime').</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if 3d data should be tracked, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_merge_twin", "title": "get_merge_twin", "text": "<p>Get whether to merge with twin slave. <pre><code>qtm.settings.processing.get_merge_twin(type)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_merge_twin", "title": "set_merge_twin", "text": "<p>Set whether to merge with twin slave. <pre><code>qtm.settings.processing.set_merge_twin(type, enable)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type. Additionally, post-processing must be enabled during capture (see 'set_store_realtime').</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if twin slave should be merged with, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_fill_gaps", "title": "get_fill_gaps", "text": "<p>Get whether to fill gaps. <pre><code>qtm.settings.processing.get_fill_gaps(type)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_fill_gaps", "title": "set_fill_gaps", "text": "<p>Set whether to fill gaps. <pre><code>qtm.settings.processing.set_fill_gaps(type, enable)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type. Additionally, tracking must be enabled during capture (see 'set_track_2d' and 'set_track_3d').</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if gaps should be filled, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_apply_aim", "title": "get_apply_aim", "text": "<p>Get whether to apply aim (automatic identification of markers). <pre><code>qtm.settings.processing.get_apply_aim(type)\n</code></pre></p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_apply_aim", "title": "set_apply_aim", "text": "<p>Set whether to apply aim (automatic identification of markers). <pre><code>qtm.settings.processing.set_apply_aim(type, enable)\n</code></pre></p> <p>This method requires tracking to be enabled during realtime and capture (see 'set_track_2d' and 'set_track_3d').</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if aim should be applied, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_calculate_6d", "title": "get_calculate_6d", "text": "<p>Get whether to calculate 6dof. <pre><code>qtm.settings.processing.get_calculate_6d(type)\n</code></pre></p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_calculate_6d", "title": "set_calculate_6d", "text": "<p>Set whether to calculate 6dof. <pre><code>qtm.settings.processing.set_calculate_6d(type, enable)\n</code></pre></p> <p>This method requires tracking to be enabled during realtime and capture (see 'set_track_2d' and 'set_track_3d').</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if 6dof should be calculated, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_solve_skeletons", "title": "get_solve_skeletons", "text": "<p>Get whether to solve skeletons. <pre><code>qtm.settings.processing.get_solve_skeletons(type)\n</code></pre></p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_solve_skeletons", "title": "set_solve_skeletons", "text": "<p>Set whether to solve skeletons. <pre><code>qtm.settings.processing.set_solve_skeletons(type, enable)\n</code></pre></p> <p>This method requires labeling to be enabled during realtime and capture (see 'set_apply_aim' and 'set_calculate_6d').</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if skeletons should be solved, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_apply_glove", "title": "get_apply_glove", "text": "<p>Get whether to apply glove data. <pre><code>qtm.settings.processing.get_apply_glove(type)\n</code></pre></p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_apply_glove", "title": "set_apply_glove", "text": "<p>Set whether to apply glove data. <pre><code>qtm.settings.processing.set_apply_glove(type, enable)\n</code></pre></p> <p>This method requires skeleton solving to be enabled during realtime and capture (see 'set_solve_skeletons').</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if glove data should be applied, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_apply_sal", "title": "get_apply_sal", "text": "<p>Get whether to apply sal (skeleton assisted labeling). <pre><code>qtm.settings.processing.get_apply_sal(type)\n</code></pre></p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_apply_sal", "title": "set_apply_sal", "text": "<p>Set whether to apply sal (skeleton assisted labeling). <pre><code>qtm.settings.processing.set_apply_sal(type, enable)\n</code></pre></p> <p>This method requires skeleton solving to be enabled during realtime and capture (see 'set_solve_skeletons').</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if sal should be applied, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_calculate_force", "title": "get_calculate_force", "text": "<p>Get whether to calculate force data. <pre><code>qtm.settings.processing.get_calculate_force(type)\n</code></pre></p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_calculate_force", "title": "set_calculate_force", "text": "<p>Set whether to calculate force data. <pre><code>qtm.settings.processing.set_calculate_force(type, enable)\n</code></pre></p> <p>This method requires post-processing to be enabled during capture (see 'set_store_realtime').</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if force data should be calculated, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_calculate_gaze", "title": "get_calculate_gaze", "text": "<p>Get whether to calculate gaze data. <pre><code>qtm.settings.processing.get_calculate_gaze(type)\n</code></pre></p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_calculate_gaze", "title": "set_calculate_gaze", "text": "<p>Set whether to calculate gaze data. <pre><code>qtm.settings.processing.set_calculate_gaze(type, enable)\n</code></pre></p> <p>This method requires 6dof to be enabled during realtime and capture (see 'set_calculate_6d').</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if gaze data should be calculated, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_export_tsv", "title": "get_export_tsv", "text": "<p>Get whether to export tsv. <pre><code>qtm.settings.processing.get_export_tsv(type)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_export_tsv", "title": "set_export_tsv", "text": "<p>Set whether to export tsv. <pre><code>qtm.settings.processing.set_export_tsv(type, enable)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if tsv should be exported, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_export_c3d", "title": "get_export_c3d", "text": "<p>Get whether to export c3d. <pre><code>qtm.settings.processing.get_export_c3d(type)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_export_c3d", "title": "set_export_c3d", "text": "<p>Set whether to export c3d. <pre><code>qtm.settings.processing.set_export_c3d(type, enable)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if c3d should be exported, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_export_mat", "title": "get_export_mat", "text": "<p>Get whether to export mat. <pre><code>qtm.settings.processing.get_export_mat(type)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_export_mat", "title": "set_export_mat", "text": "<p>Set whether to export mat. <pre><code>qtm.settings.processing.set_export_mat(type, enable)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if mat should be exported, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_export_avi", "title": "get_export_avi", "text": "<p>Get whether to export avi. <pre><code>qtm.settings.processing.get_export_avi(type)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_export_avi", "title": "set_export_avi", "text": "<p>Set whether to export avi. <pre><code>qtm.settings.processing.set_export_avi(type, enable)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if avi should be exported, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_export_fbx", "title": "get_export_fbx", "text": "<p>Get whether to export fbx. <pre><code>qtm.settings.processing.get_export_fbx(type)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_export_fbx", "title": "set_export_fbx", "text": "<p>Set whether to export fbx. <pre><code>qtm.settings.processing.set_export_fbx(type, enable)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if fbx should be exported, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_export_json", "title": "get_export_json", "text": "<p>Get whether to export json. <pre><code>qtm.settings.processing.get_export_json(type)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_export_json", "title": "set_export_json", "text": "<p>Set whether to export json. <pre><code>qtm.settings.processing.set_export_json(type, enable)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if json should be exported, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#get_start_program", "title": "get_start_program", "text": "<p>Get whether to start a program. <pre><code>qtm.settings.processing.get_start_program(type)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing.html#set_start_program", "title": "set_start_program", "text": "<p>Set whether to start a program. <pre><code>qtm.settings.processing.set_start_program(type, enable)\n</code></pre></p> <p>This method requires 'capture', 'batch', 'reprocess' or 'force' processing type.</p> <p>Parameters</p> <p><code>type</code> <code>\"realtime\"|\"capture\"|\"batch\"|\"reprocess\"|\"force\"</code> The processing type.</p> <p><code>enable</code> <code>bool</code> True if a program should be started, otherwise false.</p>"}, {"location": "qtm.settings.processing.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.settings.processing.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html", "title": "qtm.settings.processing.skeleton", "text": "<p>Access and modify skeleton processing settings.</p>"}, {"location": "qtm.settings.processing.skeleton.html#add_skeleton", "title": "add_skeleton", "text": "<p>Add a skeleton. <pre><code>qtm.settings.processing.skeleton.add_skeleton(source, name)\n</code></pre></p> <p>A root segment will be added automatically. If a skeleton with the same name already exists, it will be overwritten.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>name</code> <code>string</code> The name of the skeleton.</p> <p>Returns</p> <p><code>integer</code> The identifier of the added skeleton.</p>"}, {"location": "qtm.settings.processing.skeleton.html#add_segment", "title": "add_segment", "text": "<p>Add a segment to a skeleton. <pre><code>qtm.settings.processing.skeleton.add_segment(source, parent_id, name)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>parent_id</code> <code>integer</code> The parent segment identifier.</p> <p><code>name</code> <code>string</code> The name of the segment.</p> <p>Returns</p> <p><code>integer</code> The identifier of the added segment.</p>"}, {"location": "qtm.settings.processing.skeleton.html#delete_skeleton", "title": "delete_skeleton", "text": "<p>Delete a skeleton. <pre><code>qtm.settings.processing.skeleton.delete_skeleton(source, skeleton_id)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p>"}, {"location": "qtm.settings.processing.skeleton.html#delete_segment", "title": "delete_segment", "text": "<p>Delete a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.delete_segment(source, segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p>"}, {"location": "qtm.settings.processing.skeleton.html#clear_skeletons", "title": "clear_skeletons", "text": "<p>Delete all skeletons. <pre><code>qtm.settings.processing.skeleton.clear_skeletons(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_skeleton_id", "title": "get_skeleton_id", "text": "<p>Get a skeleton identifier by index. <pre><code>qtm.settings.processing.skeleton.get_skeleton_id(source, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the skeleton.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_skeleton_ids", "title": "get_skeleton_ids", "text": "<p>Get all skeleton identifiers. <pre><code>qtm.settings.processing.skeleton.get_skeleton_ids(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_skeleton_count", "title": "get_skeleton_count", "text": "<p>Get the number of skeletons. <pre><code>qtm.settings.processing.skeleton.get_skeleton_count(source)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_skeleton_name", "title": "get_skeleton_name", "text": "<p>Get the name of a skeleton. <pre><code>qtm.settings.processing.skeleton.get_skeleton_name(source, skeleton_id)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#set_skeleton_name", "title": "set_skeleton_name", "text": "<p>Set the name of a skeleton. <pre><code>qtm.settings.processing.skeleton.set_skeleton_name(source, skeleton_id, name)\n</code></pre></p> <p>If a skeleton with the same name already exists, it will be overwritten.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p><code>name</code> <code>string</code> The name of the skeleton.</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_skeleton_scale", "title": "get_skeleton_scale", "text": "<p>Get the scale of a skeleton. <pre><code>qtm.settings.processing.skeleton.get_skeleton_scale(source, skeleton_id)\n</code></pre></p> <p>The scale represents the size of the skeleton relative to e.g. an avatar. It is used when exporting and streaming such that the scale of the output is always 1.0.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#set_skeleton_scale", "title": "set_skeleton_scale", "text": "<p>Set the scale of a skeleton. <pre><code>qtm.settings.processing.skeleton.set_skeleton_scale(source, skeleton_id, scale)\n</code></pre></p> <p>The scale represents the size of the skeleton relative to e.g. an avatar. It is used when exporting and streaming such that the scale of the output is always 1.0.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p><code>scale</code> <code>float</code> The scale of the skeleton. Must be within the [0.01, 100.0] range.</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_skeleton_root_id", "title": "get_skeleton_root_id", "text": "<p>Get the root segment identifier in a skeleton. <pre><code>qtm.settings.processing.skeleton.get_skeleton_root_id(source, skeleton_id)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_id", "title": "get_segment_id", "text": "<p>Get a segment identifier in a skeleton by index. <pre><code>qtm.settings.processing.skeleton.get_segment_id(source, skeleton_id, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p><code>index</code> <code>integer</code> The segment index.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_ids", "title": "get_segment_ids", "text": "<p>Get all segment identifiers in a skeleton. <pre><code>qtm.settings.processing.skeleton.get_segment_ids(source, skeleton_id)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_count", "title": "get_segment_count", "text": "<p>Get the number of segments in a skeleton. <pre><code>qtm.settings.processing.skeleton.get_segment_count(source, skeleton_id)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_name", "title": "get_segment_name", "text": "<p>Get the name of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.get_segment_name(source, segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#set_segment_name", "title": "set_segment_name", "text": "<p>Set the name of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.set_segment_name(source, segment_id, name)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>name</code> <code>string</code> The name of the segment.</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_solver", "title": "get_segment_solver", "text": "<p>Get the solver of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.get_segment_solver(source, segment_id)\n</code></pre></p> <p>A skeleton can have multiple solvers (e.g. the hands may be solved separately from the rest of the body). In this case, the solving will be done in a hierarchical manner, starting with the root (which must have a solver). Descendant body parts are then solved locally in the coordinate systems of their parent segments.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>\"none\"|\"global_optimization\"?</code> The segment solver (or null, if the segment is solved together with its ancestors).</p>"}, {"location": "qtm.settings.processing.skeleton.html#set_segment_solver", "title": "set_segment_solver", "text": "<p>Set the solver of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.set_segment_solver(source, segment_id, solver?)\n</code></pre></p> <p>A skeleton can have multiple solvers (e.g. the hands may be solved separately from the rest of the body). In this case, the solving will be done in a hierarchical manner, starting with the root (which must have a solver). Descendant body parts are then solved locally in the coordinate systems of their parent segments.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>solver</code> <code>\"none\"|\"global_optimization\"?</code> The segment solver (if null, the segment will be solved together with its ancestors).</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_transform", "title": "get_segment_transform", "text": "<p>Get the transform of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.get_segment_transform(source, segment_id)\n</code></pre></p> <p>The transform represents the calibrated pose of the skeleton, and is used as the initial solution when solving.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>mat4x4f</code> The segment transform (in local coordinates with translation in millimeters).</p>"}, {"location": "qtm.settings.processing.skeleton.html#set_segment_transform", "title": "set_segment_transform", "text": "<p>Set the transform of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.set_segment_transform(source, segment_id, transform)\n</code></pre></p> <p>The transform represents the calibrated pose of the skeleton, and is used as the initial solution when solving.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>transform</code> <code>mat4x4f</code> The segment transform (in local coordinates with translation in millimeters).</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_default_transform", "title": "get_segment_default_transform", "text": "<p>Get the default transform of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.get_segment_default_transform(source, segment_id)\n</code></pre></p> <p>The default transform brings skeletons with different zero poses (the pose where all segment rotations are zero) to the same default pose (e.g. a t-pose). This is mainly used for retargeting.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>mat4x4f</code> The segment default transform (in local coordinates with translation in millimeters).</p>"}, {"location": "qtm.settings.processing.skeleton.html#set_segment_default_transform", "title": "set_segment_default_transform", "text": "<p>Set the default transform of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.set_segment_default_transform(source, segment_id, transform)\n</code></pre></p> <p>The default transform brings skeletons with different zero poses (the pose where all segment rotations are zero) to the same default pose (e.g. a t-pose). This is mainly used for retargeting.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>transform</code> <code>mat4x4f</code> The segment default transform (in local coordinates with translation in millimeters).</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_degrees_of_freedom", "title": "get_segment_degrees_of_freedom", "text": "<p>Get the degrees of freedom of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.get_segment_degrees_of_freedom(source, segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>{\"rotation_x\"|\"rotation_y\"|\"rotation_z\"|\"translation_x\"|\"translation_y\"|\"translation_z\": {\"constraint\": {\"lower_bound\": float, \"upper_bound\": float}?, \"couplings\": [{\"segment\": string, \"degree_of_freedom\": \"rotation_x\"|\"rotation_y\"|\"rotation_z\"|\"translation_x\"|\"translation_y\"|\"translation_z\", \"coefficient\": float}], \"goal\": {\"value\": float, \"weight\": float}?}}</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#set_segment_degrees_of_freedom", "title": "set_segment_degrees_of_freedom", "text": "<p>Set the degrees of freedom of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.set_segment_degrees_of_freedom(source, segment_id, degrees_of_freedom)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>degrees_of_freedom</code> <code>{\"rotation_x\"|\"rotation_y\"|\"rotation_z\"|\"translation_x\"|\"translation_y\"|\"translation_z\": {\"constraint\": {\"lower_bound\": float, \"upper_bound\": float}?, \"couplings\": [{\"segment\": string, \"degree_of_freedom\": \"rotation_x\"|\"rotation_y\"|\"rotation_z\"|\"translation_x\"|\"translation_y\"|\"translation_z\", \"coefficient\": float}], \"goal\": {\"value\": float, \"weight\": float}?}}</code> The segment degrees of freedom.</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_endpoint", "title": "get_segment_endpoint", "text": "<p>Get the endpoint of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.get_segment_endpoint(source, segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>vec3f?</code> The segment endpoint (in local coordinates and millimeters). Or null, if the segment has children.</p>"}, {"location": "qtm.settings.processing.skeleton.html#set_segment_endpoint", "title": "set_segment_endpoint", "text": "<p>Set the endpoint of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.set_segment_endpoint(source, segment_id, endpoint?)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>endpoint</code> <code>vec3f?</code> The segment endpoint (in local coordinates and millimeters). If null, the segment is assumed to have children.</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_markers", "title": "get_segment_markers", "text": "<p>Get the markers of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.get_segment_markers(source, segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>[{\"name\": string, \"position\": vec3f, \"weight\": float}]</code> The segment markers (with positions in local coordinates and millimeters).</p>"}, {"location": "qtm.settings.processing.skeleton.html#set_segment_markers", "title": "set_segment_markers", "text": "<p>Set the markers of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.set_segment_markers(source, segment_id, markers)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>markers</code> <code>[{\"name\": string, \"position\": vec3f, \"weight\": float}]</code> The segment markers (with positions in local coordinates and millimeters).</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_rigid_bodies", "title": "get_segment_rigid_bodies", "text": "<p>Get the rigid bodies of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.get_segment_rigid_bodies(source, segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>[{\"name\": string, \"transform\": mat4x4f, \"weight\": float}]</code> The segment rigid bodies (with transforms in local coordinates and translations in millimeters).</p>"}, {"location": "qtm.settings.processing.skeleton.html#set_segment_rigid_bodies", "title": "set_segment_rigid_bodies", "text": "<p>Set the rigid bodies of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.set_segment_rigid_bodies(source, segment_id, rigid_bodies)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>rigid_bodies</code> <code>[{\"name\": string, \"transform\": mat4x4f, \"weight\": float}]</code> The segment rigid bodies (with transforms in local coordinates and translations in millimeters).</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_skeleton_id", "title": "get_segment_skeleton_id", "text": "<p>Get the skeleton identifier of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.get_segment_skeleton_id(source, segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_parent_id", "title": "get_segment_parent_id", "text": "<p>Get the parent segment identifier of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.get_segment_parent_id(source, segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>integer?</code> The parent segment identifier (or null, if the segment is the root).</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_child_id", "title": "get_segment_child_id", "text": "<p>Get a child segment identifier of a segment in a skeleton by index. <pre><code>qtm.settings.processing.skeleton.get_segment_child_id(source, segment_id, index)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>index</code> <code>integer</code> The child index.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_child_ids", "title": "get_segment_child_ids", "text": "<p>Get all child segment identifiers of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.get_segment_child_ids(source, segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_child_count", "title": "get_segment_child_count", "text": "<p>Get the number of child segments of a segment in a skeleton. <pre><code>qtm.settings.processing.skeleton.get_segment_child_count(source, segment_id)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#find_skeleton", "title": "find_skeleton", "text": "<p>Find a skeleton by name. <pre><code>qtm.settings.processing.skeleton.find_skeleton(source, name)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>name</code> <code>string</code> The name of the skeleton.</p> <p>Returns</p> <p><code>integer?</code> The identifier of the found skeleton (or null, if no skeleton was found).</p>"}, {"location": "qtm.settings.processing.skeleton.html#find_segment", "title": "find_segment", "text": "<p>Find a segment in a skeleton by name. <pre><code>qtm.settings.processing.skeleton.find_segment(source, skeleton_id, name)\n</code></pre></p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p><code>name</code> <code>string</code> The name of the segment.</p> <p>Returns</p> <p><code>integer?</code> The identifier of the found segment (or null, if no segment was found).</p>"}, {"location": "qtm.settings.processing.skeleton.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.settings.processing.skeleton.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.color.html", "title": "qtm.utilities.color", "text": "<p>Utilities for converting various color models to a qtm compatible format.</p>"}, {"location": "qtm.utilities.color.html#rgb", "title": "rgb", "text": "<p>Make a color from rgb values (red, green, blue). <pre><code>qtm.utilities.color.rgb(r, g, b)\n</code></pre></p> <p>Parameters</p> <p><code>r</code> <code>float</code> The red value (in the [0.0, 1.0] range).</p> <p><code>g</code> <code>float</code> The green value (in the [0.0, 1.0] range).</p> <p><code>b</code> <code>float</code> The blue value (in the [0.0, 1.0] range).</p> <p>Returns</p> <p><code>integer</code> The color (in 0xbbggrr format).</p>"}, {"location": "qtm.utilities.color.html#hsl", "title": "hsl", "text": "<p>Make a color from hsl values (hue, saturation, lightness). <pre><code>qtm.utilities.color.hsl(h, s, l)\n</code></pre></p> <p>Parameters</p> <p><code>h</code> <code>float</code> The hue value (in the [0.0, 360.0] range).</p> <p><code>s</code> <code>float</code> The saturation value (in the [0.0, 1.0] range).</p> <p><code>l</code> <code>float</code> The lightness value (in the [0.0, 1.0] range).</p> <p>Returns</p> <p><code>integer</code> The color (in 0xbbggrr format).</p>"}, {"location": "qtm.utilities.color.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.utilities.color.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html", "title": "qtm.utilities.documentation", "text": "<p>Various documentation utilities.</p>"}, {"location": "qtm.utilities.documentation.html#get_package_name", "title": "get_package_name", "text": "<p>Get the name of the package. <pre><code>qtm.utilities.documentation.get_package_name()\n</code></pre></p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_package_documentation", "title": "get_package_documentation", "text": "<p>Get the complete documentation of the package. <pre><code>qtm.utilities.documentation.get_package_documentation()\n</code></pre></p> <p>Returns</p> <p><code>{\"name\": string, \"modules\": [{\"path\": string, \"brief\": string, \"details\": string, \"methods\": [{\"name\": string, \"brief\": string, \"details\": string, \"parameters\": [{\"name\": string, \"type\": string, \"description\": string}], \"return_value\": {\"type\": string, \"description\": string}?}]}]}</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_module_count", "title": "get_module_count", "text": "<p>Get the number of modules in the package. <pre><code>qtm.utilities.documentation.get_module_count()\n</code></pre></p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_module_path", "title": "get_module_path", "text": "<p>Get the path of a module. <pre><code>qtm.utilities.documentation.get_module_path(module_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_module_brief", "title": "get_module_brief", "text": "<p>Get the brief description of a module. <pre><code>qtm.utilities.documentation.get_module_brief(module_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_module_details", "title": "get_module_details", "text": "<p>Get the detailed description of a module. <pre><code>qtm.utilities.documentation.get_module_details(module_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_module_documentation", "title": "get_module_documentation", "text": "<p>Get the complete documentation of a module. <pre><code>qtm.utilities.documentation.get_module_documentation(module_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p>Returns</p> <p><code>{\"path\": string, \"brief\": string, \"details\": string, \"methods\": [{\"name\": string, \"brief\": string, \"details\": string, \"parameters\": [{\"name\": string, \"type\": string, \"description\": string}], \"return_value\": {\"type\": string, \"description\": string}?}]}</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_method_count", "title": "get_method_count", "text": "<p>Get the number of methods in a module. <pre><code>qtm.utilities.documentation.get_method_count(module_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_method_name", "title": "get_method_name", "text": "<p>Get the name of a method in a module. <pre><code>qtm.utilities.documentation.get_method_name(module_index, method_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_method_brief", "title": "get_method_brief", "text": "<p>Get the brief description of a method in a module. <pre><code>qtm.utilities.documentation.get_method_brief(module_index, method_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_method_details", "title": "get_method_details", "text": "<p>Get the detailed description of a method in a module. <pre><code>qtm.utilities.documentation.get_method_details(module_index, method_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_method_signature", "title": "get_method_signature", "text": "<p>Get the signature of a method in a module. <pre><code>qtm.utilities.documentation.get_method_signature(module_index, method_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_method_documentation", "title": "get_method_documentation", "text": "<p>Get the complete documentation of a method in a module. <pre><code>qtm.utilities.documentation.get_method_documentation(module_index, method_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>{\"name\": string, \"brief\": string, \"details\": string, \"parameters\": [{\"name\": string, \"type\": string, \"description\": string}], \"return_value\": {\"type\": string, \"description\": string}?}</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_parameter_count", "title": "get_parameter_count", "text": "<p>Get the number of parameters in a method. <pre><code>qtm.utilities.documentation.get_parameter_count(module_index, method_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_parameter_name", "title": "get_parameter_name", "text": "<p>Get the name of a parameter in a method. <pre><code>qtm.utilities.documentation.get_parameter_name(module_index, method_index, parameter_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p><code>parameter_index</code> <code>integer</code> The index of the parameter.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_parameter_type", "title": "get_parameter_type", "text": "<p>Get the type of a parameter in a method. <pre><code>qtm.utilities.documentation.get_parameter_type(module_index, method_index, parameter_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p><code>parameter_index</code> <code>integer</code> The index of the parameter.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_parameter_description", "title": "get_parameter_description", "text": "<p>Get the description of a parameter in a method. <pre><code>qtm.utilities.documentation.get_parameter_description(module_index, method_index, parameter_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p><code>parameter_index</code> <code>integer</code> The index of the parameter.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_parameter_documentation", "title": "get_parameter_documentation", "text": "<p>Get the complete documentation of a parameter in a method. <pre><code>qtm.utilities.documentation.get_parameter_documentation(module_index, method_index, parameter_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p><code>parameter_index</code> <code>integer</code> The index of the parameter.</p> <p>Returns</p> <p><code>{\"name\": string, \"type\": string, \"description\": string}</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_return_value_type", "title": "get_return_value_type", "text": "<p>Get the type of the return value in a method. <pre><code>qtm.utilities.documentation.get_return_value_type(module_index, method_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>string?</code> The return value type (or null, if method isn't returning a value).</p>"}, {"location": "qtm.utilities.documentation.html#get_return_value_description", "title": "get_return_value_description", "text": "<p>Get the description of the return value in a method. <pre><code>qtm.utilities.documentation.get_return_value_description(module_index, method_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>string?</code> The return value description (or null, if method isn't returning a value).</p>"}, {"location": "qtm.utilities.documentation.html#get_return_value_documentation", "title": "get_return_value_documentation", "text": "<p>Get the complete documentation of the return value in a method. <pre><code>qtm.utilities.documentation.get_return_value_documentation(module_index, method_index)\n</code></pre></p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>{\"type\": string, \"description\": string}?</code> The return value documentation (or null, if method isn't returning a value).</p>"}, {"location": "qtm.utilities.documentation.html#get_help_text", "title": "get_help_text", "text": "<p>Get the help text for a given topic. <pre><code>qtm.utilities.documentation.get_help_text(topic?)\n</code></pre></p> <p>This method is used internally by the global 'help' function.</p> <p>Parameters</p> <p><code>topic</code> <code>\"overview\"|\"modules\"|\"types\"|\"signatures\"|\"changelog\"?</code> The help topic.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.utilities.documentation.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.math.html", "title": "qtm.utilities.math", "text": "<p>Various math utilities.</p> <p>This module has not yet been implemented.</p>"}, {"location": "qtm.utilities.math.html#help", "title": "help", "text": "<p>Get the documentation for a module or method. <pre><code>qtm.utilities.math.help(method?)\n</code></pre></p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "types.html", "title": "Types", "text": "Type Description bool Boolean (true or false). integer 64-bit signed integer. float 64-bit floating-point number. string 8-bit ansi string (codepage depends on the user settings in windows). function Any callable object such as a function or a lambda. enumeration String from a predefined set (e.g. \"enumerator1\"|\"enumerator2\" can be either \"enumerator1\" or \"enumerator2\"). matrix NxM matrix or 1xM vector with integer or float values (e.g. mat4x4f means a 4x4 matrix of floats, and vec3i means a 1x3 vector of integers). structure Map with predefined string keys (e.g. {\"field1\": integer, \"field2\": vec3f}). optional Nullable (e.g. bool? can be either a bool or null). vector List/array (e.g. [float] means a vector with float elements). For linear algebra vectors, see 'matrix' above. map Dictionary/table (e.g. {integer: string} means a map with integer keys and string values)."}]}