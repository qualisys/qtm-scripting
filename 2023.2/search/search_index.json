{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "index.html", "title": "QTM Scripting Interface", "text": "<p>The QTM Scripting Interface provides scripting support for QTM (Qualisys Track Manager). Scripting is supported through both Python and Lua. Additionally, the QTM Scripting Interface is also exposed through a REST API.</p> <p>The API's functionality (that is, what QTM functionality can be accessed) is exposed through a number of modules. This documentation provides a language agnostic description of the modules. For more details, see the list of modules. Below follows some short examples:</p> PythonLuaREST <pre><code>from qtm.data.series import _3d\nfrom qtm.data.object import trajectory\n# Get the data series identifier of a trajectory with the label \"F_HeadFront\".\nid = trajectory.find_trajectory(\"F_HeadFront\")\n# Get the first sample of this trajectory.\n_3d.get_sample(id, 0)\n# {'position': [-1193.8392806851402, 1428.9096641692772, 1677.330950395389], 'residual': 1.933161315987386}\n</code></pre> <pre><code>-- Get the data series identifier of a trajectory with the label \"F_HeadFront\".\nid = qtm.data.object.trajectory.find_trajectory(\"F_HeadFront\")\n-- Get the first sample of this trajectory.\nqtm.data.series._3d.get_sample(id, 0)\n-- {position = {-1193.8392806851, 1428.9096641693, 1677.3309503954}, residual = 1.9331613159874}\n</code></pre> <pre><code>curl --json \"[\\\"F_HeadFront\\\"]\" http://localhost:7979/api/scripting/qtm/data/object/trajectory/find_trajectory\n::  2985\ncurl --json \"[2985, 0]\" http://localhost:7979/api/scripting/qtm/data/series/_3d/get_sample\n:: {\"position\":[-1193.8392806851402,1428.9096641692772,1677.330950395389],\"residual\":1.9331613159873859}\n</code></pre>"}, {"location": "changelog.html", "title": "Changelog", "text": "Version Changes 2023.2 Initial release."}, {"location": "modules.html", "title": "Modules", "text": "<ul> <li>qtm - Interface to the qtm application.</li> <li>qtm.data.object.event - Access and modify events.</li> <li>qtm.data.object.skeleton - Access skeletons.</li> <li>qtm.data.object.trajectory - Access and modify trajectories.</li> <li>qtm.data.series._2d - Access 2d data series.</li> <li>qtm.data.series._3d - Access and modify 3d data series.</li> <li>qtm.data.series._6d - Access 6dof data series.</li> <li>qtm.data.series.analog - Access analog data series.</li> <li>qtm.data.series.force - Access force data series.</li> <li>qtm.data.series.gaze - Access gaze data series.</li> <li>qtm.data.series.skeleton - Access and modify skeleton data series.</li> <li>qtm.data.series.time.irig - Access and modify irig (inter-range instrumentation group) data series.</li> <li>qtm.data.series.time.ptp - Access and modify ptp (precision time protocol) data series.</li> <li>qtm.data.series.time.smpte - Access and modify smpte (society of motion picture and television engineers) data series.</li> <li>qtm.gui - Control and customize the graphical user interface.</li> <li>qtm.gui._3d - Interface to the measurement 3d view with methods for custom drawing.</li> <li>qtm.gui.message - Interface to the messages window.</li> <li>qtm.gui.selection - Access and modify the current selection.</li> <li>qtm.gui.terminal - Interface to the terminal window.</li> <li>qtm.gui.timeline - Interface to the measurement timeline.</li> <li>qtm.settings.camera - Access and modify camera settings.</li> <li>qtm.settings.directory - Access and modify directory settings.</li> <li>qtm.settings.euler - Access and modify euler angle settings.</li> <li>qtm.settings.export.c3d - Access and modify c3d export settings.</li> <li>qtm.settings.export.fbx - Access and modify fbx export settings.</li> <li>qtm.settings.export.mat - Access and modify mat export settings.</li> <li>qtm.settings.export.tsv - Access and modify tsv export settings.</li> <li>qtm.settings.processing._2d - Access and modify 2d processing settings.</li> <li>qtm.settings.processing._3d - Access and modify 3d processing settings.</li> <li>qtm.settings.processing._6d - Access and modify 6dof processing settings.</li> <li>qtm.settings.processing.skeleton - Access and modify skeleton processing settings.</li> <li>qtm.utilities.color - Utilities for converting various color models to a qtm compatible format.</li> <li>qtm.utilities.documentation - Various documentation utilities.</li> <li>qtm.utilities.math - Various math utilities.</li> </ul>"}, {"location": "qtm.data.object.event.html", "title": "qtm.data.object.event", "text": "<p>Access and modify events.</p> <p>Events consist of a label, a time (in seconds) and an optional color (in 0xbbggrr format, see 'qtm.utilities.color' module). If the latter is null, red (0x0000ff) will be used.</p> PythonLuaREST <pre><code>import qtm\n\nprint(qtm.data.object.event.get_event_count())\n# 0\n\nevent = {\"label\": \"New Event\", \"time\": 0.0, \"color\": 255}\nqtm.data.object.event.add_event(event)\n\nprint(qtm.data.object.event.get_event_count())\n# 1\n\nprint(qtm.data.object.event.get_events())\n# [{'label': 'New Event', 'time': 0.0, 'color': 255}]\n\nqtm.data.object.event.clear_events()\n\nprint(qtm.data.object.event.get_event_count())\n# 0\n</code></pre> <pre><code>print(qtm.data.object.event.get_event_count())\n-- 0\n\nevent = {time = 0.0, color = 255, label = \"New event\"}\nqtm.data.object.event.add_event(event)\n\nprint(qtm.data.object.event.get_event_count())\n-- 1\n\nprint(qtm.data.object.event.get_events())\n-- [{'label': 'New Event', 'time': 0.0, 'color': 255}]\n\nqtm.data.object.event.clear_events()\n\nprint(qtm.data.object.event.get_event_count())\n-- 0\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/data/object/event/get_event_count/\n:: 0\n\nset event={\\\"color\\\":255,\\\"label\\\":\\\"New event\\\",\\\"time\\\":1.2625}\ncurl --json \"[%event%]\" http://localhost:7979/api/scripting/qtm/data/object/event/add_event/\n\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/data/object/event/get_event_count/\n:: 1\n\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/data/object/event/get_events/\n:: # [{\"color\":255,\"label\":\"New event\",\"time\":1.2625}]\n\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/data/object/event/clear_events/\n\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/data/object/event/get_event_count/\n:: 0\n</code></pre>"}, {"location": "qtm.data.object.event.html#add_event", "title": "add_event", "text": "<p>Add an event.</p> <p>Parameters</p> <p><code>event</code> <code>{\"label\": string, \"time\": float, \"color\": integer?}</code> The event to add.</p>"}, {"location": "qtm.data.object.event.html#get_event_count", "title": "get_event_count", "text": "<p>Get the total number of events.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.event.html#get_events", "title": "get_events", "text": "<p>Get all events.</p> <p>Returns</p> <p><code>[{\"label\": string, \"time\": float, \"color\": integer?}]</code> </p>"}, {"location": "qtm.data.object.event.html#clear_events", "title": "clear_events", "text": "<p>Delete all events.</p>"}, {"location": "qtm.data.object.event.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.object.skeleton.html", "title": "qtm.data.object.skeleton", "text": "<p>Access skeletons.</p> PythonLuaREST <pre><code>import qtm\n\nskeleton_ids = qtm.data.object.skeleton.get_skeleton_ids()\nprint(skeleton_ids)\n# [8495, 8651]\n\nskeleton_name = qtm.data.object.skeleton.get_skeleton_name(skeleton_ids[0])\nprint(skeleton_name)\n# Eli\n\nprint(qtm.data.object.skeleton.find_skeleton(skeleton_name))\n# 8495\n\nsegment_ids = qtm.data.object.skeleton.get_segment_ids(skeleton_ids[0])\nprint(segment_ids)\n# [8496, 8507, 8515, 8522, 8528, 8534, 8540, 8547, 8555, 8561, 8567, 8574, ... ...\n\nprint(qtm.data.object.skeleton.get_segment_name(segment_ids[0]))\n# Hips\n\nprint(qtm.data.object.skeleton.get_segment_markers(segment_ids[0]))\n# [{'name': 'WaistRFront', 'position': [120.28204047346821, 202.23087588521537, ... ...\n\nprint(qtm.data.object.skeleton.get_segment_degrees_of_freedom(segment_ids[0]))\n# {'rotation_x': {'constraint': None, 'couplings': [], 'goal': None}, 'rotation_y': ... ...\n\nsegment_child_ids = qtm.data.object.skeleton.get_segment_child_ids(segment_ids[0])\nprint(segment_child_ids)\n# [8507, 8597, 8624]\n\nprint(qtm.data.object.skeleton.get_segment_name(segment_child_ids[0]))\n# Spine\n</code></pre> <pre><code>skeleton_ids = qtm.data.object.skeleton.get_skeleton_ids()\nprint(skeleton_ids)\n-- {8495, 8651}\n\nskeleton_name = qtm.data.object.skeleton.get_skeleton_name(skeleton_ids[1])\nprint(skeleton_name)\n-- Eli\n\nprint(qtm.data.object.skeleton.find_skeleton(skeleton_name))\n-- 8495\n\nsegment_ids = qtm.data.object.skeleton.get_segment_ids(skeleton_ids[1])\nprint(segment_ids)\n-- {8496, 8507, 8515, 8522, 8528, 8534, 8540, 8547, 8555, 8561, 8567, 8574, ... ...\n\nprint(qtm.data.object.skeleton.get_segment_name(segment_ids[1]))\n-- Hips\n\nprint(qtm.data.object.skeleton.get_segment_markers(segment_ids[1]))\n-- {{weight = 1.0, name = \"WaistRFront\", position = {120.28204047347, 202.23087588522, ... ...\n\nprint(qtm.data.object.skeleton.get_segment_degrees_of_freedom(segment_ids[1]))\n-- {translation_x = {couplings = {}}, rotation_z = {couplings = {}}, rotation_x = ... ...\n\nsegment_child_ids = qtm.data.object.skeleton.get_segment_child_ids(segment_ids[1])\nprint(segment_child_ids)\n-- {8507, 8597, 8624}\n\nprint(qtm.data.object.skeleton.get_segment_name(segment_child_ids[1]))\n-- Spine\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/data/object/skeleton/get_skeleton_ids/\n:: [8495,8651]\n\nset skeleton_id=8495\ncurl --json \"[%skeleton_id%]\" http://localhost:7979/api/scripting/qtm/data/object/skeleton/get_skeleton_name/\n:: \"Eli\"\n\nset skeleton_name=\\\"Eli\\\"\ncurl --json \"[%skeleton_name%]\" http://localhost:7979/api/scripting/qtm/data/object/skeleton/find_skeleton/\n:: 8495\n\ncurl --json \"[%skeleton_id%]\" http://localhost:7979/api/scripting/qtm/data/object/skeleton/get_segment_ids/\n:: [8496,8507,8515,8522,8528,8534,8540,8547,8555,8561,8567,8574,8582,8589,8597,8603,8610,8617, ... ...\n\nset segment_id=8496\ncurl --json \"[%segment_id%]\" http://localhost:7979/api/scripting/qtm/data/object/skeleton/get_segment_name/\n:: \"Hips\"\n\ncurl --json \"[%segment_id%]\" http://localhost:7979/api/scripting/qtm/data/object/skeleton/get_segment_markers/\n:: [{\"name\":\"WaistRFront\",\"position\":[120.28204047346821,202.23087588521537,61.546423666081523], ... ...\n\ncurl --json \"[%segment_id%]\" http://localhost:7979/api/scripting/qtm/data/object/skeleton/get_segment_degrees_of_freedom/\n:: {\"rotation_x\":{\"constraint\":null,\"couplings\":[],\"goal\":null},\"rotation_y\":{\"constraint\":null, ... ...\n\ncurl --json \"[%segment_id%]\" http://localhost:7979/api/scripting/qtm/data/object/skeleton/get_segment_child_ids/\n:: [8507,8597,8624]\n\nset segment_child_id=8507\ncurl --json \"[%segment_child_id%]\" http://localhost:7979/api/scripting/qtm/data/object/skeleton/get_segment_name/\n:: \"Spine\"\n</code></pre>"}, {"location": "qtm.data.object.skeleton.html#get_skeleton_id", "title": "get_skeleton_id", "text": "<p>Get a skeleton identifier by index.</p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the skeleton.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_skeleton_ids", "title": "get_skeleton_ids", "text": "<p>Get all skeleton identifiers.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_skeleton_count", "title": "get_skeleton_count", "text": "<p>Get the number of skeletons.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_skeleton_name", "title": "get_skeleton_name", "text": "<p>Get the name of a skeleton.</p> <p>Parameters</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_skeleton_scale", "title": "get_skeleton_scale", "text": "<p>Get the scale of a skeleton.</p> <p>The scale represents the size of the skeleton relative to e.g. an avatar. It is used when exporting and streaming such that the scale of the output is always 1.0.</p> <p>Parameters</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_skeleton_root_id", "title": "get_skeleton_root_id", "text": "<p>Get the root segment identifier in a skeleton.</p> <p>Parameters</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_id", "title": "get_segment_id", "text": "<p>Get a segment identifier in a skeleton by index.</p> <p>Parameters</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p><code>index</code> <code>integer</code> The segment index.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_ids", "title": "get_segment_ids", "text": "<p>Get all segment identifiers in a skeleton.</p> <p>Parameters</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_count", "title": "get_segment_count", "text": "<p>Get the number of segments in a skeleton.</p> <p>Parameters</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_name", "title": "get_segment_name", "text": "<p>Get the name of a segment in a skeleton.</p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_solver", "title": "get_segment_solver", "text": "<p>Get the solver of a segment in a skeleton.</p> <p>A skeleton can have multiple solvers (e.g. the hands may be solved separately from the rest of the body). In this case, the solving will be done in a hierarchical manner, starting with the root (which must have a solver). Descendant body parts are then solved locally in the coordinate systems of their parent segments.</p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>\"none\"|\"global_optimization\"?</code> The segment solver (or null, if the segment is solved together with its ancestors).</p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_transform", "title": "get_segment_transform", "text": "<p>Get the transform of a segment in a skeleton.</p> <p>The transform represents the calibrated pose of the skeleton, and is used as the initial solution when solving.</p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>mat4x4f</code> The segment transform (in local coordinates with translation in millimeters).</p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_default_transform", "title": "get_segment_default_transform", "text": "<p>Get the default transform of a segment in a skeleton.</p> <p>The default transform brings skeletons with different zero poses (the pose where all segment rotations are zero) to the same default pose (e.g. a t-pose). This is mainly used for retargeting.</p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>mat4x4f</code> The segment default transform (in local coordinates with translation in millimeters).</p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_degrees_of_freedom", "title": "get_segment_degrees_of_freedom", "text": "<p>Get the degrees of freedom of a segment in a skeleton.</p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>{\"rotation_x\"|\"rotation_y\"|\"rotation_z\"|\"translation_x\"|\"translation_y\"|\"translation_z\": {\"constraint\": {\"lower_bound\": float, \"upper_bound\": float}?, \"couplings\": [{\"segment\": string, \"degree_of_freedom\": \"rotation_x\"|\"rotation_y\"|\"rotation_z\"|\"translation_x\"|\"translation_y\"|\"translation_z\", \"coefficient\": float}], \"goal\": {\"value\": float, \"weight\": float}?}}</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_endpoint", "title": "get_segment_endpoint", "text": "<p>Get the endpoint of a segment in a skeleton.</p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>vec3f?</code> The segment endpoint (in local coordinates and millimeters). Or null, if the segment has children.</p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_markers", "title": "get_segment_markers", "text": "<p>Get the markers of a segment in a skeleton.</p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>[{\"name\": string, \"position\": vec3f, \"weight\": float}]</code> The segment markers (with positions in local coordinates and millimeters).</p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_rigid_bodies", "title": "get_segment_rigid_bodies", "text": "<p>Get the rigid bodies of a segment in a skeleton.</p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>[{\"name\": string, \"transform\": mat4x4f, \"weight\": float}]</code> The segment rigid bodies (with transforms in local coordinates and translations in millimeters).</p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_skeleton_id", "title": "get_segment_skeleton_id", "text": "<p>Get the skeleton identifier of a segment in a skeleton.</p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_parent_id", "title": "get_segment_parent_id", "text": "<p>Get the parent segment identifier of a segment in a skeleton.</p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>integer?</code> The parent segment identifier (or null, if the segment is the root).</p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_child_id", "title": "get_segment_child_id", "text": "<p>Get a child segment identifier of a segment in a skeleton by index.</p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>index</code> <code>integer</code> The child index.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_child_ids", "title": "get_segment_child_ids", "text": "<p>Get all child segment identifiers of a segment in a skeleton.</p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.object.skeleton.html#get_segment_child_count", "title": "get_segment_child_count", "text": "<p>Get the number of child segments of a segment in a skeleton.</p> <p>Parameters</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.skeleton.html#find_skeleton", "title": "find_skeleton", "text": "<p>Find a skeleton by name.</p> <p>Parameters</p> <p><code>name</code> <code>string</code> The name of the skeleton.</p> <p>Returns</p> <p><code>integer?</code> The identifier of the found skeleton (or null, if no skeleton was found).</p>"}, {"location": "qtm.data.object.skeleton.html#find_segment", "title": "find_segment", "text": "<p>Find a segment in a skeleton by name.</p> <p>Parameters</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p><code>name</code> <code>string</code> The name of the segment.</p> <p>Returns</p> <p><code>integer?</code> The identifier of the found segment (or null, if no segment was found).</p>"}, {"location": "qtm.data.object.skeleton.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.object.trajectory.html", "title": "qtm.data.object.trajectory", "text": "<p>Access and modify trajectories.</p> PythonLuaREST <pre><code>import qtm\n\n# - Create an empty labeled trajectory\ntrajectory_label = \"trajectory\"\ntrajectory_id = qtm.data.object.trajectory.add_trajectory(trajectory_label)\n\n# - Get measurement range\nmeasured_range = qtm.gui.timeline.get_measured_range()\nprint(measured_range)\n# {'start': 0, 'end': 2999}\n\n# - Generate dummy 3d data\ndummy_3d_data = []\nfor x_value in range(measured_range[\"start\"], measured_range[\"end\"]+1):\n        dummy_3d_data.append({\"position\": [x_value, 1000.0, 1000.0], \"residual\": 0.0})\n\n# - Add generated 3d data to the trajectory\nqtm.data.series._3d.set_samples(trajectory_id, measured_range, dummy_3d_data)\n\nprint(qtm.data.object.trajectory.get_parts(trajectory_id))\n# [{'range': {'start': 0, 'end': 2999}, 'type': 'virtual'}]\n\n# - Split the trajectory in 3 parts\nsplit_index_1 = 1200\nsplit_index_2 = 1300\nqtm.data.object.trajectory.split_part(trajectory_id, split_index_1)\nqtm.data.object.trajectory.split_part(trajectory_id, split_index_2)\n\nprint(qtm.data.object.trajectory.get_part_count(trajectory_id))\n# 3\nprint(qtm.data.object.trajectory.get_parts(trajectory_id))\n# [{'range': {'start': 0, 'end': 1200}, 'type': 'virtual'}, {'range': ... ...\n\n# - Remove the middle part of the trajectory\nparts_to_remove_indices = [1]\nqtm.data.object.trajectory.delete_parts(trajectory_id, parts_to_remove_indices)\n\nprint(qtm.data.object.trajectory.get_part_count(trajectory_id))\n# 2\n\n# - Get the range of created gap\ngap_ranges = qtm.data.series._3d.get_gap_ranges(trajectory_id)\nprint(gap_ranges)\n# [{'start': 1201, 'end': 1300}]\n\n# - Use fill_trajectory to fill the created gap\nfill_algorithm = \"polynomial\"\nqtm.data.object.trajectory.fill_trajectory(trajectory_id, fill_algorithm, gap_ranges[0])\n\nprint(qtm.data.object.trajectory.get_part_count(trajectory_id))\n# 3\nprint(qtm.data.object.trajectory.get_parts(trajectory_id))\n# [ ... ... {'range': {'start': 1201, 'end': 1300}, 'type': 'filled'}, ... ... ]\n</code></pre> <pre><code>-- - Create an empty labeled trajectory\ntrajectory_label = \"trajectory\"\ntrajectory_id = qtm.data.object.trajectory.add_trajectory(trajectory_label)\n\n-- - Get measurement range\nmeasured_range = qtm.gui.timeline.get_measured_range()\nprint(measured_range)\n-- {start = 0, end = 2999}\n\n-- - Generate dummy 3d data\ndummy_3d_data = {}\nfor x_value = measured_range[\"start\"], measured_range[\"end\"] do\n    table.insert(dummy_3d_data, {position = {x_value, 1000.0, 1000.0}, residual = 0.0})\nend\n\n-- - Add generated 3d data to the trajectory\nqtm.data.series._3d.set_samples(trajectory_id, measured_range, dummy_3d_data)\n\nprint(qtm.data.object.trajectory.get_parts(trajectory_id))\n-- {{range = {start = 0, end = 2999}, type = \"virtual\"}}\n\n-- - Split the trajectory in 3 parts\nsplit_index_1 = 1200\nsplit_index_2 = 1300\nqtm.data.object.trajectory.split_part(trajectory_id, split_index_1)\nqtm.data.object.trajectory.split_part(trajectory_id, split_index_2)\n\nprint(qtm.data.object.trajectory.get_part_count(trajectory_id))\n-- 3\nprint(qtm.data.object.trajectory.get_parts(trajectory_id))\n-- {{range = {start = 0, end = 1200}, type = \"virtual\"}, {range = ... ...\n\n-- - Remove the middle part of the trajectory\nparts_to_remove_indices = {1}\nqtm.data.object.trajectory.delete_parts(trajectory_id, parts_to_remove_indices)\n\nprint(qtm.data.object.trajectory.get_part_count(trajectory_id))\n-- 2\n\n-- - Get the range of created gap\ngap_ranges = qtm.data.series._3d.get_gap_ranges(trajectory_id)\nprint(gap_ranges)\n-- {{end = 1300, start = 1201}}\n\n-- - Use fill_trajectory to fill the created gap\nfill_algorithm = \"polynomial\"\nqtm.data.object.trajectory.fill_trajectory(trajectory_id, fill_algorithm, gap_ranges[1])\n\nprint(qtm.data.object.trajectory.get_part_count(trajectory_id))\n-- 3\nprint(qtm.data.object.trajectory.get_parts(trajectory_id))\n-- { ... ... {range = {start = 1201, end = 1300}, type = \"filled\"}, ... ...}\n</code></pre> <pre><code>:: - Create an empty labeled trajectory\ncurl --json \"[\\\"trajectory\\\"]\" http://localhost:7979/api/scripting/qtm/data/object/trajectory/add_trajectory/\n:: 11190\n\nset trajectory_id=11190\n\n:: - Get measurement range\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/gui/timeline/get_measured_range/\n:: {\"end\":24,\"start\":0}\n\nset measured_range={\\\"start\\\": 0, \\\"end\\\": 24}\n\n:: - Generate dummy 3d data\nset dummy_3d_data=[{\\\"position\\\": [0, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [1, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [2, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [3, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [4, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [5, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [6, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [7, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [8, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [9, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [10, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [11, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [12, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [13, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [14, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [15, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [16, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [17, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [18, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [19, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [20, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [21, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [22, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [23, 1000.0, 1000.0], \\\"residual\\\": 0.0}, {\\\"position\\\": [24, 1000.0, 1000.0], \\\"residual\\\": 0.0}]\n\n:: - Add generated 3d data to the trajectory\ncurl --json \"[%trajectory_id%, %measured_range%, %dummy_3d_data%]\" http://localhost:7979/api/scripting/qtm/data/series/_3d/set_samples/\n\ncurl --json \"[%trajectory_id%]\" http://localhost:7979/api/scripting/qtm/data/object/trajectory/get_parts/\n:: [{\"range\":{\"end\":24,\"start\":0},\"type\":\"virtual\"}]\n\n:: - Split the trajectory in 3 parts\nset split_index_1=10\nset split_index_2=15\ncurl --json \"[%trajectory_id%, %split_index_1%]\" http://localhost:7979/api/scripting/qtm/data/object/trajectory/split_part/\ncurl --json \"[%trajectory_id%, %split_index_2%]\" http://localhost:7979/api/scripting/qtm/data/object/trajectory/split_part/\n\ncurl --json \"[%trajectory_id%]\" http://localhost:7979/api/scripting/qtm/data/object/trajectory/get_part_count/\n:: 3\ncurl --json \"[%trajectory_id%]\" http://localhost:7979/api/scripting/qtm/data/object/trajectory/get_parts/\n:: [{\"range\":{\"end\":10,\"start\":0},\"type\":\"virtual\"},{\"range\":{\"end\":15,\"start\":11},\"type\":\"virtual\"},{\"range\":{\"end\":24,\"start\":16},\"type\":\"virtual\"}]\n\n:: - Remove the middle part of the trajectory\nset parts_to_remove_indices=1\ncurl --json \"[%trajectory_id%, [%parts_to_remove_indices%]]\" http://localhost:7979/api/scripting/qtm/data/object/trajectory/delete_parts/\ncurl --json \"[%trajectory_id%]\" http://localhost:7979/api/scripting/qtm/data/object/trajectory/get_part_count/\n:: 2\n\n:: - Get the range of created gap\ncurl --json \"[%trajectory_id%]\" http://localhost:7979/api/scripting/qtm/data/series/_3d/get_gap_ranges/\n:: [{\"end\":15,\"start\":11}]\n\nset gap_range={\\\"end\\\":15,\\\"start\\\":11}\n\n:: - Use fill_trajectory to fill the created gap\nset fill_algorithm=\\\"polynomial\\\"\ncurl --json \"[%trajectory_id%, %fill_algorithm%, %gap_range%]\" http://localhost:7979/api/scripting/qtm/data/object/trajectory/fill_trajectory/\n\ncurl --json \"[%trajectory_id%]\" http://localhost:7979/api/scripting/qtm/data/object/trajectory/get_part_count/\n:: 3\ncurl --json \"[%trajectory_id%]\" http://localhost:7979/api/scripting/qtm/data/object/trajectory/get_parts/\n:: [ ... ... ,{\"range\":{\"end\":15,\"start\":11},\"type\":\"filled\"}, ... ...]\n</code></pre>"}, {"location": "qtm.data.object.trajectory.html#add_trajectory", "title": "add_trajectory", "text": "<p>Add a trajectory.</p> <p>Parameters</p> <p><code>label</code> <code>string?</code> The label of the trajectory (if null, the trajectory will be unidentified).</p> <p>Returns</p> <p><code>integer</code> The identifier of the added trajectory.</p>"}, {"location": "qtm.data.object.trajectory.html#delete_trajectory", "title": "delete_trajectory", "text": "<p>Delete a trajectory.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p>"}, {"location": "qtm.data.object.trajectory.html#smooth_trajectory", "title": "smooth_trajectory", "text": "<p>Smooth a trajectory.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p><code>algorithm</code> <code>\"moving_average\"|\"butterworth\"?</code> The smooth algorithm to use (if null, moving average will be used).</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The sample index range to smooth (if null, entire trajectory will be smoothed).</p> <p><code>settings</code> <code>{\"window_size\": integer?, \"filter_order\": integer?, \"cutoff_frequency\": float?}?</code> The smooth settings to use (if null, or if any individual setting is null, the following default values will be used: {window_size: 5, filter_order: 4, cutoff_frequency: 10.0}).</p>"}, {"location": "qtm.data.object.trajectory.html#fill_trajectory", "title": "fill_trajectory", "text": "<p>Fill a trajectory.</p> <p>All samples within the given range will be overwritten. To fill gaps only, use the ranges returned by 'qtm.data.series._3d.get_gap_ranges'.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p><code>algorithm</code> <code>\"static\"|\"linear\"|\"polynomial\"|\"relational\"|\"virtual\"|\"kinematic\"?</code> The fill algorithm to use (if null, polynomial will be used).</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The sample index range to fill (if null, the entire measurement range will be filled).</p> <p><code>settings</code> <code>{\"origin\": integer?, \"line\": integer?, \"plane\": integer?, \"offset\": vec3f?, \"is_rigid_body\": bool?, \"is_relative_offset\": bool?}?</code> The fill settings to use (if null, or if any individual setting is null, the following default values will be used: {offset: [0.0, 0.0, 0.0], is_rigid_body: false, is_relative_offset: false}).</p>"}, {"location": "qtm.data.object.trajectory.html#find_trajectory", "title": "find_trajectory", "text": "<p>Find a trajectory by label.</p> <p>Parameters</p> <p><code>label</code> <code>string</code> The label of the trajectory.</p> <p>Returns</p> <p><code>integer?</code> The identifier of the found trajectory (or null, if no trajectory was found).</p>"}, {"location": "qtm.data.object.trajectory.html#clear_trajectories", "title": "clear_trajectories", "text": "<p>Delete all trajectories.</p>"}, {"location": "qtm.data.object.trajectory.html#get_trajectory_id", "title": "get_trajectory_id", "text": "<p>Get a trajectory identifier by index.</p> <p>This is equivalent to calling qtm.data.series._3d.get_series_id.</p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the trajectory.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.trajectory.html#get_trajectory_ids", "title": "get_trajectory_ids", "text": "<p>Get all trajectory identifiers.</p> <p>This is equivalent to calling qtm.data.series._3d.get_series_ids.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.object.trajectory.html#get_trajectory_count", "title": "get_trajectory_count", "text": "<p>Get the number of trajectories.</p> <p>This is equivalent to calling qtm.data.series._3d.get_series_count.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.trajectory.html#get_part", "title": "get_part", "text": "<p>Get a part of a trajectory by index.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p><code>index</code> <code>integer</code> The index of the part.</p> <p>Returns</p> <p><code>{\"range\": {\"start\": integer, \"end\": integer}, \"type\": string}</code> </p>"}, {"location": "qtm.data.object.trajectory.html#get_parts", "title": "get_parts", "text": "<p>Get all parts of a trajectory.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p>Returns</p> <p><code>[{\"range\": {\"start\": integer, \"end\": integer}, \"type\": string}]</code> </p>"}, {"location": "qtm.data.object.trajectory.html#get_part_count", "title": "get_part_count", "text": "<p>Get the number of parts of a trajectory.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.object.trajectory.html#delete_parts", "title": "delete_parts", "text": "<p>Delete parts of a trajectory.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p><code>part_indices</code> <code>[integer]?</code> The indices of the parts to delete (if null, all parts will be deleted).</p>"}, {"location": "qtm.data.object.trajectory.html#move_parts", "title": "move_parts", "text": "<p>Move parts from one trajectory to another.</p> <p>Parameters</p> <p><code>id_from</code> <code>integer</code> The identifier of the trajectory to move from.</p> <p><code>id_to</code> <code>integer</code> The identifier of the trajectory to move to.</p> <p><code>part_indices</code> <code>[integer]?</code> The indices of the parts to move (if null, all parts will be moved).</p>"}, {"location": "qtm.data.object.trajectory.html#swap_parts", "title": "swap_parts", "text": "<p>Swap parts between two trajectories.</p> <p>Parameters</p> <p><code>id_1</code> <code>integer</code> The identifier of the first trajectory.</p> <p><code>id_2</code> <code>integer</code> The identifier of the second trajectory.</p> <p><code>part_indices_1</code> <code>[integer]?</code> The indices of the parts to swap from the first trajectory (if null, all parts will be swapped).</p> <p><code>part_indices_2</code> <code>[integer]?</code> The indices of the parts to swap from the second trajectory (if null, all parts will be swapped).</p>"}, {"location": "qtm.data.object.trajectory.html#split_part", "title": "split_part", "text": "<p>Split a part of a trajectory.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p><code>sample_index</code> <code>integer</code> The index of the last sample before the split.</p>"}, {"location": "qtm.data.object.trajectory.html#get_label", "title": "get_label", "text": "<p>Get the label of a trajectory.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p>Returns</p> <p><code>string?</code> The label (or null, if the trajectory is unidentified).</p>"}, {"location": "qtm.data.object.trajectory.html#set_label", "title": "set_label", "text": "<p>Set the label of a trajectory.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p><code>label</code> <code>string?</code> The label (if null, the trajectory will become unidentified).</p>"}, {"location": "qtm.data.object.trajectory.html#get_active_marker_id", "title": "get_active_marker_id", "text": "<p>Get the (sequence coded) active marker identifier of a trajectory.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p>Returns</p> <p><code>integer?</code> The active marker identifier (or null, if the marker is passive or actively unidentified).</p>"}, {"location": "qtm.data.object.trajectory.html#get_rigid_body_id", "title": "get_rigid_body_id", "text": "<p>Get the rigid body identifier of a trajectory.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p>Returns</p> <p><code>integer?</code> The identifier of the rigid body (or null, if the trajectory isn't part of a rigid body).</p>"}, {"location": "qtm.data.object.trajectory.html#get_skeleton_segment_id", "title": "get_skeleton_segment_id", "text": "<p>Get the skeleton segment identifier of a trajectory.</p> <p>If the trajectory is attached to multiple segments, only the identifier of the first found will be returned.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The identifier of the trajectory.</p> <p>Returns</p> <p><code>integer?</code> The identifier of the skeleton segment (or null, if the trajectory isn't part of a skeleton).</p>"}, {"location": "qtm.data.object.trajectory.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series._2d.html", "title": "qtm.data.series._2d", "text": "<p>Access 2d data series.</p> PythonLuaREST <pre><code>import qtm\n\nseries_ids = qtm.data.series._2d.get_series_ids()\nprint(series_ids)\n# [106723, 106724, 106725, 106726, 106727, 106728, 106729, 106730, ... ...\n\nsample_ranges = qtm.data.series._2d.get_sample_ranges(series_ids[0])\nprint(sample_ranges)\n# [{'start': 0, 'end': 322}]\n\nsample_index = 100\nprint(qtm.data.series._2d.get_sample(series_ids[0], sample_index))\n# [[{'position': [119658, 5486], 'size': [978, 768]}, {'position': [120837, 8429], 'size': [1116, 1088]}, ... ...\n</code></pre> <pre><code>series_ids = qtm.data.series._2d.get_series_ids()\nprint(series_ids)\n-- {106723, 106724, 106725, 106726, 106727, 106728, 106729, 106730, ... ...\n\nsample_ranges = qtm.data.series._2d.get_sample_ranges(series_ids[1])\nprint(sample_ranges)\n-- {{start = 0, end = 322}}\n\nsample_index = 100\nprint(qtm.data.series._2d.get_sample(series_ids[1], sample_index))\n-- {{{size = {978, 768}, position = {119658, 5486}}, {size = {1116, 1088}, position = {120837, 8429}}, {size = {750, 704}, ... ...\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/data/series/_2d/get_series_ids/\n:: [106723,106724,106725,106726,106727,106728,106729,106730,106731,106732,106733,106734,106735,106736]\n\nset series_id=106723\ncurl --json \"[%series_id%]\" http://localhost:7979/api/scripting/qtm/data/series/_2d/get_sample_ranges/\n:: [{\"end\":322,\"start\":0}]\n\nset sample_index=100\ncurl --json \"[%series_id%, %sample_index%]\" http://localhost:7979/api/scripting/qtm/data/series/_2d/get_sample/\n: [[{\"position\":[119658,5486],\"size\":[978,768]},{\"position\":[120837,8429],\"size\":[1116,1088]}, ... ...\n</code></pre>"}, {"location": "qtm.data.series._2d.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index.</p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._2d.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series._2d.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._2d.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._2d.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.data.series._2d.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series._2d.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series._2d.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>[{\"position\": vec2i, \"size\": vec2i}]?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series._2d.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[[{\"position\": vec2i, \"size\": vec2i}]?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series._2d.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series._2d.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series.</p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series._2d.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series._2d.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series._2d.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series._3d.html", "title": "qtm.data.series._3d", "text": "<p>Access and modify 3d data series.</p> PythonLuaREST <pre><code>import qtm\n\nseries_ids = qtm.data.series._3d.get_series_ids()\nprint(series_ids)\n# [106038, 106043, 106047, 106051, 106053, 106055, 106057, 106059, ... ...\n\nsample_ranges = qtm.data.series._3d.get_sample_ranges(series_ids[0])\nprint(sample_ranges)\n# [{'start': 0, 'end': 322}]\n\nsample_index = 100\nprint(qtm.data.series._3d.get_sample(series_ids[0], sample_index))\n# {'position': [-5421.754065180638, -1070.7176908513354, 120.57418268723374], 'residual': 0.9671389652802037}\n</code></pre> <pre><code>series_ids = qtm.data.series._3d.get_series_ids()\nprint(series_ids)\n-- {106038, 106043, 106047, 106051, 106053, 106055, 106057, 106059, ... ...\n\nsample_ranges = qtm.data.series._3d.get_sample_ranges(series_ids[1])\nprint(sample_ranges)\n-- {{end = 322, start = 0}}\n\nsample_index = 100\nprint(qtm.data.series._3d.get_sample(series_ids[1], sample_index))\n-- {residual = 0.9671389652802, position = {-5421.7540651806, -1070.7176908513, 120.57418268723}}\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/data/series/_3d/get_series_ids/\n:: [106038,106043,106047,106051,106053,106055,106057,106059, ... ...\n\nset series_id=106038\ncurl --json \"[%series_id%]\" http://localhost:7979/api/scripting/qtm/data/series/_3d/get_sample_ranges/\n:: [{\"end\":322,\"start\":0}]\n\nset sample_index=100\ncurl --json \"[%series_id%, %sample_index%]\" http://localhost:7979/api/scripting/qtm/data/series/_3d/get_sample/\n:: {\"position\":[-5421.7540651806376,-1070.7176908513354,120.57418268723374],\"residual\":0.96713896528020371}\n</code></pre>"}, {"location": "qtm.data.series._3d.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index.</p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._3d.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series._3d.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._3d.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._3d.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.data.series._3d.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series._3d.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series._3d.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>{\"position\": vec3f, \"residual\": float}?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series._3d.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[{\"position\": vec3f, \"residual\": float}?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series._3d.html#set_sample", "title": "set_sample", "text": "<p>Set a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p><code>sample</code> <code>{\"position\": vec3f, \"residual\": float}?</code> The sample (if null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series._3d.html#set_samples", "title": "set_samples", "text": "<p>Set a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The index range of the samples.</p> <p><code>samples</code> <code>[{\"position\": vec3f, \"residual\": float}?]</code> The samples (if a sample is null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series._3d.html#delete_sample", "title": "delete_sample", "text": "<p>Delete a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series._3d.html#delete_samples", "title": "delete_samples", "text": "<p>Delete a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be deleted).</p>"}, {"location": "qtm.data.series._3d.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series._3d.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series.</p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series._3d.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series._3d.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series._3d.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series._6d.html", "title": "qtm.data.series._6d", "text": "<p>Access 6dof data series.</p> PythonLuaREST <pre><code>import qtm\n\nseries_ids = qtm.data.series._6d.get_series_ids()\nprint(series_ids)\n# [106751, 106752, 106753, 106754]\n\nsample_ranges = qtm.data.series._6d.get_sample_ranges(series_ids[0])\nprint(sample_ranges)\n# [{'start': 0, 'end': 3380}]\n\nsample_index = 100\nprint(qtm.data.series._6d.get_sample(series_ids[0], sample_index))\n# {'transform': [[-0.6398715972900391, 0.7683062553405762, 0.016427502036094666, 475.34625733104804], [-0.7682338953018188, -0.6400619745254517, 0.0117202028632164, -1057.2460105715884], [0.019519325345754623, -0.005120739806443453, 0.9997963905334473, 66.71982557748521], [0.0, 0.0, 0.0, 1.0]], 'residual': 0.6208022236824036}\n</code></pre> <pre><code>series_ids = qtm.data.series._6d.get_series_ids()\nprint(series_ids)\n-- {106751, 106752, 106753, 106754}\n\nsample_ranges = qtm.data.series._6d.get_sample_ranges(series_ids[1])\nprint(sample_ranges)\n-- {{start = 0, end = 3380}}\n\nsample_index = 100\nprint(qtm.data.series._6d.get_sample(series_ids[1], sample_index))\n-- {transform = {{-0.63987159729004, 0.76830625534058, 0.016427502036095, 475.34625733105}, {-0.76823389530182, -0.64006197452545, 0.011720202863216, -1057.2460105716}, {0.019519325345755, -0.0051207398064435, 0.99979639053345, 66.719825577485}, {0.0, 0.0, 0.0, 1.0}}, residual = 0.6208022236824}\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/data/series/_6d/get_series_ids/\n:: [106751,106752,106753,106754]\n\nset series_id=106751\ncurl --json \"[%series_id%]\" http://localhost:7979/api/scripting/qtm/data/series/_6d/get_sample_ranges/\n:: [{\"end\":3380,\"start\":0}]\n\nset sample_index=100\ncurl --json \"[%series_id%, %sample_index%]\" http://localhost:7979/api/scripting/qtm/data/series/_6d/get_sample/\n:: {\"residual\":0.62080222368240356,\"transform\":[[-0.63987159729003906,0.76830625534057617,0.016427502036094666,475.34625733104804],[-0.76823389530181885,-0.64006197452545166,0.0117202028632164,-1057.2460105715884],[0.019519325345754623,-0.0051207398064434528,0.99979639053344727,66.71982557748521],[0,0,0,1]]}\n</code></pre>"}, {"location": "qtm.data.series._6d.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index.</p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._6d.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series._6d.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._6d.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series._6d.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.data.series._6d.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series._6d.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series._6d.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>{\"transform\": mat4x4f, \"residual\": float}?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series._6d.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[{\"transform\": mat4x4f, \"residual\": float}?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series._6d.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series._6d.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series.</p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series._6d.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series._6d.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series._6d.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series.analog.html", "title": "qtm.data.series.analog", "text": "<p>Access analog data series.</p> PythonLuaREST <pre><code>import qtm\n\nseries_ids = qtm.data.series.analog.get_series_ids()\nprint(series_ids)\n# [138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158]\n\nsample_ranges = qtm.data.series.analog.get_sample_ranges(series_ids[0])\nprint(sample_ranges)\n# [{'start': 0, 'end': 3999}]\n\nsample_index = 100\nprint(qtm.data.series.analog.get_sample(series_ids[0], sample_index))\n# 5.0121307373046875\n</code></pre> <pre><code>series_ids = qtm.data.series.analog.get_series_ids()\nprint(series_ids)\n-- {138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158}\n\nsample_ranges = qtm.data.series.analog.get_sample_ranges(series_ids[1])\nprint(sample_ranges)\n-- {{end = 3999, start = 0}}\n\nsample_index = 100\nprint(qtm.data.series.analog.get_sample(series_ids[1], sample_index))\n-- 5.0121307373047\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/data/series/analog/get_series_ids/\n:: [138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158]\n\nset series_id=138\ncurl --json \"[%series_id%]\" http://localhost:7979/api/scripting/qtm/data/series/analog/get_sample_ranges/\n:: [{\"end\":3999,\"start\":0}]\n\nset sample_index=100\ncurl --json \"[%series_id%, %sample_index%]\" http://localhost:7979/api/scripting/qtm/data/series/analog/get_sample/\n:: 5.0121307373046875\n</code></pre>"}, {"location": "qtm.data.series.analog.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index.</p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.analog.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series.analog.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.analog.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.analog.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.data.series.analog.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.analog.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.analog.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series.analog.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[float?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series.analog.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series.analog.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series.</p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series.analog.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.analog.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series.analog.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series.force.html", "title": "qtm.data.series.force", "text": "<p>Access force data series.</p> PythonLuaREST <pre><code>import qtm\n\nseries_ids = qtm.data.series.force.get_series_ids()\nprint(series_ids)\n# [162, 163, 164]\n\nsample_ranges = qtm.data.series.force.get_sample_ranges(series_ids[1])\nprint(sample_ranges)\n# [{'start': 0, 'end': 3999}]\n\nsample_index = 1000\nprint(qtm.data.series.force.get_sample(series_ids[1], sample_index))\n# {'force': [-43.66947368659142, -1.024620490494561, 339.9732299043336], 'moment': [35.271949647601424, 13.23768784042157, 7.189612166113668], 'center_of_pressure': [-27.376964978234895, 104.02044155564013, 0.0]}\n</code></pre> <pre><code>series_ids = qtm.data.series.force.get_series_ids()\nprint(series_ids)\n-- {162, 163, 164}\n\nsample_ranges = qtm.data.series.force.get_sample_ranges(series_ids[2])\nprint(sample_ranges)\n-- {{end = 3999, start = 0}}\n\nsample_index = 1000\nprint(qtm.data.series.force.get_sample(series_ids[2], sample_index))\n-- {moment = {35.271949647601, 13.237687840422, 7.1896121661137}, force = {-43.669473686591, -1.0246204904946, 339.97322990433}, center_of_pressure = {-27.376964978235, 104.02044155564, 0.0}}\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/data/series/force/get_series_ids/\n:: [162,163,164]\n\nset series_id=163\ncurl --json \"[%series_id%]\" http://localhost:7979/api/scripting/qtm/data/series/force/get_sample_ranges/\n:: [{\"end\":3999,\"start\":0}]\n\nset sample_index=100\ncurl --json \"[%series_id%, %sample_index%]\" http://localhost:7979/api/scripting/qtm/data/series/force/get_sample/\n:: {\"center_of_pressure\":[-27.376964978234895,104.02044155564013,0],\"force\":[-43.669473686591417,-1.0246204904945611,339.97322990433361],\"moment\":[35.271949647601424,13.23768784042157,7.189612166113668]}\n</code></pre>"}, {"location": "qtm.data.series.force.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index.</p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.force.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series.force.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.force.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.force.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.data.series.force.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.force.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.force.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>{\"force\": vec3f, \"moment\": vec3f, \"center_of_pressure\": vec3f}?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series.force.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[{\"force\": vec3f, \"moment\": vec3f, \"center_of_pressure\": vec3f}?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series.force.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series.force.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series.</p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series.force.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.force.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series.force.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series.gaze.html", "title": "qtm.data.series.gaze", "text": "<p>Access gaze data series.</p> PythonLuaREST <pre><code>import qtm\n\nseries_ids = qtm.data.series.gaze.get_series_ids()\nprint(series_ids)\n# [389, 390]\n\nsample_ranges = qtm.data.series.gaze.get_sample_ranges(series_ids[0])\nprint(sample_ranges)\n# [{'start': 0, 'end': 300}]\n\nsample_index = 100\nprint(qtm.data.series.gaze.get_sample(series_ids[0], sample_index))\n# {'position': [25.00000037252903, -12.000000104308128, -25.00000037252903], 'direction': [-0.624884307384491, -0.01765182428061962, 0.7805178165435791]}\n</code></pre> <pre><code>series_ids = qtm.data.series.gaze.get_series_ids()\nprint(series_ids)\n-- {389, 390}\n\nsample_ranges = qtm.data.series.gaze.get_sample_ranges(series_ids[1])\nprint(sample_ranges)\n-- {{end = 300, start = 0}}\n\nsample_index = 100\nprint(qtm.data.series.gaze.get_sample(series_ids[1], sample_index))\n-- {position = {25.000000372529, -12.000000104308, -25.000000372529}, direction = {-0.62488430738449, -0.01765182428062, 0.78051781654358}}\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/data/series/gaze/get_series_ids/\n:: [389,390]\n\nset series_id=389\ncurl --json \"[%series_id%]\" http://localhost:7979/api/scripting/qtm/data/series/gaze/get_sample_ranges/\n:: [{\"end\":300,\"start\":0}]\n\nset sample_index=100\ncurl --json \"[%series_id%, %sample_index%]\" http://localhost:7979/api/scripting/qtm/data/series/gaze/get_sample/\n:: {\"direction\":[-0.62488430738449097,-0.017651824280619621,0.7805178165435791],\"position\":[25.00000037252903,-12.000000104308128,-25.00000037252903]}\n</code></pre>"}, {"location": "qtm.data.series.gaze.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index.</p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.gaze.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series.gaze.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.gaze.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.gaze.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.data.series.gaze.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.gaze.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.gaze.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>{\"position\": vec3f, \"direction\": vec3f}?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series.gaze.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[{\"position\": vec3f, \"direction\": vec3f}?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series.gaze.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series.gaze.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series.</p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series.gaze.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.gaze.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series.gaze.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series.skeleton.html", "title": "qtm.data.series.skeleton", "text": "<p>Access and modify skeleton data series.</p> PythonLuaREST <pre><code>import qtm\n\nseries_ids = qtm.data.series.skeleton.get_series_ids()\nprint(series_ids)\n# [9474, 9485, 9493, 9500, 9506, 9512, 9518, 9525, 9532, 9538, ... ...\n\nsample_ranges = qtm.data.series.skeleton.get_sample_ranges(series_ids[42])\nprint(sample_ranges)\n# [{'start': 0, 'end': 3918}]\n\nsample_index = 100\nprint(qtm.data.series.skeleton.get_sample(series_ids[42], sample_index))\n# [[0.9405906306958157, 0.3371781617403682, -0.04000190861238576, -1.4210854715202004e-14], [-0.3378169776885003, 0.9174301488204885, -0.21024179323013725, -22.087045432760192], [-0.03418998439097159, 0.21126478476216182, 0.9768307098401148, -421.44593293055993], [0.0, 0.0, 0.0, 1.0]]\n</code></pre> <pre><code>series_ids = qtm.data.series.skeleton.get_series_ids()\nprint(series_ids)\n-- {9474, 9485, 9493, 9500, 9506, 9512, 9518, 9525, 9532, 9538, ... ...\n\nsample_ranges = qtm.data.series.skeleton.get_sample_ranges(series_ids[43])\nprint(sample_ranges)\n-- {{start = 0, end = 3918}}\n\nsample_index = 100\nprint(qtm.data.series.skeleton.get_sample(series_ids[43], sample_index))\n-- {{0.94059063069582, 0.33717816174037, -0.040001908612386, -1.4210854715202e-14}, {-0.3378169776885, 0.91743014882049, -0.21024179323014, -22.08704543276}, {-0.034189984390972, 0.21126478476216, 0.97683070984011, -421.44593293056}, {0.0, 0.0, 0.0, 1.0}}\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/data/series/skeleton/get_series_ids/\n:: [9474,9485,9493,9500,9506,9512,9518,9525,9532,9538, ... ...\n\nset series_id=9769\ncurl --json \"[%series_id%]\" http://localhost:7979/api/scripting/qtm/data/series/skeleton/get_sample_ranges/\n:: [{\"end\":3918,\"start\":0}]\n\nset sample_index=100\ncurl --json \"[%series_id%, %sample_index%]\" http://localhost:7979/api/scripting/qtm/data/series/skeleton/get_sample/\n:: [[0.94059063069581572,0.33717816174036819,-0.040001908612385763,-1.4210854715202004e-14],[-0.33781697768850028,0.91743014882048846,-0.21024179323013725,-22.087045432760192],[-0.034189984390971588,0.21126478476216182,0.97683070984011477,-421.44593293055993],[0,0,0,1]]\n</code></pre>"}, {"location": "qtm.data.series.skeleton.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index.</p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.skeleton.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series.skeleton.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.skeleton.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.skeleton.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.data.series.skeleton.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.skeleton.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.skeleton.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>mat4x4f?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series.skeleton.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[mat4x4f?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series.skeleton.html#set_sample", "title": "set_sample", "text": "<p>Set a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p><code>sample</code> <code>mat4x4f?</code> The sample (if null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series.skeleton.html#set_samples", "title": "set_samples", "text": "<p>Set a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The index range of the samples.</p> <p><code>samples</code> <code>[mat4x4f?]</code> The samples (if a sample is null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series.skeleton.html#delete_sample", "title": "delete_sample", "text": "<p>Delete a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.skeleton.html#delete_samples", "title": "delete_samples", "text": "<p>Delete a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be deleted).</p>"}, {"location": "qtm.data.series.skeleton.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series.skeleton.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series.</p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series.skeleton.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.skeleton.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series.skeleton.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series.time.irig.html", "title": "qtm.data.series.time.irig", "text": "<p>Access and modify irig (inter-range instrumentation group) data series.</p> PythonLuaREST <pre><code>import qtm\n\nseries_ids = qtm.data.series.time.irig.get_series_ids()\nprint(series_ids)\n# [15642]\n\nprint(qtm.data.series.time.irig.get_sample_count(series_ids[0]))\n# 1000\n\nprint(qtm.data.series.time.irig.get_frequency(series_ids[0]))\n# 100.0\n\nsample_index = 150\nprint(qtm.data.series.time.irig.get_sample(series_ids[0], sample_index))\n# {'year': 0, 'day': 40, 'hour': 12, 'minute': 23, 'second': 39, 'tenth': 7}\n\nprint(qtm.data.series.time.irig.get_time_at_sample_index(series_ids[0], sample_index))\n# 1.5\n</code></pre> <pre><code>series_ids = qtm.data.series.time.irig.get_series_ids()\nprint(series_ids)\n-- {15642}\n\nprint(qtm.data.series.time.irig.get_sample_count(series_ids[1]))\n-- 1000\n\nprint(qtm.data.series.time.irig.get_frequency(series_ids[1]))\n-- 100.0\n\nsample_index = 150\nprint(qtm.data.series.time.irig.get_sample(series_ids[1], sample_index))\n-- {second = 39, day = 40, year = 0, tenth = 7, hour = 12, minute = 23}\n\nprint(qtm.data.series.time.irig.get_time_at_sample_index(series_ids[1], sample_index))\n-- 1.5\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/data/series/time/irig/get_series_ids/\n:: [15642]\n\nset series_id=15642\ncurl --json \"[%series_id%]\" http://localhost:7979/api/scripting/qtm/data/series/time/irig/get_sample_count/\n:: 1000\n\ncurl --json \"[%series_id%]\" http://localhost:7979/api/scripting/qtm/data/series/time/irig/get_frequency/\n:: 100\n\nset sample_index=150\ncurl --json \"[%series_id%, %sample_index%]\" http://localhost:7979/api/scripting/qtm/data/series/time/irig/get_sample/\n:: {\"day\":40,\"hour\":12,\"minute\":23,\"second\":39,\"tenth\":7,\"year\":0}\n\ncurl --json \"[%series_id%, %sample_index%]\" http://localhost:7979/api/scripting/qtm/data/series/time/irig/get_time_at_sample_index/\n:: 1.5\n</code></pre>"}, {"location": "qtm.data.series.time.irig.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index.</p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.irig.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series.time.irig.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.irig.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.irig.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.data.series.time.irig.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.time.irig.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.time.irig.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>{\"year\": integer, \"day\": integer, \"hour\": integer, \"minute\": integer, \"second\": integer, \"tenth\": integer}?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series.time.irig.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[{\"year\": integer, \"day\": integer, \"hour\": integer, \"minute\": integer, \"second\": integer, \"tenth\": integer}?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series.time.irig.html#set_sample", "title": "set_sample", "text": "<p>Set a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p><code>sample</code> <code>{\"year\": integer, \"day\": integer, \"hour\": integer, \"minute\": integer, \"second\": integer, \"tenth\": integer}?</code> The sample (if null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series.time.irig.html#set_samples", "title": "set_samples", "text": "<p>Set a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The index range of the samples.</p> <p><code>samples</code> <code>[{\"year\": integer, \"day\": integer, \"hour\": integer, \"minute\": integer, \"second\": integer, \"tenth\": integer}?]</code> The samples (if a sample is null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series.time.irig.html#delete_sample", "title": "delete_sample", "text": "<p>Delete a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.time.irig.html#delete_samples", "title": "delete_samples", "text": "<p>Delete a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be deleted).</p>"}, {"location": "qtm.data.series.time.irig.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series.time.irig.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series.</p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series.time.irig.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.time.irig.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series.time.irig.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series.time.ptp.html", "title": "qtm.data.series.time.ptp", "text": "<p>Access and modify ptp (precision time protocol) data series.</p> PythonLuaREST <pre><code>import qtm\n\nseries_ids = qtm.data.series.time.ptp.get_series_ids()\nprint(series_ids)\n# [15664]\n\nprint(qtm.data.series.time.ptp.get_sample_count(series_ids[0]))\n# 12000\n\nprint(qtm.data.series.time.ptp.get_frequency(series_ids[0]))\n# 20.0\n\nsample_index = 150\nprint(qtm.data.series.time.ptp.get_sample(series_ids[0], sample_index))\n# {'second': 1500388477, 'nanosecond': 203316000}\n\nprint(qtm.data.series.time.ptp.get_time_at_sample_index(series_ids[0], sample_index))\n# 7.5\n</code></pre> <pre><code>series_ids = qtm.data.series.time.ptp.get_series_ids()\nprint(series_ids)\n-- {15664}\n\nprint(qtm.data.series.time.ptp.get_sample_count(series_ids[1]))\n-- 12000\n\nprint(qtm.data.series.time.ptp.get_frequency(series_ids[1]))\n-- 20.0\n\nsample_index = 150\nprint(qtm.data.series.time.ptp.get_sample(series_ids[1], sample_index))\n-- {second = 1500388477, nanosecond = 203316000}\n\nprint(qtm.data.series.time.ptp.get_time_at_sample_index(series_ids[1], sample_index))\n-- 7.5\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/data/series/time/ptp/get_series_ids/\n:: [15664]\n\nset series_id=15664\ncurl --json \"[%series_id%]\" http://localhost:7979/api/scripting/qtm/data/series/time/ptp/get_sample_count/\n:: 12000\n\ncurl --json \"[%series_id%]\" http://localhost:7979/api/scripting/qtm/data/series/time/ptp/get_frequency/\n:: 20\n\nset sample_index=150\ncurl --json \"[%series_id%, %sample_index%]\" http://localhost:7979/api/scripting/qtm/data/series/time/ptp/get_sample/\n:: {\"nanosecond\":203316000,\"second\":1500388477}\n\ncurl --json \"[%series_id%, %sample_index%]\" http://localhost:7979/api/scripting/qtm/data/series/time/ptp/get_time_at_sample_index/\n:: 7.5\n</code></pre>"}, {"location": "qtm.data.series.time.ptp.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index.</p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.ptp.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series.time.ptp.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.ptp.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.ptp.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.data.series.time.ptp.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.time.ptp.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.time.ptp.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>{\"second\": integer, \"nanosecond\": integer}?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series.time.ptp.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[{\"second\": integer, \"nanosecond\": integer}?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series.time.ptp.html#set_sample", "title": "set_sample", "text": "<p>Set a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p><code>sample</code> <code>{\"second\": integer, \"nanosecond\": integer}?</code> The sample (if null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series.time.ptp.html#set_samples", "title": "set_samples", "text": "<p>Set a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The index range of the samples.</p> <p><code>samples</code> <code>[{\"second\": integer, \"nanosecond\": integer}?]</code> The samples (if a sample is null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series.time.ptp.html#delete_sample", "title": "delete_sample", "text": "<p>Delete a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.time.ptp.html#delete_samples", "title": "delete_samples", "text": "<p>Delete a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be deleted).</p>"}, {"location": "qtm.data.series.time.ptp.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series.time.ptp.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series.</p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series.time.ptp.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.time.ptp.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series.time.ptp.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.data.series.time.smpte.html", "title": "qtm.data.series.time.smpte", "text": "<p>Access and modify smpte (society of motion picture and television engineers) data series.</p> PythonLuaREST <pre><code>import qtm\n\nseries_ids = qtm.data.series.time.smpte.get_series_ids()\nprint(series_ids)\n# [16315]\n\nprint(qtm.data.series.time.smpte.get_sample_count(series_ids[0]))\n# 1845\n\nprint(qtm.data.series.time.smpte.get_frequency(series_ids[0]))\n# 120.0\n\nsample_index = 150\nprint(qtm.data.series.time.smpte.get_sample(series_ids[0], sample_index))\n# {'hour': 15, 'minute': 43, 'second': 40, 'frame': 19}\n\nprint(qtm.data.series.time.smpte.get_time_at_sample_index(series_ids[0], sample_index))\n# 1.25\n</code></pre> <pre><code>series_ids = qtm.data.series.time.smpte.get_series_ids()\nprint(series_ids)\n-- {16315}\n\nprint(qtm.data.series.time.smpte.get_sample_count(series_ids[1]))\n-- 1845\n\nprint(qtm.data.series.time.smpte.get_frequency(series_ids[1]))\n-- 120.0\n\nsample_index = 150\nprint(qtm.data.series.time.smpte.get_sample(series_ids[1], sample_index))\n-- {frame = 19, second = 40, hour = 15, minute = 43}\n\nprint(qtm.data.series.time.smpte.get_time_at_sample_index(series_ids[1], sample_index))\n-- 1.25\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/data/series/time/smpte/get_series_ids/\n:: [16315]\n\nset series_id=16315\ncurl --json \"[%series_id%]\" http://localhost:7979/api/scripting/qtm/data/series/time/smpte/get_sample_count/\n:: 1845\n\ncurl --json \"[%series_id%]\" http://localhost:7979/api/scripting/qtm/data/series/time/smpte/get_frequency/\n:: 120\n\nset sample_index=150\ncurl --json \"[%series_id%, %sample_index%]\" http://localhost:7979/api/scripting/qtm/data/series/time/smpte/get_sample/\n:: {\"frame\":19,\"hour\":15,\"minute\":43,\"second\":40}\n\ncurl --json \"[%series_id%, %sample_index%]\" http://localhost:7979/api/scripting/qtm/data/series/time/smpte/get_time_at_sample_index/\n:: 1.25\n</code></pre>"}, {"location": "qtm.data.series.time.smpte.html#get_series_id", "title": "get_series_id", "text": "<p>Get a data series identifier by index.</p> <p>Parameters</p> <p><code>index</code> <code>integer</code> The index of the data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.smpte.html#get_series_ids", "title": "get_series_ids", "text": "<p>Get all data series identifiers.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.data.series.time.smpte.html#get_series_count", "title": "get_series_count", "text": "<p>Get the number of data series.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.smpte.html#get_sample_count", "title": "get_sample_count", "text": "<p>Get the number of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.data.series.time.smpte.html#get_sample_range", "title": "get_sample_range", "text": "<p>Get the total sample index range in a data series (first to last).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.data.series.time.smpte.html#get_sample_ranges", "title": "get_sample_ranges", "text": "<p>Get the contiguous sample index ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.time.smpte.html#get_gap_ranges", "title": "get_gap_ranges", "text": "<p>Get the contiguous sample index gap ranges in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>[{\"start\": integer, \"end\": integer}]</code> </p>"}, {"location": "qtm.data.series.time.smpte.html#get_sample", "title": "get_sample", "text": "<p>Get a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>{\"hour\": integer, \"minute\": integer, \"second\": integer, \"frame\": integer}?</code> The sample (or null, if no sample existed at the given index).</p>"}, {"location": "qtm.data.series.time.smpte.html#get_samples", "title": "get_samples", "text": "<p>Get a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be returned).</p> <p>Returns</p> <p><code>[{\"hour\": integer, \"minute\": integer, \"second\": integer, \"frame\": integer}?]</code> The samples (may include null values, if no samples existed at the corresponding indices).</p>"}, {"location": "qtm.data.series.time.smpte.html#set_sample", "title": "set_sample", "text": "<p>Set a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p><code>sample</code> <code>{\"hour\": integer, \"minute\": integer, \"second\": integer, \"frame\": integer}?</code> The sample (if null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series.time.smpte.html#set_samples", "title": "set_samples", "text": "<p>Set a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The index range of the samples.</p> <p><code>samples</code> <code>[{\"hour\": integer, \"minute\": integer, \"second\": integer, \"frame\": integer}?]</code> The samples (if a sample is null, any previously existing sample will be deleted).</p>"}, {"location": "qtm.data.series.time.smpte.html#delete_sample", "title": "delete_sample", "text": "<p>Delete a single sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.time.smpte.html#delete_samples", "title": "delete_samples", "text": "<p>Delete a range of samples in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}?</code> The index range of the samples (if null, all samples will be deleted).</p>"}, {"location": "qtm.data.series.time.smpte.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency of a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.data.series.time.smpte.html#get_offset", "title": "get_offset", "text": "<p>Get the offset (start time) of a data series.</p> <p>The offset is relative to the start of the measurement and may be negative (in which case the data series begins before the measurement).</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p>Returns</p> <p><code>float</code> The offset of the data series (in seconds).</p>"}, {"location": "qtm.data.series.time.smpte.html#get_sample_index_at_time", "title": "get_sample_index_at_time", "text": "<p>Get the index of a sample in a data series at a given time.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>time</code> <code>float</code> The time relative to the start of the measurement (in seconds). May be negative.</p> <p>Returns</p> <p><code>integer</code> The index of the sample.</p>"}, {"location": "qtm.data.series.time.smpte.html#get_time_at_sample_index", "title": "get_time_at_sample_index", "text": "<p>Get the start time of a sample in a data series.</p> <p>Parameters</p> <p><code>id</code> <code>integer</code> The data series identifier.</p> <p><code>index</code> <code>integer</code> The index of the sample.</p> <p>Returns</p> <p><code>float</code> The start time of the sample relative to the start of the measurement (in seconds). May be negative.</p>"}, {"location": "qtm.data.series.time.smpte.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.gui._3d.html", "title": "qtm.gui._3d", "text": "<p>Interface to the measurement 3d view with methods for custom drawing.</p> PythonLua <pre><code>import qtm\n\ndef draw_sphere():\n    # Draw a red sphere located in (x=1000, y=500, z=750), with a diameter of 500 mm.\n    position = [1000, 500, 750]\n    diameter = 500\n    color = qtm.utilities.color.rgb(0.855, 0.161, 0.11)\n    qtm.gui._3d.draw_sphere(position, diameter, color)\n\ndef draw_arrow():\n    # Draw a red arrow, with its base at (x=1000, y=-500, z=750), and points towards the sphere.\n    starting_point = [1000, -500, 750]\n    pointing_at = [1000, 150, 750]\n    color = qtm.utilities.color.rgb(0.855, 0.161, 0.11)\n    qtm.gui._3d.draw_arrow(starting_point, pointing_at, color)\n\ndef draw_axes():\n    # Draw an axis in (x=-1000, y=-500, z=750) and 500 mm in size.\n    translation_matrix = ([\n            [1.0, 0.0, 0.0, -1000,0],\n            [0.0, 1.0, 0.0,  -500.0],\n            [0.0, 0.0, 1.0,   750.0],\n            [0.0, 0.0, 0.0,     1.0]\n        ])\n    size = 500\n    qtm.gui._3d.draw_axes(translation_matrix, size)\n\ndef draw_text_2d(measurement_time):\n    # Draw the current frames measurement time in the middle of the 3D view.\n    position = [0, 0]\n    font_size = 24\n    text_to_draw = '{:.2f}'.format(measurement_time)\n    origin = {\"horizontal\": \"center\", \"vertical\": \"center\"}\n    alignment = {\"horizontal\": \"center\", \"vertical\": \"center\"}\n    color = qtm.utilities.color.rgb(0.855, 0.161, 0.11)\n    qtm.gui._3d.draw_text_2d(position, font_size, text_to_draw, origin, alignment, color)\n\ndef draw_callback(measurement_time):\n    draw_sphere()\n    draw_arrow()\n    draw_axes()\n    draw_text_2d(measurement_time)\n\n# - Set \"draw_callback\" as the draw function\nqtm.gui._3d.set_draw_function(draw_callback)\n</code></pre> <pre><code>function draw_sphere()\n    -- Draw a red sphere located in (x=1000, y=500, z=750), with a diameter of 500 mm.\n    position = {1000, 500, 750}\n    diameter = 500\n    color = qtm.utilities.color.rgb(0.855, 0.161, 0.11)\n    qtm.gui._3d.draw_sphere(position, diameter, color)\nend\n\nfunction draw_arrow()\n    -- Draw a red arrow, with its base at (x=1000, y=-500, z=750), and points towards the sphere.\n    starting_point = {1000, -500, 750}\n    pointing_at = {1000, 150, 750}\n    color = qtm.utilities.color.rgb(0.855, 0.161, 0.11)\n    qtm.gui._3d.draw_arrow(starting_point, pointing_at, color)\nend\n\nfunction draw_axes()\n    -- Draw an axis in (x=-1000, y=-500, z=750) and 500 mm in size.\n    translation_matrix = {\n        {1.0, 0.0, 0.0, -1000.0},\n        {0.0, 1.0, 0.0,  -500.0},\n        {0.0, 0.0, 1.0,   750.0},\n        {0.0, 0.0, 0.0,     1.0}\n    }\n    qtm.gui._3d.draw_axes(translation_matrix, 500)\nend\n\nfunction draw_text_2d(measurement_time)\n    -- Draw the current frames  measurement time in the middle of the 3D view.\n    position = {0, 0}\n    font_size = 24\n    text_to_draw = string.format(\"%.2f\", measurement_time)\n    origin = {horizontal=\"center\", vertical=\"center\"}\n    alignment = {horizontal=\"center\", vertical=\"center\"}\n    color = qtm.utilities.color.rgb(0.855, 0.161, 0.11)\n    qtm.gui._3d.draw_text_2d(position, font_size, text_to_draw, origin, alignment, color)\nend\n\n\nfunction draw_callback(measurement_time)\n    draw_sphere()\n    draw_arrow()\n    draw_axes()\n    draw_text_2d(measurement_time)\nend\n\n-- - Set \"draw_callback\" as the draw function\nqtm.gui._3d.set_draw_function(draw_callback)\n</code></pre>"}, {"location": "qtm.gui._3d.html#draw_sphere", "title": "draw_sphere", "text": "<p>Draw a sphere.</p> <p>This method may only be used in a draw callback function (see 'set_draw_function').</p> <p>Parameters</p> <p><code>position</code> <code>vec3f</code> The position of the center of the sphere (in millimeters).</p> <p><code>size</code> <code>float</code> The diameter of the sphere (in millimeters).</p> <p><code>color</code> <code>integer?</code> The color of the sphere (in 0xbbggrr format, see 'qtm.utilities.color' module). If null, white (0xffffff) will be used.</p>"}, {"location": "qtm.gui._3d.html#draw_arrow", "title": "draw_arrow", "text": "<p>Draw an arrow.</p> <p>This method may only be used in a draw callback function (see 'set_draw_function').</p> <p>Parameters</p> <p><code>position</code> <code>vec3f</code> The position of the tail of the arrow (in millimeters).</p> <p><code>endpoint</code> <code>vec3f</code> The position of the head of the arrow (in millimeters).</p> <p><code>color</code> <code>integer?</code> The color of the arrow (in 0xbbggrr format, see 'qtm.utilities.color' module). If null, white (0xffffff) will be used.</p>"}, {"location": "qtm.gui._3d.html#draw_axes", "title": "draw_axes", "text": "<p>Draw coordinate system axes.</p> <p>This method may only be used in a draw callback function (see 'set_draw_function').</p> <p>Parameters</p> <p><code>transform</code> <code>mat4x4f</code> The transform of the axes (with translation in millimeters).</p> <p><code>size</code> <code>float</code> The size of the axes (in millimeters).</p>"}, {"location": "qtm.gui._3d.html#draw_mesh", "title": "draw_mesh", "text": "<p>Draw a mesh.</p> <p>This method may only be used in a draw callback function (see 'set_draw_function').</p> <p>Parameters</p> <p><code>transform</code> <code>mat4x4f</code> The transform of the mesh (with translation in millimeters).</p> <p><code>scale</code> <code>float</code> The scale of the mesh (the units of the mesh is assumed to be in meters).</p> <p><code>filename</code> <code>string</code> The filename of the mesh. Only .obj files are supported. The file must be located next to the measurement or in one of the project's meshes folders.</p>"}, {"location": "qtm.gui._3d.html#draw_text_2d", "title": "draw_text_2d", "text": "<p>Draw 2d text.</p> <p>This method may only be used in a draw callback function (see 'set_draw_function').</p> <p>Parameters</p> <p><code>position</code> <code>vec2f</code> The position of the text (in pixels relative to the given origin, with positive axes pointing down-right).</p> <p><code>size</code> <code>integer</code> The font size.</p> <p><code>text</code> <code>string</code> The text.</p> <p><code>origin</code> <code>{\"horizontal\": \"left\"|\"center\"|\"right\", \"vertical\": \"top\"|\"center\"|\"bottom\"}?</code> The origin of the text position (if null, top-left corner will be used).</p> <p><code>alignment</code> <code>{\"horizontal\": \"left\"|\"center\"|\"right\", \"vertical\": \"top\"|\"center\"|\"bottom\"}?</code> The alignment of the text (if null, top-left alignment will be used).</p> <p><code>color</code> <code>integer?</code> The color of the text (in 0xbbggrr format, see 'qtm.utilities.color' module). If null, white (0xffffff) will be used.</p>"}, {"location": "qtm.gui._3d.html#set_draw_function", "title": "set_draw_function", "text": "<p>Set a draw callback function.</p> <p>Parameters</p> <p><code>function</code> <code>function?</code> The function to invoke when the 3d view is redrawn (if null, custom drawing will be disabled). The function must have a single float parameter receiving the measurement time to be drawn (in seconds).</p>"}, {"location": "qtm.gui._3d.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.gui.html", "title": "qtm.gui", "text": "<p>Control and customize the graphical user interface.</p> PythonLua <pre><code>import qtm\n\ndef my_function():\n    qtm.gui.terminal.write(\"my_function() was called\")\n\n# - List all available built-in commands\nprint(qtm.gui.get_commands(\"builtin\"))\n# ['save_file_as', 'generate_aim_model_from_multiple_files', 'swap_trajectory_current_part', ... ...\n\n# - List all available user commands\nprint(qtm.gui.get_commands(\"user\"))\n# []\n\n# - Add a user command\nmy_command_name = \"my_command\"\nqtm.gui.add_command(my_command_name)\n\n# - List all available user commands\nprint(qtm.gui.get_commands(\"user\"))\n# ['my_command']\n\n# - Set command execute function\nqtm.gui.set_command_execute_function(my_command_name, my_function)\n\n# - Send command\nqtm.gui.send_command(my_command_name)\n# my_function() was called\n\n# - Set shortcut to a command\nshortcut = {\"ctrl\": True, \"alt\": False, \"shift\": True, \"key\": \"z\"}\nqtm.gui.set_accelerator(shortcut, my_command_name)\n\n# - Pressing \"ctrl+shift+z\":\n# my_function() was called\n\n# - Add a menu in the main menu\nmenu_name = \"My menu\"\nmy_menu_handle = qtm.gui.insert_menu_submenu(None, menu_name)\n\n# - Add a menu button in \"My menu\" and connect it to \"my_command\"\nmenu_first_button_name = \"User command: {}\".format(my_command_name)\nqtm.gui.insert_menu_button(my_menu_handle, menu_first_button_name, my_command_name)\n\n# - Add a submenu in \"My menu\"\nsubmenu_name = \"My submenu\"\nmy_submenu_item_handle = qtm.gui.insert_menu_submenu(my_menu_handle, submenu_name)\n\n# - Add a menu button in the submenu \"My submenu\" and connect it to the built-in command \"add_event\".\nadd_event_command_name = \"add_event\"\nmenu_second_button_name = \"Built-in command: {}\".format(add_event_command_name)\nqtm.gui.insert_menu_button(my_submenu_item_handle, menu_second_button_name, add_event_command_name)\n\n# - Add a separator between the button \"My first button\" and submenu \"My submenu\"\nmenu_index = 1\nqtm.gui.insert_menu_separator(my_menu_handle, menu_index)\n</code></pre> <pre><code>function my_function()\n    qtm.gui.terminal.write(\"my_function() was called\")\nend\n\n-- - List all available built-in commands\nprint(qtm.gui.get_commands(\"builtin\"))\n-- {\"save_file_as\", \"generate_aim_model_from_multiple_files\", \"swap_trajectory_current_part\", ... ...\n\n-- - List all available user commands\nprint(qtm.gui.get_commands(\"user\"))\n-- {}\n\n-- - Add a user command\nmy_command_name = \"my_command\"\nqtm.gui.add_command(my_command_name)\n\n-- - List all available user commands\nprint(qtm.gui.get_commands(\"user\"))\n-- {\"my_command\"}\n\n-- - Set command execute function\nqtm.gui.set_command_execute_function(my_command_name, my_function)\n\n-- - Send command\nqtm.gui.send_command(my_command_name)\n-- my_function() was called\n\n-- - Set shortcut to a command\nshortcut = {ctrl = true, alt = false, shift = true, key = \"z\"}\nqtm.gui.set_accelerator(shortcut, my_command_name)\n\n-- - Pressing \"ctrl+shift+z\":\n-- my_function() was called\n\n-- - Add a menu in the main menu\nmenu_name = \"My menu\"\nmy_menu_handle = qtm.gui.insert_menu_submenu(nil, menu_name)\n\n-- - Add a menu button in \"My menu\" and connect it to \"my_command\"\nmenu_first_button_name = string.format(\"User command: %s\", my_command_name)\nqtm.gui.insert_menu_button(my_menu_handle, menu_first_button_name, my_command_name)\n\n-- - Add a submenu in \"My menu\"\nsubmenu_name = \"My submenu\"\nmy_submenu_item_handle = qtm.gui.insert_menu_submenu(my_menu_handle, submenu_name)\n\n-- - Add a menu button in the submenu \"My submenu\" and connect it to the built-in command \"add_event\".\nadd_event_command_name = \"add_event\"\nmenu_second_button_name = string.format(\"Built-in command: %s\", add_event_command_name)\n\nqtm.gui.insert_menu_button(my_submenu_item_handle, menu_second_button_name, add_event_command_name)\n\n-- - Add a separator between the button \"My first button\" and submenu \"My submenu\"\nmenu_index = 1\nqtm.gui.insert_menu_separator(my_menu_handle, menu_index)\n</code></pre>"}, {"location": "qtm.gui.html#add_command", "title": "add_command", "text": "<p>Add a command.</p> <p>The command will be added as a user command. Use 'set_command_execute_function' and 'set_command_update_function' to set the behavior of the command (by default, it will be enabled and do nothing).</p> <p>Parameters</p> <p><code>command</code> <code>string</code> The command.</p>"}, {"location": "qtm.gui.html#get_commands", "title": "get_commands", "text": "<p>Get the available commands.</p> <p>Parameters</p> <p><code>type</code> <code>\"builtin\"|\"user\"?</code> The command type to get (if null, all command types will be returned).</p> <p>Returns</p> <p><code>[string]</code> </p>"}, {"location": "qtm.gui.html#send_command", "title": "send_command", "text": "<p>Send a command.</p> <p>This is equivalent to clicking a button. Note that if the update function of the command returns false (equivalent to a button being grey/disabled) the command will not be executed.</p> <p>Parameters</p> <p><code>command</code> <code>string</code> The command to send (for a list of available commands, see 'get_commands').</p>"}, {"location": "qtm.gui.html#set_accelerator", "title": "set_accelerator", "text": "<p>Set an accelerator (hotkey/shortcut) for a command.</p> <p>If the accelerator already exists for a different command, it will be overwritten.</p> <p>Parameters</p> <p><code>accelerator</code> <code>{\"ctrl\": bool, \"alt\": bool, \"shift\": bool, \"key\": \"0\"|\"1\"|\"2\"|\"3\"|\"4\"|\"5\"|\"6\"|\"7\"|\"8\"|\"9\"|\"a\"|\"b\"|\"c\"|\"d\"|\"e\"|\"f\"|\"g\"|\"h\"|\"i\"|\"j\"|\"k\"|\"l\"|\"m\"|\"n\"|\"o\"|\"p\"|\"q\"|\"r\"|\"s\"|\"t\"|\"u\"|\"v\"|\"w\"|\"x\"|\"y\"|\"z\"|\"f1\"|\"f2\"|\"f3\"|\"f4\"|\"f5\"|\"f6\"|\"f7\"|\"f8\"|\"f9\"|\"f10\"|\"f11\"|\"f12\"|\"f13\"|\"f14\"|\"f15\"|\"f16\"|\"f17\"|\"f18\"|\"f19\"|\"f20\"|\"f21\"|\"f22\"|\"f23\"|\"f24\"|\"numpad_0\"|\"numpad_1\"|\"numpad_2\"|\"numpad_3\"|\"numpad_4\"|\"numpad_5\"|\"numpad_6\"|\"numpad_7\"|\"numpad_8\"|\"numpad_9\"|\"escape\"|\"backspace\"|\"tab\"|\"clear\"|\"enter\"|\"pause\"|\"insert\"|\"delete\"|\"home\"|\"end\"|\"page_up\"|\"page_down\"|\"left\"|\"right\"|\"up\"|\"down\"|\"select\"|\"print\"|\"execute\"|\"help\"|\"add\"|\"subtract\"|\"multiply\"|\"divide\"|\"decimal\"|\"separator\"|\"plus\"|\"minus\"|\"comma\"|\"period\"|\"num_lock\"|\"caps_lock\"|\"scroll_lock\"|\"oem_1\"|\"oem_2\"|\"oem_3\"|\"oem_4\"|\"oem_5\"|\"oem_6\"|\"oem_7\"|\"oem_8\"|\"oem_102\"}</code> The accelerator.</p> <p><code>command</code> <code>string</code> The command to send when the accelerator is invoked (for a list of available commands, see 'get_commands').</p>"}, {"location": "qtm.gui.html#get_menu_item", "title": "get_menu_item", "text": "<p>Get an item from a menu or submenu.</p> <p>Parameters</p> <p><code>menu</code> <code>integer?</code> The handle to the menu (if null, the main menu will be used).</p> <p><code>index</code> <code>integer</code> The index of the item in the menu.</p> <p>Returns</p> <p><code>{\"text\": string, \"command\": string, \"submenu\": integer}</code> </p>"}, {"location": "qtm.gui.html#get_menu_items", "title": "get_menu_items", "text": "<p>Get all items from a menu or submenu.</p> <p>Parameters</p> <p><code>menu</code> <code>integer?</code> The handle to the menu (if null, the main menu will be used).</p> <p>Returns</p> <p><code>[{\"text\": string, \"command\": string, \"submenu\": integer}]</code> </p>"}, {"location": "qtm.gui.html#get_menu_item_count", "title": "get_menu_item_count", "text": "<p>Get the number of items in a menu or submenu.</p> <p>Parameters</p> <p><code>menu</code> <code>integer?</code> The handle to the menu (if null, the main menu will be used).</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.gui.html#insert_menu_button", "title": "insert_menu_button", "text": "<p>Insert a button into a menu or submenu.</p> <p>Parameters</p> <p><code>menu</code> <code>integer?</code> The handle to the menu (if null, the main menu will be used).</p> <p><code>text</code> <code>string</code> The button text.</p> <p><code>command</code> <code>string</code> The command to execute when button is pressed (for a list of available commands, see 'get_commands').</p> <p><code>index</code> <code>integer?</code> The index where the button will be inserted (if null, the button will be inserted at the end).</p>"}, {"location": "qtm.gui.html#insert_menu_separator", "title": "insert_menu_separator", "text": "<p>Insert a separator into a menu or submenu.</p> <p>Parameters</p> <p><code>menu</code> <code>integer?</code> The handle to the menu (if null, the main menu will be used).</p> <p><code>index</code> <code>integer?</code> The index where the separator will be inserted (if null, the separator will be inserted at the end).</p>"}, {"location": "qtm.gui.html#insert_menu_submenu", "title": "insert_menu_submenu", "text": "<p>Insert a submenu into a menu or submenu.</p> <p>Parameters</p> <p><code>menu</code> <code>integer?</code> The handle to the menu (if null, the main menu will be used).</p> <p><code>text</code> <code>string</code> The submenu text.</p> <p><code>index</code> <code>integer?</code> The index where the submenu will be inserted (if null, the submenu will inserted at the end).</p> <p>Returns</p> <p><code>integer</code> The handle to the inserted submenu.</p>"}, {"location": "qtm.gui.html#delete_menu_item", "title": "delete_menu_item", "text": "<p>Delete an item in a menu or submenu.</p> <p>Parameters</p> <p><code>menu</code> <code>integer?</code> The handle to the menu (if null, the main menu will be used).</p> <p><code>index</code> <code>integer</code> The index of the item to delete.</p>"}, {"location": "qtm.gui.html#set_command_execute_function", "title": "set_command_execute_function", "text": "<p>Set an execute callback function for a command.</p> <p>The command must've been added by a previous call to 'add_command'. This method cannot be used to overwrite built-in commands or user commands added by other instances of this module.</p> <p>Parameters</p> <p><code>command</code> <code>string</code> The command.</p> <p><code>function</code> <code>function?</code> The function to invoke when the command is executed (if null, execution of the command will be disabled).</p>"}, {"location": "qtm.gui.html#set_command_update_function", "title": "set_command_update_function", "text": "<p>Set an update callback function for a command.</p> <p>This can be used to conditionally disable commands and grey out buttons. The command must've been added by a previous call to 'add_command'. This method cannot be used to overwrite built-in commands or user commands added by other instances of this module.</p> <p>Parameters</p> <p><code>command</code> <code>string</code> The command.</p> <p><code>function</code> <code>function?</code> The function to invoke when the command is updated (if null, the command will be enabled by default). Must return a boolean indicating if the command should be enabled.</p>"}, {"location": "qtm.gui.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.gui.message.html", "title": "qtm.gui.message", "text": "<p>Interface to the messages window.</p> PythonLuaREST <pre><code>import qtm\n\nqtm.gui.message.add_message(\"information message\", \"detailed information\", \"info\")\n\nqtm.gui.message.add_message(\"warning message\", \"detailed information\", \"warning\")\n\nqtm.gui.message.add_message(\"error message\", \"detailed information\", \"error\")\n</code></pre> <pre><code>qtm.gui.message.add_message(\"information message\", \"detailed information\", \"info\")\n\nqtm.gui.message.add_message(\"warning message\", \"detailed information\", \"warning\")\n\nqtm.gui.message.add_message(\"error message\", \"detailed information\", \"error\")\n</code></pre> <pre><code>curl --json \"[\\\"information message\\\", \\\"detailed information\\\", \\\"info\\\"]\" http://localhost:7979/api/scripting/qtm/gui/message/add_message/\n\ncurl --json \"[\\\"warning message\\\", \\\"detailed information\\\", \\\"warning\\\"]\" http://localhost:7979/api/scripting/qtm/gui/message/add_message/\n\ncurl --json \"[\\\"error message\\\", \\\"detailed information\\\", \\\"error\\\"]\" http://localhost:7979/api/scripting/qtm/gui/message/add_message/\n</code></pre>"}, {"location": "qtm.gui.message.html#add_message", "title": "add_message", "text": "<p>Add a message.</p> <p>Parameters</p> <p><code>message</code> <code>string</code> The message (shown in the message log).</p> <p><code>details</code> <code>string</code> Detailed information (shown when double-clicking the message).</p> <p><code>type</code> <code>\"info\"|\"warning\"|\"error\"</code> The type of message.</p>"}, {"location": "qtm.gui.message.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.gui.selection.html", "title": "qtm.gui.selection", "text": "<p>Access and modify the current selection.</p> <p>Selections consists of a type, an identifier and an optional part index (only relevant for trajectory types). Different types cannot be selected simultaneously. A null part index means the entire trajectory is selected (and implicitly, all of its parts).</p> PythonLuaREST <pre><code>import qtm\n\nid_f_headtop = qtm.data.object.trajectory.find_trajectory(\"F_HeadTop\")\nid_f_headfront = qtm.data.object.trajectory.find_trajectory(\"F_HeadFront\")\n\nselect = [{\"type\": \"trajectory\", \"id\": id_f_headtop, \"part_index\": None},\n          {\"type\": \"trajectory\", \"id\": id_f_headfront, \"part_index\": None}]\n\nqtm.gui.selection.clear_selections()\nprint(qtm.gui.selection.get_selection_count())\n# 0\n\nqtm.gui.selection.select(select)\n\nprint(qtm.gui.selection.get_selection_count())\n# 2\n\nprint(qtm.gui.selection.get_selections())\n# [{'type': 'trajectory', 'id': 106051, 'part_index': None}, {'type': 'trajectory', 'id': 106053, 'part_index': None}]\n</code></pre> <pre><code>id_f_headtop = qtm.data.object.trajectory.find_trajectory(\"F_HeadTop\")\nid_f_headfront = qtm.data.object.trajectory.find_trajectory(\"F_HeadFront\")\n\nselect = {{type = \"trajectory\", id = id_f_headtop, part_index = nil},\n          {type = \"trajectory\", id = id_f_headfront, part_index = nil}}\n\nqtm.gui.selection.clear_selections()\nprint(qtm.gui.selection.get_selection_count())\n-- 0\n\nqtm.gui.selection.select(select)\n\nprint(qtm.gui.selection.get_selection_count())\n-- 2\n\nprint(qtm.gui.selection.get_selections())\n-- {{id = 106051, type = \"trajectory\"}, {id = 106053, type = \"trajectory\"}}\n</code></pre> <pre><code>for /f \"usebackq delims=\" %%i in (`curl -s --json \"[\\\"F_HeadTop\\\"]\" http://localhost:7979/api/scripting/qtm/data/object/trajectory/find_trajectory/`) do (\n  set \"id_f_headtop=%%i\"\n)\nfor /f \"usebackq delims=\" %%i in (`curl -s --json \"[\\\"F_HeadFront\\\"]\" http://localhost:7979/api/scripting/qtm/data/object/trajectory/find_trajectory/`) do (\n  set \"id_f_headfront=%%i\"\n)\n\nset select=[{\\\"type\\\": \\\"trajectory\\\", \\\"id\\\": %id_f_headtop%, \\\"part_index\\\": null}, {\\\"type\\\": \\\"trajectory\\\", \\\"id\\\": %id_f_headfront%, \\\"part_index\\\": null}]\n\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/gui/selection/clear_selections/\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/gui/selection/get_selection_count/\n:: 0\n\ncurl --json \"[%select%]\" http://localhost:7979/api/scripting/qtm/gui/selection/select/\n\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/gui/selection/get_selection_count/\n:: 2\n\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/gui/selection/get_selections/\n:: [{\"id\":106051,\"part_index\":null,\"type\":\"trajectory\"},{\"id\":106053,\"part_index\":null,\"type\":\"trajectory\"}]\n</code></pre>"}, {"location": "qtm.gui.selection.html#clear_selections", "title": "clear_selections", "text": "<p>Remove all selections.</p> <p>Parameters</p> <p><code>type</code> <code>\"trajectory\"|\"bone\"?</code> The selection type to remove (if null, all selection types will be removed).</p>"}, {"location": "qtm.gui.selection.html#is_selected", "title": "is_selected", "text": "<p>Get whether an object is currently selected.</p> <p>Parameters</p> <p><code>selection</code> <code>{\"type\": \"trajectory\"|\"bone\", \"id\": integer, \"part_index\": integer?}</code> The object.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.gui.selection.html#get_selection_count", "title": "get_selection_count", "text": "<p>Get the current number of selections.</p> <p>Parameters</p> <p><code>type</code> <code>\"trajectory\"|\"bone\"?</code> The selection type to count (if null, all selection types will be counted).</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.gui.selection.html#get_selections", "title": "get_selections", "text": "<p>Get the current selections.</p> <p>Parameters</p> <p><code>type</code> <code>\"trajectory\"|\"bone\"?</code> The selection type to get (if null, all selection types will be returned).</p> <p>Returns</p> <p><code>[{\"type\": \"trajectory\"|\"bone\", \"id\": integer, \"part_index\": integer?}]</code> </p>"}, {"location": "qtm.gui.selection.html#set_selections", "title": "set_selections", "text": "<p>Set the current selections.</p> <p>This will overwrite any existing selections.</p> <p>Parameters</p> <p><code>selections</code> <code>[{\"type\": \"trajectory\"|\"bone\", \"id\": integer, \"part_index\": integer?}]</code> The selections.</p>"}, {"location": "qtm.gui.selection.html#select", "title": "select", "text": "<p>Select objects.</p> <p>Parameters</p> <p><code>selections</code> <code>[{\"type\": \"trajectory\"|\"bone\", \"id\": integer, \"part_index\": integer?}]</code> The objects to select.</p>"}, {"location": "qtm.gui.selection.html#deselect", "title": "deselect", "text": "<p>Deselect objects.</p> <p>Parameters</p> <p><code>selections</code> <code>[{\"type\": \"trajectory\"|\"bone\", \"id\": integer, \"part_index\": integer?}]</code> The objects to deselect.</p>"}, {"location": "qtm.gui.selection.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.gui.terminal.html", "title": "qtm.gui.terminal", "text": "<p>Interface to the terminal window.</p> PythonLuaREST <pre><code>import qtm\n\nqtm.gui.terminal.clear()\n\nqtm.gui.terminal.write(\"message in terminal\")\n</code></pre> <pre><code>qtm.gui.terminal.clear()\n\nqtm.gui.terminal.write(\"message in terminal\")\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/gui/terminal/clear/\n\ncurl --json \"[\\\"message in terminal\\\"]\" http://localhost:7979/api/scripting/qtm/gui/terminal/write/\n</code></pre>"}, {"location": "qtm.gui.terminal.html#clear", "title": "clear", "text": "<p>Clear the terminal.</p> <p>This method is used internally by the global 'clear' function.</p>"}, {"location": "qtm.gui.terminal.html#write", "title": "write", "text": "<p>Write text in the terminal.</p> <p>This method is used internally by the global 'print' function.</p> <p>Parameters</p> <p><code>text</code> <code>string</code> The text to write.</p>"}, {"location": "qtm.gui.terminal.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.gui.timeline.html", "title": "qtm.gui.timeline", "text": "<p>Interface to the measurement timeline.</p> PythonLuaREST <pre><code>import qtm\n\nmeasured_range = qtm.gui.timeline.get_measured_range()\nprint(measured_range)\n# {'start': 0, 'end': 322}\n\nrange = {\"start\": int(measured_range[\"end\"]*0.10), \"end\": int(measured_range[\"end\"]*0.90)}\nqtm.gui.timeline.set_selected_range(range)\n\nprint(qtm.gui.timeline.get_selected_range())\n# {'start': 32, 'end': 289}\n</code></pre> <pre><code>measured_range = qtm.gui.timeline.get_measured_range()\nprint(measured_range)\n-- {start: 0, end: 322}\n\nrange = {[\"start\"] = math.floor(measured_range[\"end\"]*0.10), [\"end\"] = math.floor(measured_range[\"end\"]*0.90)}\nqtm.gui.timeline.set_selected_range(range)\n\nprint(qtm.gui.timeline.get_selected_range())\n-- {start: 32, end: 289}\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/gui/timeline/get_measured_range/\n:: {\"end\":322,\"start\":0}\n\nset range={\\\"start\\\": 32, \\\"end\\\": 289}\ncurl --json \"[%range%]\" http://localhost:7979/api/scripting/qtm/gui/timeline/set_selected_range/\n\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/gui/timeline/get_selected_range/\n:: {\"end\":289,\"start\":32}\n</code></pre>"}, {"location": "qtm.gui.timeline.html#get_frequency", "title": "get_frequency", "text": "<p>Get the frequency.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.gui.timeline.html#get_frame_count", "title": "get_frame_count", "text": "<p>Get the total number of frames.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.gui.timeline.html#get_current_time", "title": "get_current_time", "text": "<p>Get the current time.</p> <p>Returns</p> <p><code>float</code> The current time (in seconds).</p>"}, {"location": "qtm.gui.timeline.html#get_current_frame", "title": "get_current_frame", "text": "<p>Get the current frame number.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.gui.timeline.html#set_current_frame", "title": "set_current_frame", "text": "<p>Set the current frame number.</p> <p>Parameters</p> <p><code>frame</code> <code>integer</code> The new current frame number (must be within the current selected range).</p>"}, {"location": "qtm.gui.timeline.html#get_measured_range", "title": "get_measured_range", "text": "<p>Get the measured range.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.gui.timeline.html#set_measured_range", "title": "set_measured_range", "text": "<p>Set the measured range.</p> <p>This is equivalent to doing a trim operation.</p> <p>Parameters</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The new measured range.</p>"}, {"location": "qtm.gui.timeline.html#get_selected_range", "title": "get_selected_range", "text": "<p>Get the selected range.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.gui.timeline.html#set_selected_range", "title": "set_selected_range", "text": "<p>Set the selected range.</p> <p>Parameters</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The new selected range (must be within the measured range).</p>"}, {"location": "qtm.gui.timeline.html#get_trace_range", "title": "get_trace_range", "text": "<p>Get the trace range.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.gui.timeline.html#set_trace_range", "title": "set_trace_range", "text": "<p>Set the trace range.</p> <p>Parameters</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The new trace range (must be within the current selected range).</p>"}, {"location": "qtm.gui.timeline.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.html", "title": "qtm", "text": "<p>Interface to the qtm application.</p> PythonLuaREST <pre><code>import qtm\n\nprint(qtm.get_version())\n# {'major': 2023, 'minor': 1, 'build': 7928}\n</code></pre> <pre><code>print(qtm.get_version()) \n-- {build = 7928, minor = 1, major = 2023}\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/get_version/\n:: {\"build\":7928,\"major\":2023,\"minor\":1}\n</code></pre>"}, {"location": "qtm.html#get_version", "title": "get_version", "text": "<p>Get the version number of qtm.</p> <p>Returns</p> <p><code>{\"major\": integer, \"minor\": integer, \"build\": integer}</code> </p>"}, {"location": "qtm.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.camera.html", "title": "qtm.settings.camera", "text": "<p>Access and modify camera settings.</p> PythonLuaREST <pre><code>import qtm\n\nprint(qtm.settings.camera.get_system_type(\"measurement\"))\n# miqus\n\ncamera_type = \"miqus\"\nprint(qtm.settings.camera.get_camera_count(\"measurement\", camera_type))\n# 10\n\ncamera_index = 5\nprint(qtm.settings.camera.get_camera_model(\"measurement\", camera_index))\n# miqus m3\n\nprint(qtm.settings.camera.get_serial_number(\"measurement\", camera_index))\n# 20658\n\nprint(qtm.settings.camera.is_calibrated(\"measurement\", camera_index))\n# True\n</code></pre> <pre><code>print(qtm.settings.camera.get_system_type(\"measurement\"))\n-- miqus\n\ncamera_type = \"miqus\"\nprint(qtm.settings.camera.get_camera_count(\"measurement\", camera_type))\n-- 10\n\ncamera_index = 5\nprint(qtm.settings.camera.get_camera_model(\"measurement\", camera_index))\n-- miqus m3\n\nprint(qtm.settings.camera.get_serial_number(\"measurement\", camera_index))\n-- 20658\n\nprint(qtm.settings.camera.is_calibrated(\"measurement\", camera_index))\n-- true\n</code></pre> <pre><code>curl --json \"[\\\"measurement\\\"]\" http://localhost:7979/api/scripting/qtm/settings/camera/get_system_type/\n:: \"miqus\"\n\nset camera_type=\\\"miqus\\\"\ncurl --json \"[\\\"measurement\\\", %camera_type%]\" http://localhost:7979/api/scripting/qtm/settings/camera/get_camera_count/\n:: 10\n\nset camera_index=5\ncurl --json \"[\\\"measurement\\\", %camera_index%]\" http://localhost:7979/api/scripting/qtm/settings/camera/get_camera_model/\n:: miqus m3\n\ncurl --json \"[\\\"measurement\\\", %camera_index%]\" http://localhost:7979/api/scripting/qtm/settings/camera/get_serial_number/\n:: 20658\n\ncurl --json \"[\\\"measurement\\\", %camera_index%]\" http://localhost:7979/api/scripting/qtm/settings/camera/is_calibrated/\n:: true\n</code></pre>"}, {"location": "qtm.settings.camera.html#get_system_type", "title": "get_system_type", "text": "<p>Get the camera system type.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>\"oqus\"|\"miqus\"|\"arqus\"|\"mixed\"</code> </p>"}, {"location": "qtm.settings.camera.html#get_camera_count", "title": "get_camera_count", "text": "<p>Get the number of cameras.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>type</code> <code>\"oqus\"|\"miqus\"|\"arqus\"?</code> The camera type to count (if null, all camera types will be counted).</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.camera.html#get_use_circularity_filtering", "title": "get_use_circularity_filtering", "text": "<p>Get whether to filter markers by circularity.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#set_use_circularity_filtering", "title": "set_use_circularity_filtering", "text": "<p>Set whether to filter markers by circularity.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if markers should be filtered by circularity, otherwise false.</p>"}, {"location": "qtm.settings.camera.html#get_camera_type", "title": "get_camera_type", "text": "<p>Get the type of a camera.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>\"oqus\"|\"miqus\"|\"arqus\"</code> </p>"}, {"location": "qtm.settings.camera.html#get_camera_model", "title": "get_camera_model", "text": "<p>Get the model of a camera.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.camera.html#get_serial_number", "title": "get_serial_number", "text": "<p>Get the serial number of a camera.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.camera.html#get_memory_size", "title": "get_memory_size", "text": "<p>Get the memory size of a camera.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>integer</code> The memory size of the camera (in bytes).</p>"}, {"location": "qtm.settings.camera.html#get_view_rotation", "title": "get_view_rotation", "text": "<p>Get the view rotation of a camera.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>\"0\"|\"90\"|\"180\"|\"270\"</code> </p>"}, {"location": "qtm.settings.camera.html#is_active", "title": "is_active", "text": "<p>Get whether a camera is active (used for tracking).</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_master", "title": "is_master", "text": "<p>Get whether a camera is master.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_linearized", "title": "is_linearized", "text": "<p>Get whether a camera is linearized.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_calibrated", "title": "is_calibrated", "text": "<p>Get whether a camera is calibrated.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_waterproof", "title": "is_waterproof", "text": "<p>Get whether a camera is waterproof (for underwater usage).</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_protected", "title": "is_protected", "text": "<p>Get whether a camera is dust and water protected (for outdoor usage).</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_shielded", "title": "is_shielded", "text": "<p>Get whether a camera is emi shielded (for mri usage).</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_wireless", "title": "is_wireless", "text": "<p>Get whether a camera is wireless.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_highspeed", "title": "is_highspeed", "text": "<p>Get whether a camera supports high-speed video.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_color", "title": "is_color", "text": "<p>Get whether a camera has a color sensor.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#is_twin", "title": "is_twin", "text": "<p>Get whether a camera is from a twin camera system.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the camera.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.camera.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.directory.html", "title": "qtm.settings.directory", "text": "<p>Access and modify directory settings.</p> PythonLuaREST <pre><code>import qtm\n\nprint(qtm.settings.directory.get_project_directory())\n# C:\\Users\\&lt;username&gt;\\Documents\\Project\\\n\nprint(qtm.settings.directory.get_calibration_directory())\n# C:\\Users\\&lt;username&gt;\\Documents\\Project\\Calibrations\\\n\nprint(qtm.settings.directory.get_auto_save_directory())\n# C:\\Users\\&lt;username&gt;\\AppData\\Local\\Temp\\\n\nauto_save_directory = \"C:/Users/&lt;username&gt;/Documents/Project/AutoSave/\"\nqtm.settings.directory.set_auto_save_directory(auto_save_directory)\nprint(qtm.settings.directory.get_auto_save_directory())\n# C:\\Users\\&lt;username&gt;\\Documents\\Project\\AutoSave\\\n</code></pre> <pre><code>print(qtm.settings.directory.get_project_directory())\n-- C:\\Users\\&lt;username&gt;\\Documents\\Project\\\n\nprint(qtm.settings.directory.get_calibration_directory())\n-- C:\\Users\\&lt;username&gt;\\Documents\\Project\\Calibrations\\\n\nprint(qtm.settings.directory.get_auto_save_directory())\n-- C:\\Users\\&lt;username&gt;\\AppData\\Local\\Temp\\\n\nauto_save_directory = \"C:/Users/&lt;username&gt;/Documents/Project/AutoSave/\"\nqtm.settings.directory.set_auto_save_directory(auto_save_directory)\nprint(qtm.settings.directory.get_auto_save_directory())\n-- C:\\Users\\&lt;username&gt;\\Documents\\Project\\AutoSave\\\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/settings/directory/get_project_directory/\n:: \"C:\\\\Users\\\\&lt;username&gt;\\\\Documents\\\\Project\\\\\"\n\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/settings/directory/get_calibration_directory/\n:: \"C:\\\\Users\\\\&lt;username&gt;\\\\Documents\\\\Project\\\\Calibrations\\\\\"\n\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/settings/directory/get_auto_save_directory/\n:: \"C:\\\\Users\\\\&lt;username&gt;\\\\AppData\\\\Local\\\\Temp\\\\\"\n\nset auto_save_directory=\\\"C:\\\\Users\\\\&lt;username&gt;\\\\Documents\\\\Project\\\\AutoSave\\\\\\\"\ncurl --json \"[%auto_save_directory%]\" http://localhost:7979/api/scripting/qtm/settings/camera/set_auto_save_directory/\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/settings/directory/get_auto_save_directory/\n:: \"C:\\\\Users\\\\&lt;username&gt;\\\\Documents\\\\Project\\\\AutoSave\\\\\"\n</code></pre>"}, {"location": "qtm.settings.directory.html#get_project_directory", "title": "get_project_directory", "text": "<p>Get the project directory path.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.directory.html#get_calibration_directory", "title": "get_calibration_directory", "text": "<p>Get the calibration directory path.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.directory.html#set_calibration_directory", "title": "set_calibration_directory", "text": "<p>Set the calibration directory path.</p> <p>Parameters</p> <p><code>directory</code> <code>string</code> The calibration directory path.</p>"}, {"location": "qtm.settings.directory.html#get_aim_directory", "title": "get_aim_directory", "text": "<p>Get the aim model directory path.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.directory.html#set_aim_directory", "title": "set_aim_directory", "text": "<p>Set the aim model directory path.</p> <p>Parameters</p> <p><code>directory</code> <code>string</code> The aim model directory path.</p>"}, {"location": "qtm.settings.directory.html#get_default_project_directory", "title": "get_default_project_directory", "text": "<p>Get the default project directory path.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.directory.html#set_default_project_directory", "title": "set_default_project_directory", "text": "<p>Set the default project directory path.</p> <p>Parameters</p> <p><code>directory</code> <code>string</code> The default project directory path.</p>"}, {"location": "qtm.settings.directory.html#get_temp_video_directory", "title": "get_temp_video_directory", "text": "<p>Get the temporary video directory path.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.directory.html#set_temp_video_directory", "title": "set_temp_video_directory", "text": "<p>Set the temporary video directory path.</p> <p>Parameters</p> <p><code>directory</code> <code>string</code> The temporary video directory path.</p>"}, {"location": "qtm.settings.directory.html#get_auto_save_directory", "title": "get_auto_save_directory", "text": "<p>Get the auto save directory path.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.directory.html#set_auto_save_directory", "title": "set_auto_save_directory", "text": "<p>Set the auto save directory path.</p> <p>Parameters</p> <p><code>directory</code> <code>string</code> The auto save directory path.</p>"}, {"location": "qtm.settings.directory.html#get_linearization_directory", "title": "get_linearization_directory", "text": "<p>Get the linearization directory path.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.directory.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.euler.html", "title": "qtm.settings.euler", "text": "<p>Access and modify euler angle settings.</p> PythonLuaREST <pre><code>import qtm\n\nprint(qtm.settings.euler.get_first_axis_name())\n# Roll\nprint(qtm.settings.euler.get_first_angle_range())\n# {'start': -180, 'end': 180}\n\nprint(qtm.settings.euler.get_second_axis_name())\n# Pitch\n\nprint(qtm.settings.euler.get_third_axis_name())\n# Yaw\nprint(qtm.settings.euler.get_third_angle_range())\n# {'start': -180, 'end': 180}\n</code></pre> <pre><code>print(qtm.settings.euler.get_first_axis_name())\n-- Roll\nprint(qtm.settings.euler.get_first_angle_range())\n-- {start = -180, end = 180}\n\nprint(qtm.settings.euler.get_second_axis_name())\n-- Pitch\n\nprint(qtm.settings.euler.get_third_axis_name())\n-- Yaw\nprint(qtm.settings.euler.get_third_angle_range())\n-- {start = -180, end = 180}\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/settings/euler/get_first_axis_name/\n:: \"Roll\"\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/settings/euler/get_first_angle_range/\n:: {\"end\":180,\"start\":-180}\n\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/settings/euler/get_second_axis_name/\n:: \"Pitch\"\n\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/settings/euler/get_third_axis_name/\n:: \"Yaw\"\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/settings/euler/get_third_angle_range/\n:: {\"end\":180,\"start\":-180}\n</code></pre>"}, {"location": "qtm.settings.euler.html#get_convention", "title": "get_convention", "text": "<p>Get the euler angle convention.</p> <p>Returns</p> <p><code>\"qualisys\"|\"custom\"</code> </p>"}, {"location": "qtm.settings.euler.html#set_convention", "title": "set_convention", "text": "<p>Set the euler angle convention.</p> <p>Parameters</p> <p><code>convention</code> <code>\"qualisys\"|\"custom\"</code> The euler angle convention.</p>"}, {"location": "qtm.settings.euler.html#get_sequence", "title": "get_sequence", "text": "<p>Get the euler angle sequence.</p> <p>Returns</p> <p><code>\"xyx\"|\"xzx\"|\"yxy\"|\"yzy\"|\"zxz\"|\"zyz\"|\"xyz\"|\"xzy\"|\"yxz\"|\"yzx\"|\"zxy\"|\"zyx\"</code> </p>"}, {"location": "qtm.settings.euler.html#set_sequence", "title": "set_sequence", "text": "<p>Set the euler angle sequence.</p> <p>This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>sequence</code> <code>\"xyx\"|\"xzx\"|\"yxy\"|\"yzy\"|\"zxz\"|\"zyz\"|\"xyz\"|\"xzy\"|\"yxz\"|\"yzx\"|\"zxy\"|\"zyx\"</code> The euler angle sequence.</p>"}, {"location": "qtm.settings.euler.html#get_use_extrinsic_axes", "title": "get_use_extrinsic_axes", "text": "<p>Get whether to use extrinsic (fixed) axes.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.euler.html#set_use_extrinsic_axes", "title": "set_use_extrinsic_axes", "text": "<p>Set whether to use extrinsic (fixed) axes.</p> <p>This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if extrinsic axes should be used, otherwise false.</p>"}, {"location": "qtm.settings.euler.html#get_first_axis_name", "title": "get_first_axis_name", "text": "<p>Get the name of the first rotation axis.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.euler.html#set_first_axis_name", "title": "set_first_axis_name", "text": "<p>Set the name of the first rotation axis.</p> <p>This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>name</code> <code>string</code> The name of the first rotation axis.</p>"}, {"location": "qtm.settings.euler.html#get_second_axis_name", "title": "get_second_axis_name", "text": "<p>Get the name of the second rotation axis.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.euler.html#set_second_axis_name", "title": "set_second_axis_name", "text": "<p>Set the name of the second rotation axis.</p> <p>This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>name</code> <code>string</code> The name of the second rotation axis.</p>"}, {"location": "qtm.settings.euler.html#get_third_axis_name", "title": "get_third_axis_name", "text": "<p>Get the name of the third rotation axis.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.euler.html#set_third_axis_name", "title": "set_third_axis_name", "text": "<p>Set the name of the third rotation axis.</p> <p>This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>name</code> <code>string</code> The name of the third rotation axis.</p>"}, {"location": "qtm.settings.euler.html#get_first_angle_left_handed", "title": "get_first_angle_left_handed", "text": "<p>Get whether to use left-handed first rotation angle.</p> <p>Left-handed means counter-clockwise facing positive direction of rotation axis.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.euler.html#set_first_angle_left_handed", "title": "set_first_angle_left_handed", "text": "<p>Set whether to use left-handed first rotation angle.</p> <p>Left-handed means counter-clockwise facing positive direction of rotation axis. This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if left-handed first rotation angle should be used, otherwise false.</p>"}, {"location": "qtm.settings.euler.html#get_second_angle_left_handed", "title": "get_second_angle_left_handed", "text": "<p>Get whether to use left-handed second rotation angle.</p> <p>Left-handed means counter-clockwise facing positive direction of rotation axis.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.euler.html#set_second_angle_left_handed", "title": "set_second_angle_left_handed", "text": "<p>Set whether to use left-handed second rotation angle.</p> <p>Left-handed means counter-clockwise facing positive direction of rotation axis. This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if left-handed second rotation angle should be used, otherwise false.</p>"}, {"location": "qtm.settings.euler.html#get_third_angle_left_handed", "title": "get_third_angle_left_handed", "text": "<p>Get whether to use left-handed third rotation angle.</p> <p>Left-handed means counter-clockwise facing positive direction of rotation axis.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.euler.html#set_third_angle_left_handed", "title": "set_third_angle_left_handed", "text": "<p>Set whether to use left-handed third rotation angle.</p> <p>Left-handed means counter-clockwise facing positive direction of rotation axis. This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if left-handed third rotation angle should be used, otherwise false.</p>"}, {"location": "qtm.settings.euler.html#get_first_angle_range", "title": "get_first_angle_range", "text": "<p>Get the range of the first rotation angle.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.settings.euler.html#set_first_angle_range", "title": "set_first_angle_range", "text": "<p>Set the range of the first rotation angle.</p> <p>This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The range of the first rotation angle (must be either [-180, 180] or [0, 360]).</p>"}, {"location": "qtm.settings.euler.html#get_third_angle_range", "title": "get_third_angle_range", "text": "<p>Get the range of the third rotation angle.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.settings.euler.html#set_third_angle_range", "title": "set_third_angle_range", "text": "<p>Set the range of the third rotation angle.</p> <p>This method requires 'custom' convention (see 'set_convention').</p> <p>Parameters</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The range of the third rotation angle (must be either [-180, 180] or [0, 360]).</p>"}, {"location": "qtm.settings.euler.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.export.c3d.html", "title": "qtm.settings.export.c3d", "text": "<p>Access and modify c3d export settings.</p> PythonLuaREST <pre><code>import qtm\n\nqtm.settings.export.c3d.set_exclude_empty(True)\nprint(qtm.settings.export.c3d.get_exclude_empty())\n# True\n\nqtm.settings.export.c3d.set_exclude_partially_labeled(False)\nprint(qtm.settings.export.c3d.get_exclude_partially_labeled())\n# False\n\nzero_baseline_range = {\"start\": 0, \"end\": 9}\nqtm.settings.export.c3d.set_use_zero_force_baseline(True)\nqtm.settings.export.c3d.set_zero_force_baseline_range(zero_baseline_range)\nprint(qtm.settings.export.c3d.get_zero_force_baseline_range())\n# {'start': 0, 'end': 9}\n</code></pre> <pre><code>qtm.settings.export.c3d.set_exclude_empty(true)\nprint(qtm.settings.export.c3d.get_exclude_empty())\n-- true\n\nqtm.settings.export.c3d.set_exclude_partially_labeled(false)\nprint(qtm.settings.export.c3d.get_exclude_partially_labeled())\n-- false\n\nzero_baseline_range = {[\"start\"] = 0, [\"end\"] = 9}\nqtm.settings.export.c3d.set_use_zero_force_baseline(true)\nqtm.settings.export.c3d.set_zero_force_baseline_range(zero_baseline_range)\nprint(qtm.settings.export.c3d.get_zero_force_baseline_range())\n-- {start = 0, end = 9}\n</code></pre> <pre><code>curl --json \"[true]\" http://localhost:7979/api/scripting/qtm/settings/export/c3d/set_exclude_empty/\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/settings/export/c3d/get_exclude_empty/\n:: true\n\ncurl --json \"[false]\" http://localhost:7979/api/scripting/qtm/settings/export/c3d/set_exclude_partially_labeled/\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/settings/export/c3d/get_exclude_partially_labeled/\n:: false\n\nset zero_baseline_range={\"start\": 0, \"end\": 9}\ncurl --json \"[true]\" http://localhost:7979/api/scripting/qtm/settings/export/c3d/set_use_zero_force_baseline/\ncurl --json \"[%zero_baseline_range%]\" http://localhost:7979/api/scripting/qtm/settings/export/c3d/set_zero_force_baseline_range/\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/settings/export/c3d/get_zero_force_baseline_range/\n:: {\"end\":9,\"start\":0}\n</code></pre>"}, {"location": "qtm.settings.export.c3d.html#get_exclude_unidentified", "title": "get_exclude_unidentified", "text": "<p>Get whether to exclude unidentified trajectories.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.c3d.html#set_exclude_unidentified", "title": "set_exclude_unidentified", "text": "<p>Set whether to exclude unidentified trajectories.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if unidentified trajectories should be excluded, otherwise false.</p>"}, {"location": "qtm.settings.export.c3d.html#get_exclude_empty", "title": "get_exclude_empty", "text": "<p>Get whether to exclude empty trajectories.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.c3d.html#set_exclude_empty", "title": "set_exclude_empty", "text": "<p>Set whether to exclude empty trajectories.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if empty trajectories should be excluded, otherwise false.</p>"}, {"location": "qtm.settings.export.c3d.html#get_exclude_partially_labeled", "title": "get_exclude_partially_labeled", "text": "<p>Get whether to exclude partially labeled frames.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.c3d.html#set_exclude_partially_labeled", "title": "set_exclude_partially_labeled", "text": "<p>Set whether to exclude partially labeled frames.</p> <p>This will override the exported range.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if partially labeled frames should be excluded, otherwise false.</p>"}, {"location": "qtm.settings.export.c3d.html#get_use_full_label", "title": "get_use_full_label", "text": "<p>Get whether to use full labels.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.c3d.html#set_use_full_label", "title": "set_use_full_label", "text": "<p>Set whether to use full labels.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if full labels should be used, otherwise false.</p>"}, {"location": "qtm.settings.export.c3d.html#get_use_relative_event_time", "title": "get_use_relative_event_time", "text": "<p>Get whether to use relative event times.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.c3d.html#set_use_relative_event_time", "title": "set_use_relative_event_time", "text": "<p>Set whether to use relative event times.</p> <p>If enabled, event times will be relative to the start of the exported range.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if relative event times should be used, otherwise false.</p>"}, {"location": "qtm.settings.export.c3d.html#get_use_zero_force_baseline", "title": "get_use_zero_force_baseline", "text": "<p>Get whether to use zero force baseline.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.c3d.html#set_use_zero_force_baseline", "title": "set_use_zero_force_baseline", "text": "<p>Set whether to use zero force baseline.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if zero force baseline should be used, otherwise false.</p>"}, {"location": "qtm.settings.export.c3d.html#get_zero_force_baseline_range", "title": "get_zero_force_baseline_range", "text": "<p>Get the zero force baseline range.</p> <p>Returns</p> <p><code>{\"start\": integer, \"end\": integer}</code> </p>"}, {"location": "qtm.settings.export.c3d.html#set_zero_force_baseline_range", "title": "set_zero_force_baseline_range", "text": "<p>Set the zero force baseline range.</p> <p>This method requires zero force baseline to be enabled (see 'set_use_zero_force_baseline').</p> <p>Parameters</p> <p><code>range</code> <code>{\"start\": integer, \"end\": integer}</code> The zero force baseline range.</p>"}, {"location": "qtm.settings.export.c3d.html#get_length_units", "title": "get_length_units", "text": "<p>Get the length units.</p> <p>Returns</p> <p><code>\"mm\"|\"cm\"|\"m\"</code> </p>"}, {"location": "qtm.settings.export.c3d.html#set_length_units", "title": "set_length_units", "text": "<p>Set the length units.</p> <p>Parameters</p> <p><code>units</code> <code>\"mm\"|\"cm\"|\"m\"</code> The length units.</p>"}, {"location": "qtm.settings.export.c3d.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.export.fbx.html", "title": "qtm.settings.export.fbx", "text": "<p>Access and modify fbx export settings.</p> PythonLuaREST <pre><code>import qtm\n\nfile_format = \"binary\"\nqtm.settings.export.fbx.set_file_format(file_format)\nprint(qtm.settings.export.fbx.get_file_format())\n# binary\n\nqtm.settings.export.fbx.set_export_camera(True)\nprint(qtm.settings.export.fbx.get_export_camera())\n# True\n</code></pre> <pre><code>file_format = \"binary\"\nqtm.settings.export.fbx.set_file_format(file_format)\nprint(qtm.settings.export.fbx.get_file_format())\n-- binary\n\nqtm.settings.export.fbx.set_export_camera(true)\nprint(qtm.settings.export.fbx.get_export_camera())\n-- true\n</code></pre> <pre><code>curl --json \"[\\\"binary\\\"]\" http://localhost:7979/api/scripting/qtm/settings/export/fbx/set_file_format/\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/settings/export/fbx/get_file_format/\n:: \"binary\"\n\ncurl --json \"[true]\" http://localhost:7979/api/scripting/qtm/settings/export/fbx/set_export_camera/\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/settings/export/fbx/get_export_camera/\n:: true\n</code></pre>"}, {"location": "qtm.settings.export.fbx.html#get_file_format", "title": "get_file_format", "text": "<p>Get the file format.</p> <p>Returns</p> <p><code>\"ascii\"|\"binary\"</code> </p>"}, {"location": "qtm.settings.export.fbx.html#set_file_format", "title": "set_file_format", "text": "<p>Set the file format.</p> <p>Parameters</p> <p><code>format</code> <code>\"ascii\"|\"binary\"</code> The file format.</p>"}, {"location": "qtm.settings.export.fbx.html#get_export_optical", "title": "get_export_optical", "text": "<p>Get whether to export opticals.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.fbx.html#set_export_optical", "title": "set_export_optical", "text": "<p>Set whether to export opticals.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if opticals should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.fbx.html#get_export_actor", "title": "get_export_actor", "text": "<p>Get whether to export motionbuilder actors.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.fbx.html#set_export_actor", "title": "set_export_actor", "text": "<p>Set whether to export motionbuilder actors.</p> <p>Actors require opticals to be exported (see 'set_export_optical').</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if motionbuilder actors should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.fbx.html#get_export_skeleton", "title": "get_export_skeleton", "text": "<p>Get whether to export skeletons.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.fbx.html#set_export_skeleton", "title": "set_export_skeleton", "text": "<p>Set whether to export skeletons.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if skeletons should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.fbx.html#get_export_character", "title": "get_export_character", "text": "<p>Get whether to export characters.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.fbx.html#set_export_character", "title": "set_export_character", "text": "<p>Set whether to export characters.</p> <p>Characters require skeletons to be exported (see 'set_export_skeleton').</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if characters should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.fbx.html#get_export_camera", "title": "get_export_camera", "text": "<p>Get whether to export cameras.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.fbx.html#set_export_camera", "title": "set_export_camera", "text": "<p>Set whether to export cameras.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if cameras should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.fbx.html#get_export_timecode", "title": "get_export_timecode", "text": "<p>Get whether to export timecodes.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.fbx.html#set_export_timecode", "title": "set_export_timecode", "text": "<p>Set whether to export timecodes.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if timecodes should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.fbx.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.export.mat.html", "title": "qtm.settings.export.mat", "text": "<p>Access and modify mat export settings.</p> PythonLuaREST <pre><code>import qtm\n\nqtm.settings.export.mat.set_export_3d(True)\nprint(qtm.settings.export.mat.get_export_3d())\n# True\n\nqtm.settings.export.mat.set_export_6d(False)\nprint(qtm.settings.export.mat.get_export_6d())\n# False\n</code></pre> <pre><code>qtm.settings.export.mat.set_export_3d(true)\nprint(qtm.settings.export.mat.get_export_3d())\n-- true\n\nqtm.settings.export.mat.set_export_6d(false)\nprint(qtm.settings.export.mat.get_export_6d())\n-- false\n</code></pre> <pre><code>curl --json \"[true]\" http://localhost:7979/api/scripting/qtm/settings/export/mat/set_export_3d/\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/settings/export/mat/get_export_3d/\n:: true\n\ncurl --json \"[false]\" http://localhost:7979/api/scripting/qtm/settings/export/mat/set_export_6d/\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/settings/export/mat/get_export_6d/\n:: false\n</code></pre>"}, {"location": "qtm.settings.export.mat.html#get_export_3d", "title": "get_export_3d", "text": "<p>Get whether to export 3d data.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_export_3d", "title": "set_export_3d", "text": "<p>Set whether to export 3d data.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if 3d data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#get_export_6d", "title": "get_export_6d", "text": "<p>Get whether to export 6dof data.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_export_6d", "title": "set_export_6d", "text": "<p>Set whether to export 6dof data.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if 6dof data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#get_export_analog", "title": "get_export_analog", "text": "<p>Get whether to export analog data.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_export_analog", "title": "set_export_analog", "text": "<p>Set whether to export analog data.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if analog data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#get_export_force", "title": "get_export_force", "text": "<p>Get whether to export force data.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_export_force", "title": "set_export_force", "text": "<p>Set whether to export force data.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if force data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#get_export_eye", "title": "get_export_eye", "text": "<p>Get whether to export eye data.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_export_eye", "title": "set_export_eye", "text": "<p>Set whether to export eye data.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if eye data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#get_export_skeleton", "title": "get_export_skeleton", "text": "<p>Get whether to export skeleton data.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_export_skeleton", "title": "set_export_skeleton", "text": "<p>Set whether to export skeleton data.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if skeleton data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#get_export_timecode", "title": "get_export_timecode", "text": "<p>Get whether to export timecodes.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_export_timecode", "title": "set_export_timecode", "text": "<p>Set whether to export timecodes.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if timecodes should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#get_export_event", "title": "get_export_event", "text": "<p>Get whether to export events.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_export_event", "title": "set_export_event", "text": "<p>Set whether to export events.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if events should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#get_exclude_unidentified", "title": "get_exclude_unidentified", "text": "<p>Get whether to exclude unidentified trajectories.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.mat.html#set_exclude_unidentified", "title": "set_exclude_unidentified", "text": "<p>Set whether to exclude unidentified trajectories.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if unidentified trajectories should be excluded, otherwise false.</p>"}, {"location": "qtm.settings.export.mat.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.export.tsv.html", "title": "qtm.settings.export.tsv", "text": "<p>Access and modify tsv export settings.</p> PythonLuaREST <pre><code>import qtm\n\nqtm.settings.export.tsv.set_export_3d(True)\nprint(qtm.settings.export.tsv.get_export_3d())\n# True\n\nqtm.settings.export.tsv.set_export_6d(False)\nprint(qtm.settings.export.tsv.get_export_6d())\n# False\n</code></pre> <pre><code>qtm.settings.export.tsv.set_export_3d(true)\nprint(qtm.settings.export.tsv.get_export_3d())\n-- true\n\nqtm.settings.export.tsv.set_export_6d(false)\nprint(qtm.settings.export.tsv.get_export_6d())\n-- false\n</code></pre> <pre><code>curl --json \"[true]\" http://localhost:7979/api/scripting/qtm/settings/export/tsv/set_export_3d/\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/settings/export/tsv/get_export_3d/\n:: true\n\ncurl --json \"[false]\" http://localhost:7979/api/scripting/qtm/settings/export/tsv/set_export_6d/\ncurl --json \"\" http://localhost:7979/api/scripting/qtm/settings/export/tsv/get_export_6d/\n:: false\n</code></pre>"}, {"location": "qtm.settings.export.tsv.html#get_export_2d", "title": "get_export_2d", "text": "<p>Get whether to export 2d data.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_2d", "title": "set_export_2d", "text": "<p>Set whether to export 2d data.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if 2d data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_3d", "title": "get_export_3d", "text": "<p>Get whether to export 3d data.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_3d", "title": "set_export_3d", "text": "<p>Set whether to export 3d data.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if 3d data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_6d", "title": "get_export_6d", "text": "<p>Get whether to export 6dof data.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_6d", "title": "set_export_6d", "text": "<p>Set whether to export 6dof data.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if 6dof data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_analog", "title": "get_export_analog", "text": "<p>Get whether to export analog data.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_analog", "title": "set_export_analog", "text": "<p>Set whether to export analog data.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if analog data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_force", "title": "get_export_force", "text": "<p>Get whether to export force data.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_force", "title": "set_export_force", "text": "<p>Set whether to export force data.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if force data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_eye", "title": "get_export_eye", "text": "<p>Get whether to export eye data.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_eye", "title": "set_export_eye", "text": "<p>Set whether to export eye data.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if eye data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_skeleton", "title": "get_export_skeleton", "text": "<p>Get whether to export skeleton data.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_skeleton", "title": "set_export_skeleton", "text": "<p>Set whether to export skeleton data.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if skeleton data should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_time", "title": "get_export_time", "text": "<p>Get whether to export sample times.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_time", "title": "set_export_time", "text": "<p>Set whether to export sample times.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if sample times should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_event", "title": "get_export_event", "text": "<p>Get whether to export events.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_event", "title": "set_export_event", "text": "<p>Set whether to export events.</p> <p>Events require file header to be exported (see 'set_export_file_header').</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if events should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_point_type", "title": "get_export_point_type", "text": "<p>Get whether to export 3d point types.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_point_type", "title": "set_export_point_type", "text": "<p>Set whether to export 3d point types.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if 3d point types should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_file_header", "title": "get_export_file_header", "text": "<p>Get whether to export a file header.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_file_header", "title": "set_export_file_header", "text": "<p>Set whether to export a file header.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if a file header should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_export_column_header", "title": "get_export_column_header", "text": "<p>Get whether to export column headers.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_export_column_header", "title": "set_export_column_header", "text": "<p>Set whether to export column headers.</p> <p>Column headers require file header to be exported (see 'set_export_file_header').</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if column headers should be exported, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_null_string", "title": "get_null_string", "text": "<p>Get the null string.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_null_string", "title": "set_null_string", "text": "<p>Set the null string.</p> <p>Parameters</p> <p><code>string</code> <code>string</code> The null string.</p>"}, {"location": "qtm.settings.export.tsv.html#get_exclude_unidentified", "title": "get_exclude_unidentified", "text": "<p>Get whether to exclude unidentified trajectories.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_exclude_unidentified", "title": "set_exclude_unidentified", "text": "<p>Set whether to exclude unidentified trajectories.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if unidentified trajectories should be excluded, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_exclude_empty", "title": "get_exclude_empty", "text": "<p>Get whether to exclude empty trajectories.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_exclude_empty", "title": "set_exclude_empty", "text": "<p>Set whether to exclude empty trajectories.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if empty trajectories should be excluded, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#get_exclude_partially_labeled", "title": "get_exclude_partially_labeled", "text": "<p>Get whether to exclude partially labeled frames.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.export.tsv.html#set_exclude_partially_labeled", "title": "set_exclude_partially_labeled", "text": "<p>Set whether to exclude partially labeled frames.</p> <p>This will override the exported range.</p> <p>Parameters</p> <p><code>enable</code> <code>bool</code> True if partially labeled frames should be excluded, otherwise false.</p>"}, {"location": "qtm.settings.export.tsv.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing._2d.html", "title": "qtm.settings.processing._2d", "text": "<p>Access and modify 2d processing settings.</p> PythonLuaREST <pre><code>import qtm\n\nqtm.settings.processing._2d.set_use_max_marker_size(\"project\", False)\nprint(qtm.settings.processing._2d.get_use_max_marker_size(\"project\"))\n# False\n\nprint(qtm.settings.processing._2d.get_max_marker_size(\"measurement\"))\n# 4096\n</code></pre> <pre><code>qtm.settings.processing._2d.set_use_max_marker_size(\"project\", false)\nprint(qtm.settings.processing._2d.get_use_max_marker_size(\"project\"))\n-- false\n\nprint(qtm.settings.processing._2d.get_max_marker_size(\"measurement\"))\n-- 4096\n</code></pre> <pre><code>curl --json \"[\\\"project\\\", false]\" http://localhost:7979/api/scripting/qtm/settings/processing/_2d/set_use_max_marker_size\ncurl --json \"[\\\"project\\\"]\" http://localhost:7979/api/scripting/qtm/settings/processing/_2d/get_use_max_marker_size\n:: false\n\ncurl --json \"[\\\"measurement\\\"]\" http://localhost:7979/api/scripting/qtm/settings/processing/_2d/get_max_marker_size\n:: 4096\n</code></pre>"}, {"location": "qtm.settings.processing._2d.html#get_correct_center_points", "title": "get_correct_center_points", "text": "<p>Get whether to correct center points.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._2d.html#set_correct_center_points", "title": "set_correct_center_points", "text": "<p>Set whether to correct center points.</p> <p>Center point correction requires circularity filtering to be enabled (see 'qtm.settings.camera.set_use_circularity_filtering').</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if center points should be corrected, otherwise false.</p>"}, {"location": "qtm.settings.processing._2d.html#get_use_min_marker_size", "title": "get_use_min_marker_size", "text": "<p>Get whether to filter markers by minimum size.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._2d.html#set_use_min_marker_size", "title": "set_use_min_marker_size", "text": "<p>Set whether to filter markers by minimum size.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if markers should be filtered by minimum size, otherwise false.</p>"}, {"location": "qtm.settings.processing._2d.html#get_use_max_marker_size", "title": "get_use_max_marker_size", "text": "<p>Get whether to filter markers by maximum size.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._2d.html#set_use_max_marker_size", "title": "set_use_max_marker_size", "text": "<p>Set whether to filter markers by maximum size.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if markers should be filtered by maximum size, otherwise false.</p>"}, {"location": "qtm.settings.processing._2d.html#get_min_marker_size", "title": "get_min_marker_size", "text": "<p>Get the minimum marker size.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>integer</code> The minimum marker size (in subpixels).</p>"}, {"location": "qtm.settings.processing._2d.html#set_min_marker_size", "title": "set_min_marker_size", "text": "<p>Set the minimum marker size.</p> <p>This method requires filtering by minimum marker size to be enabled (see 'set_use_min_marker_size').</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>size</code> <code>integer</code> The minimum marker size (in subpixels).</p>"}, {"location": "qtm.settings.processing._2d.html#get_max_marker_size", "title": "get_max_marker_size", "text": "<p>Get the maximum marker size.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>integer</code> The maximum marker size (in subpixels).</p>"}, {"location": "qtm.settings.processing._2d.html#set_max_marker_size", "title": "set_max_marker_size", "text": "<p>Set the maximum marker size.</p> <p>This method requires filtering by maximum marker size to be enabled (see 'set_use_max_marker_size').</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>size</code> <code>integer</code> The maximum marker size (in subpixels).</p>"}, {"location": "qtm.settings.processing._2d.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing._3d.html", "title": "qtm.settings.processing._3d", "text": "<p>Access and modify 3d processing settings.</p> PythonLuaREST <pre><code>import qtm\n\nmin_trajectory_length = 2\nqtm.settings.processing._3d.set_min_trajectory_length(\"project\", min_trajectory_length)\nprint(qtm.settings.processing._3d.get_min_trajectory_length(\"project\"))\n# 2\n\nprint(qtm.settings.processing._3d.get_bounding_box(\"measurement\"))\n# {'min_x': -10000.0, 'max_x': 10000.0, 'min_y': -10000.0, 'max_y': 10000.0, 'min_z': -10000.0, 'max_z': 10000.0}\n</code></pre> <pre><code>min_trajectory_length = 2\nqtm.settings.processing._3d.set_min_trajectory_length(\"project\", min_trajectory_length)\nprint(qtm.settings.processing._3d.get_min_trajectory_length(\"project\"))\n-- 2\n\nprint(qtm.settings.processing._3d.get_bounding_box(\"measurement\"))\n-- {min_y = -1000.0, max_x = 20000.0, max_z = 1500.0, min_z = -100.0, max_y = 1000.0, min_x = -2000.0}\n</code></pre> <pre><code>set min_trajectory_length=2\ncurl --json \"[\\\"project\\\", %min_trajectory_length%]\" http://localhost:7979/api/scripting/qtm/settings/processing/_3d/set_min_trajectory_length\ncurl --json \"[\\\"project\\\"]\" http://localhost:7979/api/scripting/qtm/settings/processing/_3d/get_min_trajectory_length\n:: 2\n\ncurl --json \"[\\\"measurement\\\"]\" http://localhost:7979/api/scripting/qtm/settings/processing/_3d/get_bounding_box\n:: {\"max_x\":20000,\"max_y\":1000,\"max_z\":1500,\"min_x\":-2000,\"min_y\":-1000,\"min_z\":-100}\n</code></pre>"}, {"location": "qtm.settings.processing._3d.html#get_prediction_error", "title": "get_prediction_error", "text": "<p>Get the prediction error.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>float</code> The prediction error (in millimeters).</p>"}, {"location": "qtm.settings.processing._3d.html#set_prediction_error", "title": "set_prediction_error", "text": "<p>Set the prediction error.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>error</code> <code>float</code> The prediction error (in millimeters).</p>"}, {"location": "qtm.settings.processing._3d.html#get_max_residual", "title": "get_max_residual", "text": "<p>Get the maximum residual.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>float</code> The maximum residual (in millimeters).</p>"}, {"location": "qtm.settings.processing._3d.html#set_max_residual", "title": "set_max_residual", "text": "<p>Set the maximum residual.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>residual</code> <code>float</code> The maximum residual (in millimeters).</p>"}, {"location": "qtm.settings.processing._3d.html#get_min_trajectory_length", "title": "get_min_trajectory_length", "text": "<p>Get the minimum trajectory length.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>integer</code> The minimum trajectory length (in samples).</p>"}, {"location": "qtm.settings.processing._3d.html#set_min_trajectory_length", "title": "set_min_trajectory_length", "text": "<p>Set the minimum trajectory length.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>length</code> <code>integer</code> The minimum trajectory length (in samples). Must be within the [2, 100] range.</p>"}, {"location": "qtm.settings.processing._3d.html#get_min_ray_count", "title": "get_min_ray_count", "text": "<p>Get the minimum marker ray count.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing._3d.html#set_min_ray_count", "title": "set_min_ray_count", "text": "<p>Set the minimum marker ray count.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>count</code> <code>integer</code> The minimum ray count. Must be within the [2, 5] range.</p>"}, {"location": "qtm.settings.processing._3d.html#get_auto_limit_ray_length", "title": "get_auto_limit_ray_length", "text": "<p>Get whether to automatically calculate ray length limits.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._3d.html#set_auto_limit_ray_length", "title": "set_auto_limit_ray_length", "text": "<p>Set whether to automatically calculate ray length limits.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if ray length limits should be automatically calculated, otherwise false.</p>"}, {"location": "qtm.settings.processing._3d.html#get_min_ray_length", "title": "get_min_ray_length", "text": "<p>Get the minimum ray length.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>float</code> The minimum ray length (in meters).</p>"}, {"location": "qtm.settings.processing._3d.html#set_min_ray_length", "title": "set_min_ray_length", "text": "<p>Set the minimum ray length.</p> <p>This method requires manual ray length limits (see 'set_auto_limit_ray_length')</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>length</code> <code>float</code> The minimum ray length (in meters).</p>"}, {"location": "qtm.settings.processing._3d.html#get_max_ray_length", "title": "get_max_ray_length", "text": "<p>Get the maximum ray length.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>float</code> The maximum ray length (in meters).</p>"}, {"location": "qtm.settings.processing._3d.html#set_max_ray_length", "title": "set_max_ray_length", "text": "<p>Set the maximum ray length.</p> <p>This method requires manual ray length limits (see 'set_auto_limit_ray_length').</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>length</code> <code>float</code> The maximum ray length (in meters).</p>"}, {"location": "qtm.settings.processing._3d.html#get_store_rays", "title": "get_store_rays", "text": "<p>Get whether to store rays.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._3d.html#set_store_rays", "title": "set_store_rays", "text": "<p>Set whether to store rays.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if rays should be stored, otherwise false.</p>"}, {"location": "qtm.settings.processing._3d.html#get_auto_join", "title": "get_auto_join", "text": "<p>Get whether to automatically join trajectories.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._3d.html#set_auto_join", "title": "set_auto_join", "text": "<p>Set whether to automatically join trajectories.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if trajectories should be automatically joined, otherwise false.</p>"}, {"location": "qtm.settings.processing._3d.html#get_max_auto_join_gap_length", "title": "get_max_auto_join_gap_length", "text": "<p>Get the maximum gap length for automatically joining trajectories.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>integer</code> The maximum gap length (in samples).</p>"}, {"location": "qtm.settings.processing._3d.html#set_max_auto_join_gap_length", "title": "set_max_auto_join_gap_length", "text": "<p>Set the maximum gap length for automatically joining trajectories.</p> <p>This method requires automatic joining of trajectories to be enabled (see 'set_auto_join').</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>length</code> <code>integer</code> The maximum gap length (in samples).</p>"}, {"location": "qtm.settings.processing._3d.html#get_use_bounding_box", "title": "get_use_bounding_box", "text": "<p>Get whether to use a bounding box.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._3d.html#set_use_bounding_box", "title": "set_use_bounding_box", "text": "<p>Set whether to use a bounding box.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if a bounding box should be used, otherwise false.</p>"}, {"location": "qtm.settings.processing._3d.html#get_bounding_box", "title": "get_bounding_box", "text": "<p>Get the bounding box.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>{\"min_x\": float, \"max_x\": float, \"min_y\": float, \"max_y\": float, \"min_z\": float, \"max_z\": float}</code> The bounding box (in millimeters).</p>"}, {"location": "qtm.settings.processing._3d.html#set_bounding_box", "title": "set_bounding_box", "text": "<p>Set the bounding box.</p> <p>This method requires bounding box to be enabled (see 'set_use_bounding_box').</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>box</code> <code>{\"min_x\": float, \"max_x\": float, \"min_y\": float, \"max_y\": float, \"min_z\": float, \"max_z\": float}</code> The bounding box (in millimeters).</p>"}, {"location": "qtm.settings.processing._3d.html#get_discard_out_of_bounds_intersections", "title": "get_discard_out_of_bounds_intersections", "text": "<p>Get whether to discard out-of-bounds ray intersections.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._3d.html#set_discard_out_of_bounds_intersections", "title": "set_discard_out_of_bounds_intersections", "text": "<p>Set whether to discard out-of-bounds ray intersections.</p> <p>This method requires bounding box to be enabled (see 'set_use_bounding_box').</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if out-of-bounds ray intersections should be discarded, otherwise false.</p>"}, {"location": "qtm.settings.processing._3d.html#get_auto_select_range", "title": "get_auto_select_range", "text": "<p>Get whether to automatically set the selected range after tracking.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._3d.html#set_auto_select_range", "title": "set_auto_select_range", "text": "<p>Set whether to automatically set the selected range after tracking.</p> <p>If enabled, the selected range will be set to the tracked range.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if selected range should be automatically set, otherwise false.</p>"}, {"location": "qtm.settings.processing._3d.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing._6d.html", "title": "qtm.settings.processing._6d", "text": "<p>Access and modify 6dof processing settings.</p> PythonLuaREST <pre><code>import qtm\n\nprint(qtm.settings.processing._6d.get_body_count(\"measurement\"))\n# 3\n\nbody_index = 2\nprint(qtm.settings.processing._6d.get_body_name(\"measurement\", body_index))\n# L_Frame\n\nprint(qtm.settings.processing._6d.get_point_count(\"measurement\", body_index))\n# 4\n\npoint_index = 0\nprint(qtm.settings.processing._6d.get_point_name(\"measurement\", body_index, point_index))\n# L_Frame - 1\n\nprint(qtm.settings.processing._6d.get_point_position(\"measurement\", body_index, point_index))\n# [226.46037005049945, 0.6947789149269771, 1.19924822792081]\n</code></pre> <pre><code>print(qtm.settings.processing._6d.get_body_count(\"measurement\"))\n-- 3\n\nbody_index = 2\nprint(qtm.settings.processing._6d.get_body_name(\"measurement\", body_index))\n-- L_Frame\n\nprint(qtm.settings.processing._6d.get_point_count(\"measurement\", body_index))\n-- 4\n\npoint_index = 0\nprint(qtm.settings.processing._6d.get_point_name(\"measurement\", body_index, point_index))\n-- L_Frame - 1\n\nprint(qtm.settings.processing._6d.get_point_position(\"measurement\", body_index, point_index))\n-- {226.4603700505, 0.69477891492698, 1.1992482279208}\n</code></pre> <pre><code>curl --json \"[\\\"measurement\\\"]\" http://localhost:7979/api/scripting/qtm/settings/processing/_6d/get_body_count\n:: 3\n\nset body_index=2\ncurl --json \"[\\\"measurement\\\", %body_index%]\" http://localhost:7979/api/scripting/qtm/settings/processing/_6d/get_body_name\n:: \"L_Frame\"\n\ncurl --json \"[\\\"measurement\\\", %body_index%]\" http://localhost:7979/api/scripting/qtm/settings/processing/_6d/get_point_count\n:: 4\n\nset point_index=0\ncurl --json \"[\\\"measurement\\\", %body_index%, %point_index%]\" http://localhost:7979/api/scripting/qtm/settings/processing/_6d/get_point_name\n:: \"L_Frame - 1\"\n\ncurl --json \"[\\\"measurement\\\", %body_index%, %point_index%]\" http://localhost:7979/api/scripting/qtm/settings/processing/_6d/get_point_position\n:: [226.46037005049945,0.69477891492697708,1.1992482279208101]\n</code></pre>"}, {"location": "qtm.settings.processing._6d.html#get_identify_partial_bodies", "title": "get_identify_partial_bodies", "text": "<p>Get whether to identify partially visible rigid bodies.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._6d.html#set_identify_partial_bodies", "title": "set_identify_partial_bodies", "text": "<p>Set whether to identify partially visible rigid bodies.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if partially visible rigid bodies should be identified, otherwise false.</p>"}, {"location": "qtm.settings.processing._6d.html#get_calculate_missing_markers", "title": "get_calculate_missing_markers", "text": "<p>Get whether to calculate missing markers in rigid bodies.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._6d.html#set_calculate_missing_markers", "title": "set_calculate_missing_markers", "text": "<p>Set whether to calculate missing markers in rigid bodies.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>enable</code> <code>bool</code> True if missing markers should be calculated, otherwise false.</p>"}, {"location": "qtm.settings.processing._6d.html#add_body", "title": "add_body", "text": "<p>Add a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>integer</code> The index of the added rigid body.</p>"}, {"location": "qtm.settings.processing._6d.html#add_point", "title": "add_point", "text": "<p>Add a point to a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p>Returns</p> <p><code>integer</code> The index of the added point.</p>"}, {"location": "qtm.settings.processing._6d.html#delete_body", "title": "delete_body", "text": "<p>Delete a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p>"}, {"location": "qtm.settings.processing._6d.html#delete_point", "title": "delete_point", "text": "<p>Delete a point in a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p>"}, {"location": "qtm.settings.processing._6d.html#get_body_count", "title": "get_body_count", "text": "<p>Get the number of rigid bodies.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing._6d.html#get_point_count", "title": "get_point_count", "text": "<p>Get the number of points in a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing._6d.html#get_body_name", "title": "get_body_name", "text": "<p>Get the name of a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing._6d.html#set_body_name", "title": "set_body_name", "text": "<p>Set the name of a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>name</code> <code>string</code> The name of the rigid body.</p>"}, {"location": "qtm.settings.processing._6d.html#get_body_color", "title": "get_body_color", "text": "<p>Get the color of a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p>Returns</p> <p><code>integer</code> The color of the rigid body (in 0xbbggrr format).</p>"}, {"location": "qtm.settings.processing._6d.html#set_body_color", "title": "set_body_color", "text": "<p>Set the color of a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>color</code> <code>integer</code> The color of the rigid body (in 0xbbggrr format, see 'qtm.utilities.color' module).</p>"}, {"location": "qtm.settings.processing._6d.html#get_body_coordinate_system", "title": "get_body_coordinate_system", "text": "<p>Get the coordinate system of a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p>Returns</p> <p><code>{\"type\": \"global\"|\"relative\"|\"fixed\", \"relative_body_index\": integer?, \"fixed_transform\": mat4x4f?}</code> </p>"}, {"location": "qtm.settings.processing._6d.html#set_body_coordinate_system", "title": "set_body_coordinate_system", "text": "<p>Set the coordinate system of a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>coordinate_system</code> <code>{\"type\": \"global\"|\"relative\"|\"fixed\", \"relative_body_index\": integer?, \"fixed_transform\": mat4x4f?}</code> The coordinate system of the rigid body.</p>"}, {"location": "qtm.settings.processing._6d.html#get_body_min_marker_count", "title": "get_body_min_marker_count", "text": "<p>Get the minimum marker count of a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing._6d.html#set_body_min_marker_count", "title": "set_body_min_marker_count", "text": "<p>Set the minimum marker count of a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>count</code> <code>integer</code> The minimum marker count of the rigid body (must be greater than or equal to 3).</p>"}, {"location": "qtm.settings.processing._6d.html#get_body_max_residual", "title": "get_body_max_residual", "text": "<p>Get the maximum residual of a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p>Returns</p> <p><code>float</code> The maximum residual of the rigid body (in millimeters).</p>"}, {"location": "qtm.settings.processing._6d.html#set_body_max_residual", "title": "set_body_max_residual", "text": "<p>Set the maximum residual of a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>residual</code> <code>float</code> The maximum residual of the rigid body (in millimeters). Must be within the [0.01, 100.0] range.</p>"}, {"location": "qtm.settings.processing._6d.html#get_body_bone_length_tolerance", "title": "get_body_bone_length_tolerance", "text": "<p>Get the bone length tolerance of a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p>Returns</p> <p><code>float</code> The bone length tolerance (in millimeters).</p>"}, {"location": "qtm.settings.processing._6d.html#set_body_bone_length_tolerance", "title": "set_body_bone_length_tolerance", "text": "<p>Set the bone length tolerance of a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>tolerance</code> <code>float</code> The bone length tolerance (in millimeters). Must be within the [0.01, 1000.0] range.</p>"}, {"location": "qtm.settings.processing._6d.html#get_point_name", "title": "get_point_name", "text": "<p>Get the name of a point in a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing._6d.html#set_point_name", "title": "set_point_name", "text": "<p>Set the name of a point in a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p> <p><code>name</code> <code>string</code> The name of the point.</p>"}, {"location": "qtm.settings.processing._6d.html#get_point_position", "title": "get_point_position", "text": "<p>Get the position of a point in a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p> <p>Returns</p> <p><code>vec3f</code> </p>"}, {"location": "qtm.settings.processing._6d.html#set_point_position", "title": "set_point_position", "text": "<p>Set the position of a point in a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p> <p><code>position</code> <code>vec3f</code> The position of the point.</p>"}, {"location": "qtm.settings.processing._6d.html#get_point_is_virtual", "title": "get_point_is_virtual", "text": "<p>Get whether a point in a rigid body is virtual.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p> <p>Returns</p> <p><code>bool</code> </p>"}, {"location": "qtm.settings.processing._6d.html#set_point_is_virtual", "title": "set_point_is_virtual", "text": "<p>Set whether a point in a rigid body is virtual.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p> <p><code>is_virtual</code> <code>bool</code> True if the point is virtual, otherwise false.</p>"}, {"location": "qtm.settings.processing._6d.html#get_point_active_marker_id", "title": "get_point_active_marker_id", "text": "<p>Get the (sequence coded) active marker identifier of a point in a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p> <p>Returns</p> <p><code>integer?</code> The active marker identifier of the point (or null, if the marker is passive).</p>"}, {"location": "qtm.settings.processing._6d.html#set_point_active_marker_id", "title": "set_point_active_marker_id", "text": "<p>Set the (sequence coded) active marker identifier of a point in a rigid body.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>body_index</code> <code>integer</code> The index of the rigid body.</p> <p><code>point_index</code> <code>integer</code> The index of the point.</p> <p><code>id</code> <code>integer?</code> The active marker identifier of the point (if null, the marker will be regarded as passive).</p>"}, {"location": "qtm.settings.processing._6d.html#load_bodies", "title": "load_bodies", "text": "<p>Load rigid bodies from an xml file.</p> <p>This will overwrite any existing rigid bodies.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>filename</code> <code>string</code> The xml filename to load.</p>"}, {"location": "qtm.settings.processing._6d.html#save_bodies", "title": "save_bodies", "text": "<p>Save rigid bodies to an xml file.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>filename</code> <code>string</code> The xml filename to save.</p>"}, {"location": "qtm.settings.processing._6d.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html", "title": "qtm.settings.processing.skeleton", "text": "<p>Access and modify skeleton processing settings.</p> PythonLuaREST <pre><code>import qtm\n\nskeleton_ids = qtm.settings.processing.skeleton.get_skeleton_ids(\"project\")\nprint(skeleton_ids)\n# [17, 173, 329]\n\nprint(qtm.settings.processing.skeleton.get_skeleton_name(\"project\", skeleton_ids[0]))\n# Eli\n\nskeleton_name = \"Eliott\"\nqtm.settings.processing.skeleton.set_skeleton_name(\"project\", skeleton_ids[0], skeleton_name)\nprint(qtm.settings.processing.skeleton.get_skeleton_name(\"project\", skeleton_ids[0]))\n# Eliott\n\nprint(qtm.settings.processing.skeleton.find_skeleton(\"project\", skeleton_name))\n# 17\n\nsegment_ids = qtm.settings.processing.skeleton.get_segment_ids(\"project\", skeleton_ids[0])\nprint(segment_ids)\n# [18, 29, 37, 44, 50, 56, 62, 69, 77, 83, 89, 96, 104, 111, 119, 125, 132, 139, 146, 152, 159, 166]\n\nprint(qtm.settings.processing.skeleton.get_segment_name(\"project\", segment_ids[0]))\n# Hips\n\nsegment_child_ids = qtm.settings.processing.skeleton.get_segment_child_ids(\"project\", segment_ids[0])\nprint(segment_child_ids)\n# [29, 119, 146]\n\nprint(qtm.settings.processing.skeleton.get_segment_name(\"project\", segment_child_ids[0]))\n# Spine\n\nsegment_name = \"Head\"\nsegment_id = qtm.settings.processing.skeleton.find_segment(\"project\", skeleton_ids[0], segment_name)\nprint(segment_id)\n# 111\n</code></pre> <pre><code>skeleton_ids = qtm.settings.processing.skeleton.get_skeleton_ids(\"project\")\nprint(skeleton_ids)\n-- {17, 173, 329}\n\nprint(qtm.settings.processing.skeleton.get_skeleton_name(\"project\", skeleton_ids[1]))\n-- Eli\n\nskeleton_name = \"Eliott\"\nqtm.settings.processing.skeleton.set_skeleton_name(\"project\", skeleton_ids[1], skeleton_name)\nprint(qtm.settings.processing.skeleton.get_skeleton_name(\"project\", skeleton_ids[1]))\n-- Eliott\n\nprint(qtm.settings.processing.skeleton.find_skeleton(\"project\", skeleton_name))\n-- 17\n\nsegment_ids = qtm.settings.processing.skeleton.get_segment_ids(\"project\", skeleton_ids[1])\nprint(segment_ids)\n-- {18, 29, 37, 44, 50, 56, 62, 69, 77, 83, 89, 96, 104, 111, 119, 125, 132, 139, 146, 152, 159, 166}\n\nprint(qtm.settings.processing.skeleton.get_segment_name(\"project\", segment_ids[1]))\n-- Hips\n\nsegment_child_ids = qtm.settings.processing.skeleton.get_segment_child_ids(\"project\", segment_ids[1])\nprint(segment_child_ids)\n-- {29, 119, 146}\n\nprint(qtm.settings.processing.skeleton.get_segment_name(\"project\", segment_child_ids[1]))\n-- Spine\n\nsegment_name = \"Head\"\nsegment_id = qtm.settings.processing.skeleton.find_segment(\"project\", skeleton_ids[1], segment_name)\nprint(segment_id)\n-- 111\n</code></pre> <pre><code>curl --json \"[\\\"project\\\"]\" http://localhost:7979/api/scripting/qtm/settings/processing/skeleton/get_skeleton_ids/\n:: [17,173,329]\n\nset skeleton_id=17\ncurl --json \"[\\\"project\\\", %skeleton_id%]\" http://localhost:7979/api/scripting/qtm/settings/processing/skeleton/get_skeleton_name/\n:: \"Eli\"\n\nset skeleton_name=\\\"Eliott\\\"\ncurl --json \"[\\\"project\\\", %skeleton_id%, %skeleton_name%]\" http://localhost:7979/api/scripting/qtm/settings/processing/skeleton/set_skeleton_name/\ncurl --json \"[\\\"project\\\", %skeleton_id%]\" http://localhost:7979/api/scripting/qtm/settings/processing/skeleton/get_skeleton_name/\n:: \"Eliott\"\n\ncurl --json \"[\\\"project\\\", %skeleton_name%]\" http://localhost:7979/api/scripting/qtm/settings/processing/skeleton/find_skeleton/\n:: 17\n\ncurl --json \"[\\\"project\\\", %skeleton_id%]\" http://localhost:7979/api/scripting/qtm/settings/processing/skeleton/get_segment_ids/\n:: [18,29,37,44,50,56,62,69,77,83,89,96,104,111,119,125,132,139,146,152,159,166]\n\nset segment_id=18\ncurl --json \"[\\\"project\\\", %segment_id%]\" http://localhost:7979/api/scripting/qtm/settings/processing/skeleton/get_segment_name/\n:: \"Hips\"\n\ncurl --json \"[\\\"project\\\", %segment_id%]\" http://localhost:7979/api/scripting/qtm/settings/processing/skeleton/get_segment_child_ids/\n:: [29,119,146]\n\nset segment_child_id=29\ncurl --json \"[\\\"project\\\", %segment_child_id%]\" http://localhost:7979/api/scripting/qtm/settings/processing/skeleton/get_segment_name/\n:: \"Spine\"\n\nset segment_name=\\\"Head\\\"\ncurl --json \"[\\\"project\\\", %skeleton_id%, %segment_name%]\" http://localhost:7979/api/scripting/qtm/settings/processing/skeleton/find_segment/\n:: 111\n</code></pre>"}, {"location": "qtm.settings.processing.skeleton.html#add_skeleton", "title": "add_skeleton", "text": "<p>Add a skeleton.</p> <p>A root segment will be added automatically. If a skeleton with the same name already exists, it will be overwritten.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>name</code> <code>string</code> The name of the skeleton.</p> <p>Returns</p> <p><code>integer</code> The identifier of the added skeleton.</p>"}, {"location": "qtm.settings.processing.skeleton.html#add_segment", "title": "add_segment", "text": "<p>Add a segment to a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>parent_id</code> <code>integer</code> The parent segment identifier.</p> <p><code>name</code> <code>string</code> The name of the segment.</p> <p>Returns</p> <p><code>integer</code> The identifier of the added segment.</p>"}, {"location": "qtm.settings.processing.skeleton.html#delete_skeleton", "title": "delete_skeleton", "text": "<p>Delete a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p>"}, {"location": "qtm.settings.processing.skeleton.html#delete_segment", "title": "delete_segment", "text": "<p>Delete a segment in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p>"}, {"location": "qtm.settings.processing.skeleton.html#clear_skeletons", "title": "clear_skeletons", "text": "<p>Delete all skeletons.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_skeleton_id", "title": "get_skeleton_id", "text": "<p>Get a skeleton identifier by index.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>index</code> <code>integer</code> The index of the skeleton.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_skeleton_ids", "title": "get_skeleton_ids", "text": "<p>Get all skeleton identifiers.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_skeleton_count", "title": "get_skeleton_count", "text": "<p>Get the number of skeletons.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_skeleton_name", "title": "get_skeleton_name", "text": "<p>Get the name of a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#set_skeleton_name", "title": "set_skeleton_name", "text": "<p>Set the name of a skeleton.</p> <p>If a skeleton with the same name already exists, it will be overwritten.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p><code>name</code> <code>string</code> The name of the skeleton.</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_skeleton_scale", "title": "get_skeleton_scale", "text": "<p>Get the scale of a skeleton.</p> <p>The scale represents the size of the skeleton relative to e.g. an avatar. It is used when exporting and streaming such that the scale of the output is always 1.0.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>float</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#set_skeleton_scale", "title": "set_skeleton_scale", "text": "<p>Set the scale of a skeleton.</p> <p>The scale represents the size of the skeleton relative to e.g. an avatar. It is used when exporting and streaming such that the scale of the output is always 1.0.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p><code>scale</code> <code>float</code> The scale of the skeleton. Must be within the [0.01, 100.0] range.</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_skeleton_root_id", "title": "get_skeleton_root_id", "text": "<p>Get the root segment identifier in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_id", "title": "get_segment_id", "text": "<p>Get a segment identifier in a skeleton by index.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p><code>index</code> <code>integer</code> The segment index.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_ids", "title": "get_segment_ids", "text": "<p>Get all segment identifiers in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_count", "title": "get_segment_count", "text": "<p>Get the number of segments in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_name", "title": "get_segment_name", "text": "<p>Get the name of a segment in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#set_segment_name", "title": "set_segment_name", "text": "<p>Set the name of a segment in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>name</code> <code>string</code> The name of the segment.</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_solver", "title": "get_segment_solver", "text": "<p>Get the solver of a segment in a skeleton.</p> <p>A skeleton can have multiple solvers (e.g. the hands may be solved separately from the rest of the body). In this case, the solving will be done in a hierarchical manner, starting with the root (which must have a solver). Descendant body parts are then solved locally in the coordinate systems of their parent segments.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>\"none\"|\"global_optimization\"?</code> The segment solver (or null, if the segment is solved together with its ancestors).</p>"}, {"location": "qtm.settings.processing.skeleton.html#set_segment_solver", "title": "set_segment_solver", "text": "<p>Set the solver of a segment in a skeleton.</p> <p>A skeleton can have multiple solvers (e.g. the hands may be solved separately from the rest of the body). In this case, the solving will be done in a hierarchical manner, starting with the root (which must have a solver). Descendant body parts are then solved locally in the coordinate systems of their parent segments.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>solver</code> <code>\"none\"|\"global_optimization\"?</code> The segment solver (if null, the segment will be solved together with its ancestors).</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_transform", "title": "get_segment_transform", "text": "<p>Get the transform of a segment in a skeleton.</p> <p>The transform represents the calibrated pose of the skeleton, and is used as the initial solution when solving.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>mat4x4f</code> The segment transform (in local coordinates with translation in millimeters).</p>"}, {"location": "qtm.settings.processing.skeleton.html#set_segment_transform", "title": "set_segment_transform", "text": "<p>Set the transform of a segment in a skeleton.</p> <p>The transform represents the calibrated pose of the skeleton, and is used as the initial solution when solving.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>transform</code> <code>mat4x4f</code> The segment transform (in local coordinates with translation in millimeters).</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_default_transform", "title": "get_segment_default_transform", "text": "<p>Get the default transform of a segment in a skeleton.</p> <p>The default transform brings skeletons with different zero poses (the pose where all segment rotations are zero) to the same default pose (e.g. a t-pose). This is mainly used for retargeting.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>mat4x4f</code> The segment default transform (in local coordinates with translation in millimeters).</p>"}, {"location": "qtm.settings.processing.skeleton.html#set_segment_default_transform", "title": "set_segment_default_transform", "text": "<p>Set the default transform of a segment in a skeleton.</p> <p>The default transform brings skeletons with different zero poses (the pose where all segment rotations are zero) to the same default pose (e.g. a t-pose). This is mainly used for retargeting.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>transform</code> <code>mat4x4f</code> The segment default transform (in local coordinates with translation in millimeters).</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_degrees_of_freedom", "title": "get_segment_degrees_of_freedom", "text": "<p>Get the degrees of freedom of a segment in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>{\"rotation_x\"|\"rotation_y\"|\"rotation_z\"|\"translation_x\"|\"translation_y\"|\"translation_z\": {\"constraint\": {\"lower_bound\": float, \"upper_bound\": float}?, \"couplings\": [{\"segment\": string, \"degree_of_freedom\": \"rotation_x\"|\"rotation_y\"|\"rotation_z\"|\"translation_x\"|\"translation_y\"|\"translation_z\", \"coefficient\": float}], \"goal\": {\"value\": float, \"weight\": float}?}}</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#set_segment_degrees_of_freedom", "title": "set_segment_degrees_of_freedom", "text": "<p>Set the degrees of freedom of a segment in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>degrees_of_freedom</code> <code>{\"rotation_x\"|\"rotation_y\"|\"rotation_z\"|\"translation_x\"|\"translation_y\"|\"translation_z\": {\"constraint\": {\"lower_bound\": float, \"upper_bound\": float}?, \"couplings\": [{\"segment\": string, \"degree_of_freedom\": \"rotation_x\"|\"rotation_y\"|\"rotation_z\"|\"translation_x\"|\"translation_y\"|\"translation_z\", \"coefficient\": float}], \"goal\": {\"value\": float, \"weight\": float}?}}</code> The segment degrees of freedom.</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_endpoint", "title": "get_segment_endpoint", "text": "<p>Get the endpoint of a segment in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>vec3f?</code> The segment endpoint (in local coordinates and millimeters). Or null, if the segment has children.</p>"}, {"location": "qtm.settings.processing.skeleton.html#set_segment_endpoint", "title": "set_segment_endpoint", "text": "<p>Set the endpoint of a segment in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>endpoint</code> <code>vec3f?</code> The segment endpoint (in local coordinates and millimeters). If null, the segment is assumed to have children.</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_markers", "title": "get_segment_markers", "text": "<p>Get the markers of a segment in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>[{\"name\": string, \"position\": vec3f, \"weight\": float}]</code> The segment markers (with positions in local coordinates and millimeters).</p>"}, {"location": "qtm.settings.processing.skeleton.html#set_segment_markers", "title": "set_segment_markers", "text": "<p>Set the markers of a segment in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>markers</code> <code>[{\"name\": string, \"position\": vec3f, \"weight\": float}]</code> The segment markers (with positions in local coordinates and millimeters).</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_rigid_bodies", "title": "get_segment_rigid_bodies", "text": "<p>Get the rigid bodies of a segment in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>[{\"name\": string, \"transform\": mat4x4f, \"weight\": float}]</code> The segment rigid bodies (with transforms in local coordinates and translations in millimeters).</p>"}, {"location": "qtm.settings.processing.skeleton.html#set_segment_rigid_bodies", "title": "set_segment_rigid_bodies", "text": "<p>Set the rigid bodies of a segment in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>rigid_bodies</code> <code>[{\"name\": string, \"transform\": mat4x4f, \"weight\": float}]</code> The segment rigid bodies (with transforms in local coordinates and translations in millimeters).</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_skeleton_id", "title": "get_segment_skeleton_id", "text": "<p>Get the skeleton identifier of a segment in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_parent_id", "title": "get_segment_parent_id", "text": "<p>Get the parent segment identifier of a segment in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>integer?</code> The parent segment identifier (or null, if the segment is the root).</p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_child_id", "title": "get_segment_child_id", "text": "<p>Get a child segment identifier of a segment in a skeleton by index.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p><code>index</code> <code>integer</code> The child index.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_child_ids", "title": "get_segment_child_ids", "text": "<p>Get all child segment identifiers of a segment in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>[integer]</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#get_segment_child_count", "title": "get_segment_child_count", "text": "<p>Get the number of child segments of a segment in a skeleton.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>segment_id</code> <code>integer</code> The segment identifier.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.settings.processing.skeleton.html#find_skeleton", "title": "find_skeleton", "text": "<p>Find a skeleton by name.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>name</code> <code>string</code> The name of the skeleton.</p> <p>Returns</p> <p><code>integer?</code> The identifier of the found skeleton (or null, if no skeleton was found).</p>"}, {"location": "qtm.settings.processing.skeleton.html#find_segment", "title": "find_segment", "text": "<p>Find a segment in a skeleton by name.</p> <p>Parameters</p> <p><code>source</code> <code>\"project\"|\"measurement\"</code> The settings source.</p> <p><code>skeleton_id</code> <code>integer</code> The skeleton identifier.</p> <p><code>name</code> <code>string</code> The name of the segment.</p> <p>Returns</p> <p><code>integer?</code> The identifier of the found segment (or null, if no segment was found).</p>"}, {"location": "qtm.settings.processing.skeleton.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.color.html", "title": "qtm.utilities.color", "text": "<p>Utilities for converting various color models to a qtm compatible format.</p> PythonLuaREST <pre><code>import qtm\n\nprint(qtm.utilities.color.rgb(0.855, 0.161, 0.11))\n# 1845722\n\nprint(qtm.utilities.color.hsl(4, 0.77, 0.48))\n# 1845464\n</code></pre> <pre><code>print(qtm.utilities.color.rgb(0.855, 0.161, 0.11))\n-- 1845722\n\nprint(qtm.utilities.color.hsl(4, 0.77, 0.48))\n-- 1845464\n</code></pre> <pre><code>curl --json \"[0.855, 0.161, 0.11]\" http://localhost:7979/api/scripting/qtm/utilities/color/rgb/\n:: 1845722\n\ncurl --json \"[4, 0.77, 0.48]\" http://localhost:7979/api/scripting/qtm/utilities/color/hsl/\n:: 1845464\n</code></pre>"}, {"location": "qtm.utilities.color.html#rgb", "title": "rgb", "text": "<p>Make a color from rgb values (red, green, blue).</p> <p>Parameters</p> <p><code>r</code> <code>float</code> The red value (in the [0.0, 1.0] range).</p> <p><code>g</code> <code>float</code> The green value (in the [0.0, 1.0] range).</p> <p><code>b</code> <code>float</code> The blue value (in the [0.0, 1.0] range).</p> <p>Returns</p> <p><code>integer</code> The color (in 0xbbggrr format).</p>"}, {"location": "qtm.utilities.color.html#hsl", "title": "hsl", "text": "<p>Make a color from hsl values (hue, saturation, lightness).</p> <p>Parameters</p> <p><code>h</code> <code>float</code> The hue value (in the [0.0, 360.0] range).</p> <p><code>s</code> <code>float</code> The saturation value (in the [0.0, 1.0] range).</p> <p><code>l</code> <code>float</code> The lightness value (in the [0.0, 1.0] range).</p> <p>Returns</p> <p><code>integer</code> The color (in 0xbbggrr format).</p>"}, {"location": "qtm.utilities.color.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html", "title": "qtm.utilities.documentation", "text": "<p>Various documentation utilities.</p> PythonLuaREST <pre><code>import qtm\n\nprint(qtm.utilities.documentation.get_package_name())\n# qtm\n\ndoc_qtm = qtm.utilities.documentation.get_package_documentation()\nmodule_name = 'qtm.utilities.documentation'\nmodule_index = next((index for (index, d) in enumerate(doc_qtm['modules']) if d[\"path\"] == module_name), None)\nprint(module_index)\n# 30\n\nprint(qtm.utilities.documentation.get_module_brief(module_index))\n# Various documentation utilities.\n\ndoc_module = qtm.utilities.documentation.get_module_documentation(module_index)\nmethod_name = 'get_parameter_documentation'\nmethod_index = next((index for (index, d) in enumerate(doc_module['methods']) if d[\"name\"] == method_name), None)\nprint(method_index)\n# 17\n\nprint(qtm.utilities.documentation.get_method_signature(module_index, method_index))\n# get_parameter_documentation(module_index: integer, method_index: integer, parameter_index: integer) -&gt; {\"name\": string, \"type\": string, \"description\": string}\n\nparameter_index = 0\nprint(qtm.utilities.documentation.get_parameter_documentation(module_index, method_index, parameter_index))\n# {'name': 'module_index', 'type': 'integer', 'description': 'The index of the module.'}\n</code></pre> <pre><code>print(qtm.utilities.documentation.get_package_name())\n-- qtm\n\ndoc_qtm = qtm.utilities.documentation.get_package_documentation()\nmodule_name = 'qtm.utilities.documentation'\nmodule_index = (function() for i,d in ipairs(doc_qtm.modules) do if d.path == module_name then return i end end end)()\nmodule_index = module_index - 1\nprint(module_index)\n-- 30\n\nprint(qtm.utilities.documentation.get_module_brief(module_index))\n-- Various documentation utilities.\n\ndoc_module = qtm.utilities.documentation.get_module_documentation(module_index)\nmethod_name = 'get_parameter_documentation'\nmethod_index = (function() for i,d in ipairs(doc_module.methods) do if d.name == method_name then return i end end end)()\nmethod_index = method_index - 1\nprint(method_index)\n-- 17\n\nprint(qtm.utilities.documentation.get_method_signature(module_index, method_index))\n-- get_parameter_documentation(module_index: integer, method_index: integer, parameter_index: integer) -&gt; {\"name\": string, \"type\": string, \"description\": string}\n\nparameter_index = 0\nprint(qtm.utilities.documentation.get_parameter_documentation(module_index, method_index, parameter_index))\n-- {description = \"The index of the module.\", name = \"module_index\", type = \"integer\"}\n</code></pre> <pre><code>curl --json \"\" http://localhost:7979/api/scripting/qtm/utilities/documentation/get_package_name/\n:: \"qtm\"\n\nset module_index=30\ncurl --json \"[%module_index%]\" http://localhost:7979/api/scripting/qtm/utilities/documentation/get_module_brief/\n:: \"Various documentation utilities.\"\n\nset method_index=17\ncurl --json \"[%module_index%, %method_index%]\" http://localhost:7979/api/scripting/qtm/utilities/documentation/get_method_signature/\n:: \"get_parameter_documentation(module_index: integer, method_index: integer, parameter_index: integer) -&gt; {\\\"name\\\": string, \\\"type\\\": string, \\\"description\\\": string}\"\n\nset parameter_index=0\ncurl --json \"[%module_index%, %method_index%, %parameter_index%]\" http://localhost:7979/api/scripting/qtm/utilities/documentation/get_parameter_documentation/\n:: {\"description\":\"The index of the module.\",\"name\":\"module_index\",\"type\":\"integer\"}\n</code></pre>"}, {"location": "qtm.utilities.documentation.html#get_package_name", "title": "get_package_name", "text": "<p>Get the name of the package.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_package_documentation", "title": "get_package_documentation", "text": "<p>Get the complete documentation of the package.</p> <p>Returns</p> <p><code>{\"name\": string, \"modules\": [{\"path\": string, \"brief\": string, \"details\": string, \"methods\": [{\"name\": string, \"brief\": string, \"details\": string, \"parameters\": [{\"name\": string, \"type\": string, \"description\": string}], \"return_value\": {\"type\": string, \"description\": string}?}]}]}</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_module_count", "title": "get_module_count", "text": "<p>Get the number of modules in the package.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_module_path", "title": "get_module_path", "text": "<p>Get the path of a module.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_module_brief", "title": "get_module_brief", "text": "<p>Get the brief description of a module.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_module_details", "title": "get_module_details", "text": "<p>Get the detailed description of a module.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_module_documentation", "title": "get_module_documentation", "text": "<p>Get the complete documentation of a module.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p>Returns</p> <p><code>{\"path\": string, \"brief\": string, \"details\": string, \"methods\": [{\"name\": string, \"brief\": string, \"details\": string, \"parameters\": [{\"name\": string, \"type\": string, \"description\": string}], \"return_value\": {\"type\": string, \"description\": string}?}]}</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_method_count", "title": "get_method_count", "text": "<p>Get the number of methods in a module.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_method_name", "title": "get_method_name", "text": "<p>Get the name of a method in a module.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_method_brief", "title": "get_method_brief", "text": "<p>Get the brief description of a method in a module.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_method_details", "title": "get_method_details", "text": "<p>Get the detailed description of a method in a module.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_method_signature", "title": "get_method_signature", "text": "<p>Get the signature of a method in a module.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_method_documentation", "title": "get_method_documentation", "text": "<p>Get the complete documentation of a method in a module.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>{\"name\": string, \"brief\": string, \"details\": string, \"parameters\": [{\"name\": string, \"type\": string, \"description\": string}], \"return_value\": {\"type\": string, \"description\": string}?}</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_parameter_count", "title": "get_parameter_count", "text": "<p>Get the number of parameters in a method.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>integer</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_parameter_name", "title": "get_parameter_name", "text": "<p>Get the name of a parameter in a method.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p><code>parameter_index</code> <code>integer</code> The index of the parameter.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_parameter_type", "title": "get_parameter_type", "text": "<p>Get the type of a parameter in a method.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p><code>parameter_index</code> <code>integer</code> The index of the parameter.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_parameter_description", "title": "get_parameter_description", "text": "<p>Get the description of a parameter in a method.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p><code>parameter_index</code> <code>integer</code> The index of the parameter.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_parameter_documentation", "title": "get_parameter_documentation", "text": "<p>Get the complete documentation of a parameter in a method.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p><code>parameter_index</code> <code>integer</code> The index of the parameter.</p> <p>Returns</p> <p><code>{\"name\": string, \"type\": string, \"description\": string}</code> </p>"}, {"location": "qtm.utilities.documentation.html#get_return_value_type", "title": "get_return_value_type", "text": "<p>Get the type of the return value in a method.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>string?</code> The return value type (or null, if method isn't returning a value).</p>"}, {"location": "qtm.utilities.documentation.html#get_return_value_description", "title": "get_return_value_description", "text": "<p>Get the description of the return value in a method.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>string?</code> The return value description (or null, if method isn't returning a value).</p>"}, {"location": "qtm.utilities.documentation.html#get_return_value_documentation", "title": "get_return_value_documentation", "text": "<p>Get the complete documentation of the return value in a method.</p> <p>Parameters</p> <p><code>module_index</code> <code>integer</code> The index of the module.</p> <p><code>method_index</code> <code>integer</code> The index of the method.</p> <p>Returns</p> <p><code>{\"type\": string, \"description\": string}?</code> The return value documentation (or null, if method isn't returning a value).</p>"}, {"location": "qtm.utilities.documentation.html#get_help_text", "title": "get_help_text", "text": "<p>Get the help text for a given topic.</p> <p>This method is used internally by the global 'help' function.</p> <p>Parameters</p> <p><code>topic</code> <code>\"overview\"|\"modules\"|\"types\"|\"signatures\"|\"changelog\"?</code> The help topic.</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.documentation.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "qtm.utilities.math.html", "title": "qtm.utilities.math", "text": "<p>Various math utilities.</p> <p>This module has not yet been implemented.</p>"}, {"location": "qtm.utilities.math.html#help", "title": "help", "text": "<p>Get the documentation for a module or method.</p> <p>Parameters</p> <p><code>method</code> <code>string?</code> The name of the method (if null, the documentation for the module will be returned instead).</p> <p>Returns</p> <p><code>string</code> </p>"}, {"location": "types.html", "title": "Types", "text": "Type Description bool Boolean (true or false). integer 64-bit signed integer. float 64-bit floating-point number. string 8-bit ansi string (codepage depends on the user settings in windows). function Any callable object such as a function or a lambda. enumeration String from a predefined set (e.g. \"enumerator1\"|\"enumerator2\" can be either \"enumerator1\" or \"enumerator2\"). matrix NxM matrix or 1xM vector with integer or float values (e.g. mat4x4f means a 4x4 matrix of floats, and vec3i means a 1x3 vector of integers). structure Map with predefined string keys (e.g. {\"field1\": integer, \"field2\": vec3f}). optional Nullable (e.g. bool? can be either a bool or null). vector List/array (e.g. [float] means a vector with float elements). For linear algebra vectors, see 'matrix' above. map Dictionary/table (e.g. {integer: string} means a map with integer keys and string values)."}]}